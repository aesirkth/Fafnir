
FAFNIR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000655c  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014f  08006794  08006794  00007794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080068e4  080068e4  000078e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080068e8  080068e8  000078e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000068  20000000  080068ec  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000250  20000068  08006954  00008068  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200002b8  08006954  000082b8  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012a37  00000000  00000000  0000809e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002439  00000000  00000000  0001aad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001270  00000000  00000000  0001cf10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000e27  00000000  00000000  0001e180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00032fb2  00000000  00000000  0001efa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00013da4  00000000  00000000  00051f59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00144128  00000000  00000000  00065cfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001a9e25  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000056c0  00000000  00000000  001a9e68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000004c  00000000  00000000  001af528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000068 	.word	0x20000068
 8000254:	00000000 	.word	0x00000000
 8000258:	0800677c 	.word	0x0800677c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	2000006c 	.word	0x2000006c
 8000274:	0800677c 	.word	0x0800677c

08000278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027e:	f000 fe25 	bl	8000ecc <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000282:	f000 f82f 	bl	80002e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000286:	f000 f983 	bl	8000590 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800028a:	f000 f885 	bl	8000398 <MX_FDCAN1_Init>
  MX_TIM3_Init();
 800028e:	f000 f925 	bl	80004dc <MX_TIM3_Init>
  MX_ICACHE_Init();
 8000292:	f000 f90f 	bl	80004b4 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

   // Start FDCAN1 peripheral
   if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000296:	4812      	ldr	r0, [pc, #72]	@ (80002e0 <main+0x68>)
 8000298:	f001 fa42 	bl	8001720 <HAL_FDCAN_Start>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <main+0x2e>
        Error_Handler();
 80002a2:	f000 fbe5 	bl	8000a70 <Error_Handler>
   }

   // Enable RX FIFO 0 Notification for incoming messages
   if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80002a6:	2200      	movs	r2, #0
 80002a8:	2101      	movs	r1, #1
 80002aa:	480d      	ldr	r0, [pc, #52]	@ (80002e0 <main+0x68>)
 80002ac:	f001 fb68 	bl	8001980 <HAL_FDCAN_ActivateNotification>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <main+0x42>
        Error_Handler();
 80002b6:	f000 fbdb 	bl	8000a70 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

	    // Update servo state machine
	    handleServo();
 80002ba:	f000 f9e1 	bl	8000680 <handleServo>

	    // Update each pyro channel
	    for (int i = 0; i < NUM_PYROS; i++) {
 80002be:	2300      	movs	r3, #0
 80002c0:	607b      	str	r3, [r7, #4]
 80002c2:	e005      	b.n	80002d0 <main+0x58>
	        handlePyro(i);
 80002c4:	6878      	ldr	r0, [r7, #4]
 80002c6:	f000 fa0d 	bl	80006e4 <handlePyro>
	    for (int i = 0; i < NUM_PYROS; i++) {
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	3301      	adds	r3, #1
 80002ce:	607b      	str	r3, [r7, #4]
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2b02      	cmp	r3, #2
 80002d4:	ddf6      	ble.n	80002c4 <main+0x4c>
	        can_send_std(CAN_ID_STATUS, data, sizeof(data));
	    }

	    */

	    HAL_Delay(20);
 80002d6:	2014      	movs	r0, #20
 80002d8:	f000 febe 	bl	8001058 <HAL_Delay>
	    handleServo();
 80002dc:	e7ed      	b.n	80002ba <main+0x42>
 80002de:	bf00      	nop
 80002e0:	20000084 	.word	0x20000084

080002e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b09e      	sub	sp, #120	@ 0x78
 80002e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ea:	f107 0318 	add.w	r3, r7, #24
 80002ee:	2260      	movs	r2, #96	@ 0x60
 80002f0:	2100      	movs	r1, #0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f005 fcae 	bl	8005c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f8:	463b      	mov	r3, r7
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]
 8000304:	611a      	str	r2, [r3, #16]
 8000306:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8000308:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800030c:	f002 f848 	bl	80023a0 <HAL_PWREx_ControlVoltageScaling>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000316:	f000 fbab 	bl	8000a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800031a:	2301      	movs	r3, #1
 800031c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800031e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000322:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000324:	2302      	movs	r3, #2
 8000326:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000328:	2303      	movs	r3, #3
 800032a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV2;
 800032c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000330:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000332:	2302      	movs	r3, #2
 8000334:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000336:	231e      	movs	r3, #30
 8000338:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800033a:	2302      	movs	r3, #2
 800033c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800033e:	2304      	movs	r3, #4
 8000340:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000342:	2304      	movs	r3, #4
 8000344:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000346:	230c      	movs	r3, #12
 8000348:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800034a:	2300      	movs	r3, #0
 800034c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034e:	f107 0318 	add.w	r3, r7, #24
 8000352:	4618      	mov	r0, r3
 8000354:	f002 f8b0 	bl	80024b8 <HAL_RCC_OscConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800035e:	f000 fb87 	bl	8000a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000362:	231f      	movs	r3, #31
 8000364:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000366:	2303      	movs	r3, #3
 8000368:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036a:	2300      	movs	r3, #0
 800036c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800036e:	2300      	movs	r3, #0
 8000370:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000372:	2300      	movs	r3, #0
 8000374:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000376:	2300      	movs	r3, #0
 8000378:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800037a:	463b      	mov	r3, r7
 800037c:	2102      	movs	r1, #2
 800037e:	4618      	mov	r0, r3
 8000380:	f002 ff76 	bl	8003270 <HAL_RCC_ClockConfig>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800038a:	f000 fb71 	bl	8000a70 <Error_Handler>
  }
}
 800038e:	bf00      	nop
 8000390:	3778      	adds	r7, #120	@ 0x78
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
	...

08000398 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b086      	sub	sp, #24
 800039c:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800039e:	4b42      	ldr	r3, [pc, #264]	@ (80004a8 <MX_FDCAN1_Init+0x110>)
 80003a0:	4a42      	ldr	r2, [pc, #264]	@ (80004ac <MX_FDCAN1_Init+0x114>)
 80003a2:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80003a4:	4b40      	ldr	r3, [pc, #256]	@ (80004a8 <MX_FDCAN1_Init+0x110>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80003aa:	4b3f      	ldr	r3, [pc, #252]	@ (80004a8 <MX_FDCAN1_Init+0x110>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80003b0:	4b3d      	ldr	r3, [pc, #244]	@ (80004a8 <MX_FDCAN1_Init+0x110>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80003b6:	4b3c      	ldr	r3, [pc, #240]	@ (80004a8 <MX_FDCAN1_Init+0x110>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80003bc:	4b3a      	ldr	r3, [pc, #232]	@ (80004a8 <MX_FDCAN1_Init+0x110>)
 80003be:	2200      	movs	r2, #0
 80003c0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80003c2:	4b39      	ldr	r3, [pc, #228]	@ (80004a8 <MX_FDCAN1_Init+0x110>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 9;
 80003c8:	4b37      	ldr	r3, [pc, #220]	@ (80004a8 <MX_FDCAN1_Init+0x110>)
 80003ca:	2209      	movs	r2, #9
 80003cc:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 80003ce:	4b36      	ldr	r3, [pc, #216]	@ (80004a8 <MX_FDCAN1_Init+0x110>)
 80003d0:	2202      	movs	r2, #2
 80003d2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 80003d4:	4b34      	ldr	r3, [pc, #208]	@ (80004a8 <MX_FDCAN1_Init+0x110>)
 80003d6:	220e      	movs	r2, #14
 80003d8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 80003da:	4b33      	ldr	r3, [pc, #204]	@ (80004a8 <MX_FDCAN1_Init+0x110>)
 80003dc:	2205      	movs	r2, #5
 80003de:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80003e0:	4b31      	ldr	r3, [pc, #196]	@ (80004a8 <MX_FDCAN1_Init+0x110>)
 80003e2:	2201      	movs	r2, #1
 80003e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80003e6:	4b30      	ldr	r3, [pc, #192]	@ (80004a8 <MX_FDCAN1_Init+0x110>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80003ec:	4b2e      	ldr	r3, [pc, #184]	@ (80004a8 <MX_FDCAN1_Init+0x110>)
 80003ee:	2201      	movs	r2, #1
 80003f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80003f2:	4b2d      	ldr	r3, [pc, #180]	@ (80004a8 <MX_FDCAN1_Init+0x110>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 2;
 80003f8:	4b2b      	ldr	r3, [pc, #172]	@ (80004a8 <MX_FDCAN1_Init+0x110>)
 80003fa:	2202      	movs	r2, #2
 80003fc:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80003fe:	4b2a      	ldr	r3, [pc, #168]	@ (80004a8 <MX_FDCAN1_Init+0x110>)
 8000400:	2200      	movs	r2, #0
 8000402:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000404:	4b28      	ldr	r3, [pc, #160]	@ (80004a8 <MX_FDCAN1_Init+0x110>)
 8000406:	2200      	movs	r2, #0
 8000408:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800040a:	4827      	ldr	r0, [pc, #156]	@ (80004a8 <MX_FDCAN1_Init+0x110>)
 800040c:	f000 ffdc 	bl	80013c8 <HAL_FDCAN_Init>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000416:	f000 fb2b 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800041a:	2200      	movs	r2, #0
 800041c:	2100      	movs	r1, #0
 800041e:	2027      	movs	r0, #39	@ 0x27
 8000420:	f000 fef6 	bl	8001210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000424:	2027      	movs	r0, #39	@ 0x27
 8000426:	f000 ff0d 	bl	8001244 <HAL_NVIC_EnableIRQ>

  FDCAN_FilterTypeDef sFilterConfig;

  // Filter for CAN_ID_SERVO_ZERO
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800042a:	2300      	movs	r3, #0
 800042c:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 800042e:	2300      	movs	r3, #0
 8000430:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000432:	2302      	movs	r3, #2
 8000434:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000436:	2301      	movs	r3, #1
 8000438:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = CAN_ID_SERVO_ZERO ;
 800043a:	f240 7302 	movw	r3, #1794	@ 0x702
 800043e:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x7FF;
 8000440:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000444:	617b      	str	r3, [r7, #20]
  HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 8000446:	463b      	mov	r3, r7
 8000448:	4619      	mov	r1, r3
 800044a:	4817      	ldr	r0, [pc, #92]	@ (80004a8 <MX_FDCAN1_Init+0x110>)
 800044c:	f001 f90e 	bl	800166c <HAL_FDCAN_ConfigFilter>

  // Filter for CAN_ID_SERVO_ROTATE
   sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000450:	2300      	movs	r3, #0
 8000452:	603b      	str	r3, [r7, #0]
   sFilterConfig.FilterIndex = 1;
 8000454:	2301      	movs	r3, #1
 8000456:	607b      	str	r3, [r7, #4]
   sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000458:	2302      	movs	r3, #2
 800045a:	60bb      	str	r3, [r7, #8]
   sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800045c:	2301      	movs	r3, #1
 800045e:	60fb      	str	r3, [r7, #12]
   sFilterConfig.FilterID1 = CAN_ID_SERVO_ROTATE;
 8000460:	f240 7303 	movw	r3, #1795	@ 0x703
 8000464:	613b      	str	r3, [r7, #16]
   sFilterConfig.FilterID2 = 0x7FF;
 8000466:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800046a:	617b      	str	r3, [r7, #20]
   HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 800046c:	463b      	mov	r3, r7
 800046e:	4619      	mov	r1, r3
 8000470:	480d      	ldr	r0, [pc, #52]	@ (80004a8 <MX_FDCAN1_Init+0x110>)
 8000472:	f001 f8fb 	bl	800166c <HAL_FDCAN_ConfigFilter>

  TxHeader.IdType              = FDCAN_STANDARD_ID;
 8000476:	4b0e      	ldr	r3, [pc, #56]	@ (80004b0 <MX_FDCAN1_Init+0x118>)
 8000478:	2200      	movs	r2, #0
 800047a:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType         = FDCAN_DATA_FRAME;
 800047c:	4b0c      	ldr	r3, [pc, #48]	@ (80004b0 <MX_FDCAN1_Init+0x118>)
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
  TxHeader.FDFormat            = FDCAN_CLASSIC_CAN;
 8000482:	4b0b      	ldr	r3, [pc, #44]	@ (80004b0 <MX_FDCAN1_Init+0x118>)
 8000484:	2200      	movs	r2, #0
 8000486:	619a      	str	r2, [r3, #24]
  TxHeader.BitRateSwitch       = FDCAN_BRS_OFF;
 8000488:	4b09      	ldr	r3, [pc, #36]	@ (80004b0 <MX_FDCAN1_Init+0x118>)
 800048a:	2200      	movs	r2, #0
 800048c:	615a      	str	r2, [r3, #20]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800048e:	4b08      	ldr	r3, [pc, #32]	@ (80004b0 <MX_FDCAN1_Init+0x118>)
 8000490:	2200      	movs	r2, #0
 8000492:	611a      	str	r2, [r3, #16]
  TxHeader.TxEventFifoControl  = FDCAN_NO_TX_EVENTS;
 8000494:	4b06      	ldr	r3, [pc, #24]	@ (80004b0 <MX_FDCAN1_Init+0x118>)
 8000496:	2200      	movs	r2, #0
 8000498:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker       = 0;
 800049a:	4b05      	ldr	r3, [pc, #20]	@ (80004b0 <MX_FDCAN1_Init+0x118>)
 800049c:	2200      	movs	r2, #0
 800049e:	621a      	str	r2, [r3, #32]


  /* USER CODE END FDCAN1_Init 2 */

}
 80004a0:	bf00      	nop
 80004a2:	3718      	adds	r7, #24
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	20000084 	.word	0x20000084
 80004ac:	4000a400 	.word	0x4000a400
 80004b0:	20000134 	.word	0x20000134

080004b4 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80004b8:	2000      	movs	r0, #0
 80004ba:	f001 ff41 	bl	8002340 <HAL_ICACHE_ConfigAssociativityMode>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80004c4:	f000 fad4 	bl	8000a70 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80004c8:	f001 ff5a 	bl	8002380 <HAL_ICACHE_Enable>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80004d2:	f000 facd 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
	...

080004dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08a      	sub	sp, #40	@ 0x28
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004e2:	f107 031c 	add.w	r3, r7, #28
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004ee:	463b      	mov	r3, r7
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
 80004fa:	611a      	str	r2, [r3, #16]
 80004fc:	615a      	str	r2, [r3, #20]
 80004fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000500:	4b21      	ldr	r3, [pc, #132]	@ (8000588 <MX_TIM3_Init+0xac>)
 8000502:	4a22      	ldr	r2, [pc, #136]	@ (800058c <MX_TIM3_Init+0xb0>)
 8000504:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8000506:	4b20      	ldr	r3, [pc, #128]	@ (8000588 <MX_TIM3_Init+0xac>)
 8000508:	2259      	movs	r2, #89	@ 0x59
 800050a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800050c:	4b1e      	ldr	r3, [pc, #120]	@ (8000588 <MX_TIM3_Init+0xac>)
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000512:	4b1d      	ldr	r3, [pc, #116]	@ (8000588 <MX_TIM3_Init+0xac>)
 8000514:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000518:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800051a:	4b1b      	ldr	r3, [pc, #108]	@ (8000588 <MX_TIM3_Init+0xac>)
 800051c:	2200      	movs	r2, #0
 800051e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000520:	4b19      	ldr	r3, [pc, #100]	@ (8000588 <MX_TIM3_Init+0xac>)
 8000522:	2200      	movs	r2, #0
 8000524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000526:	4818      	ldr	r0, [pc, #96]	@ (8000588 <MX_TIM3_Init+0xac>)
 8000528:	f004 f90e 	bl	8004748 <HAL_TIM_PWM_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000532:	f000 fa9d 	bl	8000a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000536:	2300      	movs	r3, #0
 8000538:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800053a:	2300      	movs	r3, #0
 800053c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800053e:	f107 031c 	add.w	r3, r7, #28
 8000542:	4619      	mov	r1, r3
 8000544:	4810      	ldr	r0, [pc, #64]	@ (8000588 <MX_TIM3_Init+0xac>)
 8000546:	f005 f8b9 	bl	80056bc <HAL_TIMEx_MasterConfigSynchronization>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000550:	f000 fa8e 	bl	8000a70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000554:	2360      	movs	r3, #96	@ 0x60
 8000556:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800055c:	2300      	movs	r3, #0
 800055e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000560:	2300      	movs	r3, #0
 8000562:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000564:	463b      	mov	r3, r7
 8000566:	2200      	movs	r2, #0
 8000568:	4619      	mov	r1, r3
 800056a:	4807      	ldr	r0, [pc, #28]	@ (8000588 <MX_TIM3_Init+0xac>)
 800056c:	f004 fa96 	bl	8004a9c <HAL_TIM_PWM_ConfigChannel>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000576:	f000 fa7b 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800057a:	4803      	ldr	r0, [pc, #12]	@ (8000588 <MX_TIM3_Init+0xac>)
 800057c:	f000 fb2c 	bl	8000bd8 <HAL_TIM_MspPostInit>

}
 8000580:	bf00      	nop
 8000582:	3728      	adds	r7, #40	@ 0x28
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	200000e8 	.word	0x200000e8
 800058c:	40000400 	.word	0x40000400

08000590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	f107 030c 	add.w	r3, r7, #12
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005a6:	4b33      	ldr	r3, [pc, #204]	@ (8000674 <MX_GPIO_Init+0xe4>)
 80005a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005ac:	4a31      	ldr	r2, [pc, #196]	@ (8000674 <MX_GPIO_Init+0xe4>)
 80005ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80005b6:	4b2f      	ldr	r3, [pc, #188]	@ (8000674 <MX_GPIO_Init+0xe4>)
 80005b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000674 <MX_GPIO_Init+0xe4>)
 80005c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005ca:	4a2a      	ldr	r2, [pc, #168]	@ (8000674 <MX_GPIO_Init+0xe4>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80005d4:	4b27      	ldr	r3, [pc, #156]	@ (8000674 <MX_GPIO_Init+0xe4>)
 80005d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	4b24      	ldr	r3, [pc, #144]	@ (8000674 <MX_GPIO_Init+0xe4>)
 80005e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005e8:	4a22      	ldr	r2, [pc, #136]	@ (8000674 <MX_GPIO_Init+0xe4>)
 80005ea:	f043 0302 	orr.w	r3, r3, #2
 80005ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80005f2:	4b20      	ldr	r3, [pc, #128]	@ (8000674 <MX_GPIO_Init+0xe4>)
 80005f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005f8:	f003 0302 	and.w	r3, r3, #2
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_8
 8000600:	2200      	movs	r2, #0
 8000602:	f240 7107 	movw	r1, #1799	@ 0x707
 8000606:	481c      	ldr	r0, [pc, #112]	@ (8000678 <MX_GPIO_Init+0xe8>)
 8000608:	f001 fe82 	bl	8002310 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	2160      	movs	r1, #96	@ 0x60
 8000610:	481a      	ldr	r0, [pc, #104]	@ (800067c <MX_GPIO_Init+0xec>)
 8000612:	f001 fe7d 	bl	8002310 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA8
                           PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_8
 8000616:	f240 7307 	movw	r3, #1799	@ 0x707
 800061a:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061c:	2301      	movs	r3, #1
 800061e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000624:	2300      	movs	r3, #0
 8000626:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	4619      	mov	r1, r3
 800062e:	4812      	ldr	r0, [pc, #72]	@ (8000678 <MX_GPIO_Init+0xe8>)
 8000630:	f001 fc7e 	bl	8001f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000634:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000638:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	4619      	mov	r1, r3
 8000648:	480c      	ldr	r0, [pc, #48]	@ (800067c <MX_GPIO_Init+0xec>)
 800064a:	f001 fc71 	bl	8001f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800064e:	2360      	movs	r3, #96	@ 0x60
 8000650:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	2301      	movs	r3, #1
 8000654:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2300      	movs	r3, #0
 800065c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065e:	f107 030c 	add.w	r3, r7, #12
 8000662:	4619      	mov	r1, r3
 8000664:	4805      	ldr	r0, [pc, #20]	@ (800067c <MX_GPIO_Init+0xec>)
 8000666:	f001 fc63 	bl	8001f30 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800066a:	bf00      	nop
 800066c:	3720      	adds	r7, #32
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	46020c00 	.word	0x46020c00
 8000678:	42020000 	.word	0x42020000
 800067c:	42020400 	.word	0x42020400

08000680 <handleServo>:
	    }

	    return 0;
}

void handleServo(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
    switch (servoState) {
 8000684:	4b14      	ldr	r3, [pc, #80]	@ (80006d8 <handleServo+0x58>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b03      	cmp	r3, #3
 800068a:	d823      	bhi.n	80006d4 <handleServo+0x54>
 800068c:	a201      	add	r2, pc, #4	@ (adr r2, 8000694 <handleServo+0x14>)
 800068e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000692:	bf00      	nop
 8000694:	080006d3 	.word	0x080006d3
 8000698:	080006a5 	.word	0x080006a5
 800069c:	080006d3 	.word	0x080006d3
 80006a0:	080006b1 	.word	0x080006b1
        case STATE_IDLE:
            //Do nothing until we receive some initial command
            break;

        case STATE_INIT:
            servoZero();
 80006a4:	f000 f986 	bl	80009b4 <servoZero>
            servoState = STATE_READY;
 80006a8:	4b0b      	ldr	r3, [pc, #44]	@ (80006d8 <handleServo+0x58>)
 80006aa:	2202      	movs	r2, #2
 80006ac:	701a      	strb	r2, [r3, #0]
            break;
 80006ae:	e011      	b.n	80006d4 <handleServo+0x54>
        case STATE_READY:
            //Wait for rotation command
            break;

        case STATE_ACTUATE:
            servoRotate(targetAngle);
 80006b0:	4b0a      	ldr	r3, [pc, #40]	@ (80006dc <handleServo+0x5c>)
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	ee07 3a90 	vmov	s15, r3
 80006b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006bc:	eeb0 0a67 	vmov.f32	s0, s15
 80006c0:	f000 f988 	bl	80009d4 <servoRotate>
            printf("Servo Rotated\n");
 80006c4:	4806      	ldr	r0, [pc, #24]	@ (80006e0 <handleServo+0x60>)
 80006c6:	f005 f9e5 	bl	8005a94 <puts>
            servoState = STATE_READY;
 80006ca:	4b03      	ldr	r3, [pc, #12]	@ (80006d8 <handleServo+0x58>)
 80006cc:	2202      	movs	r2, #2
 80006ce:	701a      	strb	r2, [r3, #0]
            break;
 80006d0:	e000      	b.n	80006d4 <handleServo+0x54>
            break;
 80006d2:	bf00      	nop
    }
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000158 	.word	0x20000158
 80006dc:	20000160 	.word	0x20000160
 80006e0:	08006794 	.word	0x08006794

080006e4 <handlePyro>:

void handlePyro(int i) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
    switch (pyroState[i]) {
 80006ec:	4a1b      	ldr	r2, [pc, #108]	@ (800075c <handlePyro+0x78>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4413      	add	r3, r2
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b03      	cmp	r3, #3
 80006f6:	d82d      	bhi.n	8000754 <handlePyro+0x70>
 80006f8:	a201      	add	r2, pc, #4	@ (adr r2, 8000700 <handlePyro+0x1c>)
 80006fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fe:	bf00      	nop
 8000700:	0800074f 	.word	0x0800074f
 8000704:	08000711 	.word	0x08000711
 8000708:	0800074f 	.word	0x0800074f
 800070c:	08000741 	.word	0x08000741
        case STATE_IDLE:
            //Do nothing until we receive some initial command
            break;

        case STATE_INIT:
            pyroActuate(i, 0);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f000 f824 	bl	8000764 <pyroActuate>
            if (pyroDetect(i) == 0) { //Low = continuity detected
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	b2db      	uxtb	r3, r3
 8000720:	4618      	mov	r0, r3
 8000722:	f000 f863 	bl	80007ec <pyroDetect>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d112      	bne.n	8000752 <handlePyro+0x6e>
                pyroState[i] = STATE_READY;
 800072c:	4a0b      	ldr	r2, [pc, #44]	@ (800075c <handlePyro+0x78>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4413      	add	r3, r2
 8000732:	2202      	movs	r2, #2
 8000734:	701a      	strb	r2, [r3, #0]
                printf("[Pyro %d] Continuity OK\n", i);
 8000736:	6879      	ldr	r1, [r7, #4]
 8000738:	4809      	ldr	r0, [pc, #36]	@ (8000760 <handlePyro+0x7c>)
 800073a:	f005 f943 	bl	80059c4 <iprintf>
            }
            break;
 800073e:	e008      	b.n	8000752 <handlePyro+0x6e>
        case STATE_READY:
            // WAit for actuation command
            break;

        case STATE_ACTUATE:
            pyroActuate(i, 1);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	b2db      	uxtb	r3, r3
 8000744:	2101      	movs	r1, #1
 8000746:	4618      	mov	r0, r3
 8000748:	f000 f80c 	bl	8000764 <pyroActuate>
            //remain active until the CMD_PYRO_DISABLE is received
            break;
 800074c:	e002      	b.n	8000754 <handlePyro+0x70>
            break;
 800074e:	bf00      	nop
 8000750:	e000      	b.n	8000754 <handlePyro+0x70>
            break;
 8000752:	bf00      	nop
    }
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	2000015c 	.word	0x2000015c
 8000760:	080067a4 	.word	0x080067a4

08000764 <pyroActuate>:

void pyroActuate(uint8_t index, uint8_t state) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	460a      	mov	r2, r1
 800076e:	71fb      	strb	r3, [r7, #7]
 8000770:	4613      	mov	r3, r2
 8000772:	71bb      	strb	r3, [r7, #6]
	if (index >= NUM_PYROS) return;
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	2b02      	cmp	r3, #2
 8000778:	d82e      	bhi.n	80007d8 <pyroActuate+0x74>
	HAL_GPIO_WritePin(pyroPort, pyroPins[index], state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800077a:	4819      	ldr	r0, [pc, #100]	@ (80007e0 <pyroActuate+0x7c>)
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	4a19      	ldr	r2, [pc, #100]	@ (80007e4 <pyroActuate+0x80>)
 8000780:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000784:	79bb      	ldrb	r3, [r7, #6]
 8000786:	2b00      	cmp	r3, #0
 8000788:	bf14      	ite	ne
 800078a:	2301      	movne	r3, #1
 800078c:	2300      	moveq	r3, #0
 800078e:	b2db      	uxtb	r3, r3
 8000790:	461a      	mov	r2, r3
 8000792:	f001 fdbd 	bl	8002310 <HAL_GPIO_WritePin>

    if (state) {
 8000796:	79bb      	ldrb	r3, [r7, #6]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d00d      	beq.n	80007b8 <pyroActuate+0x54>
    	pyroMask |=  (1 << index); //set union
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	2201      	movs	r2, #1
 80007a0:	fa02 f303 	lsl.w	r3, r2, r3
 80007a4:	b25a      	sxtb	r2, r3
 80007a6:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <pyroActuate+0x84>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	b25b      	sxtb	r3, r3
 80007ac:	4313      	orrs	r3, r2
 80007ae:	b25b      	sxtb	r3, r3
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b0d      	ldr	r3, [pc, #52]	@ (80007e8 <pyroActuate+0x84>)
 80007b4:	701a      	strb	r2, [r3, #0]
 80007b6:	e010      	b.n	80007da <pyroActuate+0x76>
    } else {
    	pyroMask &= ~(1 << index); //set intersection
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	2201      	movs	r2, #1
 80007bc:	fa02 f303 	lsl.w	r3, r2, r3
 80007c0:	b25b      	sxtb	r3, r3
 80007c2:	43db      	mvns	r3, r3
 80007c4:	b25a      	sxtb	r2, r3
 80007c6:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <pyroActuate+0x84>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	b25b      	sxtb	r3, r3
 80007cc:	4013      	ands	r3, r2
 80007ce:	b25b      	sxtb	r3, r3
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4b05      	ldr	r3, [pc, #20]	@ (80007e8 <pyroActuate+0x84>)
 80007d4:	701a      	strb	r2, [r3, #0]
 80007d6:	e000      	b.n	80007da <pyroActuate+0x76>
	if (index >= NUM_PYROS) return;
 80007d8:	bf00      	nop
    }

}
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	42020000 	.word	0x42020000
 80007e4:	080067c0 	.word	0x080067c0
 80007e8:	2000015f 	.word	0x2000015f

080007ec <pyroDetect>:

uint8_t pyroDetect(uint8_t index) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	71fb      	strb	r3, [r7, #7]
	if (index >= NUM_PYROS) return 69; //69 means error
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	2b02      	cmp	r3, #2
 80007fa:	d901      	bls.n	8000800 <pyroDetect+0x14>
 80007fc:	2345      	movs	r3, #69	@ 0x45
 80007fe:	e00f      	b.n	8000820 <pyroDetect+0x34>
    //LOW = continuity detected (return 0)
    //HIGH = open circuit (return 1)

	GPIO_PinState state = HAL_GPIO_ReadPin(pyroDetectPort, pyroDetectPins[index]);
 8000800:	4809      	ldr	r0, [pc, #36]	@ (8000828 <pyroDetect+0x3c>)
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	4a09      	ldr	r2, [pc, #36]	@ (800082c <pyroDetect+0x40>)
 8000806:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800080a:	4619      	mov	r1, r3
 800080c:	f001 fd68 	bl	80022e0 <HAL_GPIO_ReadPin>
 8000810:	4603      	mov	r3, r0
 8000812:	73fb      	strb	r3, [r7, #15]

    return (state == GPIO_PIN_RESET) ? 0 : 1;
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	2b00      	cmp	r3, #0
 8000818:	bf14      	ite	ne
 800081a:	2301      	movne	r3, #1
 800081c:	2300      	moveq	r3, #0
 800081e:	b2db      	uxtb	r3, r3
}
 8000820:	4618      	mov	r0, r3
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	42020400 	.word	0x42020400
 800082c:	080067c8 	.word	0x080067c8

08000830 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t it)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b090      	sub	sp, #64	@ 0x40
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
    if ((it & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) == 0) return;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	f003 0301 	and.w	r3, r3, #1
 8000840:	2b00      	cmp	r3, #0
 8000842:	d020      	beq.n	8000886 <HAL_FDCAN_RxFifo0Callback+0x56>

    FDCAN_RxHeaderTypeDef rx;
    uint8_t d[8];

    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rx, d) != HAL_OK) return;
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	f107 0214 	add.w	r2, r7, #20
 800084c:	2140      	movs	r1, #64	@ 0x40
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f000 ff8e 	bl	8001770 <HAL_FDCAN_GetRxMessage>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d117      	bne.n	800088a <HAL_FDCAN_RxFifo0Callback+0x5a>

    uint8_t n = getDataLength(&rx);
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	4618      	mov	r0, r3
 8000860:	f000 f81a 	bl	8000898 <getDataLength>
 8000864:	4603      	mov	r3, r0
 8000866:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    switch (rx.Identifier) {
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	f240 7202 	movw	r2, #1794	@ 0x702
 8000870:	4293      	cmp	r3, r2
 8000872:	d004      	beq.n	800087e <HAL_FDCAN_RxFifo0Callback+0x4e>
 8000874:	f240 7203 	movw	r2, #1795	@ 0x703
 8000878:	4293      	cmp	r3, r2
 800087a:	d008      	beq.n	800088e <HAL_FDCAN_RxFifo0Callback+0x5e>
        }
        break;

      default:
        // Optionally increment error counter here
        break;
 800087c:	e008      	b.n	8000890 <HAL_FDCAN_RxFifo0Callback+0x60>
         if (n >= 1 && d[0] == 1) {
 800087e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000882:	2b00      	cmp	r3, #0
        break;
 8000884:	e004      	b.n	8000890 <HAL_FDCAN_RxFifo0Callback+0x60>
    if ((it & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) == 0) return;
 8000886:	bf00      	nop
 8000888:	e002      	b.n	8000890 <HAL_FDCAN_RxFifo0Callback+0x60>
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rx, d) != HAL_OK) return;
 800088a:	bf00      	nop
 800088c:	e000      	b.n	8000890 <HAL_FDCAN_RxFifo0Callback+0x60>
        break;
 800088e:	bf00      	nop
    }
}
 8000890:	3740      	adds	r7, #64	@ 0x40
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <getDataLength>:
    }
    HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader,
                                  (len && data) ? (uint8_t*)data : NULL);
}

uint8_t getDataLength(FDCAN_RxHeaderTypeDef *hdr) {
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  switch (hdr->DataLength) {
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	2b08      	cmp	r3, #8
 80008a6:	d827      	bhi.n	80008f8 <getDataLength+0x60>
 80008a8:	a201      	add	r2, pc, #4	@ (adr r2, 80008b0 <getDataLength+0x18>)
 80008aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ae:	bf00      	nop
 80008b0:	080008d5 	.word	0x080008d5
 80008b4:	080008d9 	.word	0x080008d9
 80008b8:	080008dd 	.word	0x080008dd
 80008bc:	080008e1 	.word	0x080008e1
 80008c0:	080008e5 	.word	0x080008e5
 80008c4:	080008e9 	.word	0x080008e9
 80008c8:	080008ed 	.word	0x080008ed
 80008cc:	080008f1 	.word	0x080008f1
 80008d0:	080008f5 	.word	0x080008f5
    case FDCAN_DLC_BYTES_0: return 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	e010      	b.n	80008fa <getDataLength+0x62>
    case FDCAN_DLC_BYTES_1: return 1;
 80008d8:	2301      	movs	r3, #1
 80008da:	e00e      	b.n	80008fa <getDataLength+0x62>
    case FDCAN_DLC_BYTES_2: return 2;
 80008dc:	2302      	movs	r3, #2
 80008de:	e00c      	b.n	80008fa <getDataLength+0x62>
    case FDCAN_DLC_BYTES_3: return 3;
 80008e0:	2303      	movs	r3, #3
 80008e2:	e00a      	b.n	80008fa <getDataLength+0x62>
    case FDCAN_DLC_BYTES_4: return 4;
 80008e4:	2304      	movs	r3, #4
 80008e6:	e008      	b.n	80008fa <getDataLength+0x62>
    case FDCAN_DLC_BYTES_5: return 5;
 80008e8:	2305      	movs	r3, #5
 80008ea:	e006      	b.n	80008fa <getDataLength+0x62>
    case FDCAN_DLC_BYTES_6: return 6;
 80008ec:	2306      	movs	r3, #6
 80008ee:	e004      	b.n	80008fa <getDataLength+0x62>
    case FDCAN_DLC_BYTES_7: return 7;
 80008f0:	2307      	movs	r3, #7
 80008f2:	e002      	b.n	80008fa <getDataLength+0x62>
    case FDCAN_DLC_BYTES_8: return 8;
 80008f4:	2308      	movs	r3, #8
 80008f6:	e000      	b.n	80008fa <getDataLength+0x62>
    default: return 0;
 80008f8:	2300      	movs	r3, #0
  }
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop

08000908 <setPWM>:


void setPWM(TIM_HandleTypeDef *timer_handle, uint32_t timer_channel, float duty) {
 8000908:	b480      	push	{r7}
 800090a:	b087      	sub	sp, #28
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	ed87 0a01 	vstr	s0, [r7, #4]

    uint32_t arr = __HAL_TIM_GET_AUTORELOAD(timer_handle);
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800091c:	613b      	str	r3, [r7, #16]
    uint32_t ccr = (uint32_t)((duty * (float)(arr + 1U)) + 0.5f);
 800091e:	693b      	ldr	r3, [r7, #16]
 8000920:	3301      	adds	r3, #1
 8000922:	ee07 3a90 	vmov	s15, r3
 8000926:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800092a:	edd7 7a01 	vldr	s15, [r7, #4]
 800092e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000932:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000936:	ee77 7a87 	vadd.f32	s15, s15, s14
 800093a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800093e:	ee17 3a90 	vmov	r3, s15
 8000942:	617b      	str	r3, [r7, #20]
    if (ccr > arr) ccr = arr;
 8000944:	697a      	ldr	r2, [r7, #20]
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	429a      	cmp	r2, r3
 800094a:	d901      	bls.n	8000950 <setPWM+0x48>
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_COMPARE(timer_handle, timer_channel, ccr);
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d104      	bne.n	8000960 <setPWM+0x58>
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	697a      	ldr	r2, [r7, #20]
 800095c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800095e:	e023      	b.n	80009a8 <setPWM+0xa0>
    __HAL_TIM_SET_COMPARE(timer_handle, timer_channel, ccr);
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	2b04      	cmp	r3, #4
 8000964:	d104      	bne.n	8000970 <setPWM+0x68>
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800096e:	e01b      	b.n	80009a8 <setPWM+0xa0>
    __HAL_TIM_SET_COMPARE(timer_handle, timer_channel, ccr);
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	2b08      	cmp	r3, #8
 8000974:	d104      	bne.n	8000980 <setPWM+0x78>
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800097e:	e013      	b.n	80009a8 <setPWM+0xa0>
    __HAL_TIM_SET_COMPARE(timer_handle, timer_channel, ccr);
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	2b0c      	cmp	r3, #12
 8000984:	d104      	bne.n	8000990 <setPWM+0x88>
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800098e:	e00b      	b.n	80009a8 <setPWM+0xa0>
    __HAL_TIM_SET_COMPARE(timer_handle, timer_channel, ccr);
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	2b10      	cmp	r3, #16
 8000994:	d104      	bne.n	80009a0 <setPWM+0x98>
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800099e:	e003      	b.n	80009a8 <setPWM+0xa0>
    __HAL_TIM_SET_COMPARE(timer_handle, timer_channel, ccr);
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80009a8:	bf00      	nop
 80009aa:	371c      	adds	r7, #28
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <servoZero>:

void servoZero(void) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&MOTOR_TIMER_HANDLE, MOTOR_TIMER_CHANNEL);
 80009b8:	2100      	movs	r1, #0
 80009ba:	4804      	ldr	r0, [pc, #16]	@ (80009cc <servoZero+0x18>)
 80009bc:	f003 ff1c 	bl	80047f8 <HAL_TIM_PWM_Start>
	servoRotate(0.0f);
 80009c0:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 80009d0 <servoZero+0x1c>
 80009c4:	f000 f806 	bl	80009d4 <servoRotate>
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200000e8 	.word	0x200000e8
 80009d0:	00000000 	.word	0x00000000

080009d4 <servoRotate>:

void servoRotate(float angle) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	ed87 0a01 	vstr	s0, [r7, #4]
	//The angle is mapped to -135 to 135 to properly represent CW and CCW rotations
	//Input of +90 == 90 deg rotation CW from the zero position.

	if (angle < -135 || angle > 135) angle = 0.0f;
 80009de:	edd7 7a01 	vldr	s15, [r7, #4]
 80009e2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000a58 <servoRotate+0x84>
 80009e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ee:	d408      	bmi.n	8000a02 <servoRotate+0x2e>
 80009f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80009f4:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000a5c <servoRotate+0x88>
 80009f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a00:	dd02      	ble.n	8000a08 <servoRotate+0x34>
 8000a02:	f04f 0300 	mov.w	r3, #0
 8000a06:	607b      	str	r3, [r7, #4]
	angle = 135.0f + angle; //135 degrees is the zero/middle position, since the servo motor can rotate 270 deg
 8000a08:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a0c:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000a5c <servoRotate+0x88>
 8000a10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a14:	edc7 7a01 	vstr	s15, [r7, #4]

	float degRatio = angle / 270.0f;
 8000a18:	ed97 7a01 	vldr	s14, [r7, #4]
 8000a1c:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8000a60 <servoRotate+0x8c>
 8000a20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a24:	edc7 7a05 	vstr	s15, [r7, #20]

	TIM_HandleTypeDef *htim = &MOTOR_TIMER_HANDLE;
 8000a28:	4b0e      	ldr	r3, [pc, #56]	@ (8000a64 <servoRotate+0x90>)
 8000a2a:	613b      	str	r3, [r7, #16]
	float duty = degRatio * 0.10f + 0.025f;  //mapping to 2.5%–12.5% duty cycle
 8000a2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a30:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000a68 <servoRotate+0x94>
 8000a34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a38:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8000a6c <servoRotate+0x98>
 8000a3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a40:	edc7 7a03 	vstr	s15, [r7, #12]
	setPWM(htim, MOTOR_TIMER_CHANNEL, duty);
 8000a44:	ed97 0a03 	vldr	s0, [r7, #12]
 8000a48:	2100      	movs	r1, #0
 8000a4a:	6938      	ldr	r0, [r7, #16]
 8000a4c:	f7ff ff5c 	bl	8000908 <setPWM>

}
 8000a50:	bf00      	nop
 8000a52:	3718      	adds	r7, #24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	c3070000 	.word	0xc3070000
 8000a5c:	43070000 	.word	0x43070000
 8000a60:	43870000 	.word	0x43870000
 8000a64:	200000e8 	.word	0x200000e8
 8000a68:	3dcccccd 	.word	0x3dcccccd
 8000a6c:	3ccccccd 	.word	0x3ccccccd

08000a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
}
 8000a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <Error_Handler+0x8>

08000a7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	4b0a      	ldr	r3, [pc, #40]	@ (8000aac <HAL_MspInit+0x30>)
 8000a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000a88:	4a08      	ldr	r2, [pc, #32]	@ (8000aac <HAL_MspInit+0x30>)
 8000a8a:	f043 0304 	orr.w	r3, r3, #4
 8000a8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000a92:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <HAL_MspInit+0x30>)
 8000a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000a98:	f003 0304 	and.w	r3, r3, #4
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	46020c00 	.word	0x46020c00

08000ab0 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b0ba      	sub	sp, #232	@ 0xe8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ac8:	f107 0310 	add.w	r3, r7, #16
 8000acc:	22c0      	movs	r2, #192	@ 0xc0
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f005 f8bf 	bl	8005c54 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a2b      	ldr	r2, [pc, #172]	@ (8000b88 <HAL_FDCAN_MspInit+0xd8>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d14f      	bne.n	8000b80 <HAL_FDCAN_MspInit+0xd0>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN1;
 8000ae0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000ae4:	f04f 0300 	mov.w	r3, #0
 8000ae8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Fdcan1ClockSelection = RCC_FDCAN1CLKSOURCE_PLL1;
 8000aec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000af0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000af4:	f107 0310 	add.w	r3, r7, #16
 8000af8:	4618      	mov	r0, r3
 8000afa:	f002 ff51 	bl	80039a0 <HAL_RCCEx_PeriphCLKConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000b04:	f7ff ffb4 	bl	8000a70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN1_CLK_ENABLE();
 8000b08:	4b20      	ldr	r3, [pc, #128]	@ (8000b8c <HAL_FDCAN_MspInit+0xdc>)
 8000b0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000b0e:	4a1f      	ldr	r2, [pc, #124]	@ (8000b8c <HAL_FDCAN_MspInit+0xdc>)
 8000b10:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b14:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8000b18:	4b1c      	ldr	r3, [pc, #112]	@ (8000b8c <HAL_FDCAN_MspInit+0xdc>)
 8000b1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000b1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	4b19      	ldr	r3, [pc, #100]	@ (8000b8c <HAL_FDCAN_MspInit+0xdc>)
 8000b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b2c:	4a17      	ldr	r2, [pc, #92]	@ (8000b8c <HAL_FDCAN_MspInit+0xdc>)
 8000b2e:	f043 0302 	orr.w	r3, r3, #2
 8000b32:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b36:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <HAL_FDCAN_MspInit+0xdc>)
 8000b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b3c:	f003 0302 	and.w	r3, r3, #2
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b44:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b48:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000b5e:	2309      	movs	r3, #9
 8000b60:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b64:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4809      	ldr	r0, [pc, #36]	@ (8000b90 <HAL_FDCAN_MspInit+0xe0>)
 8000b6c:	f001 f9e0 	bl	8001f30 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2100      	movs	r1, #0
 8000b74:	2027      	movs	r0, #39	@ 0x27
 8000b76:	f000 fb4b 	bl	8001210 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000b7a:	2027      	movs	r0, #39	@ 0x27
 8000b7c:	f000 fb62 	bl	8001244 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000b80:	bf00      	nop
 8000b82:	37e8      	adds	r7, #232	@ 0xe8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	4000a400 	.word	0x4000a400
 8000b8c:	46020c00 	.word	0x46020c00
 8000b90:	42020400 	.word	0x42020400

08000b94 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a0b      	ldr	r2, [pc, #44]	@ (8000bd0 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d10e      	bne.n	8000bc4 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd4 <HAL_TIM_PWM_MspInit+0x40>)
 8000ba8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000bac:	4a09      	ldr	r2, [pc, #36]	@ (8000bd4 <HAL_TIM_PWM_MspInit+0x40>)
 8000bae:	f043 0302 	orr.w	r3, r3, #2
 8000bb2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000bb6:	4b07      	ldr	r3, [pc, #28]	@ (8000bd4 <HAL_TIM_PWM_MspInit+0x40>)
 8000bb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000bc4:	bf00      	nop
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	40000400 	.word	0x40000400
 8000bd4:	46020c00 	.word	0x46020c00

08000bd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a12      	ldr	r2, [pc, #72]	@ (8000c40 <HAL_TIM_MspPostInit+0x68>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d11e      	bne.n	8000c38 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	4b12      	ldr	r3, [pc, #72]	@ (8000c44 <HAL_TIM_MspPostInit+0x6c>)
 8000bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c00:	4a10      	ldr	r2, [pc, #64]	@ (8000c44 <HAL_TIM_MspPostInit+0x6c>)
 8000c02:	f043 0301 	orr.w	r3, r3, #1
 8000c06:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <HAL_TIM_MspPostInit+0x6c>)
 8000c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c18:	2340      	movs	r3, #64	@ 0x40
 8000c1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	4619      	mov	r1, r3
 8000c32:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <HAL_TIM_MspPostInit+0x70>)
 8000c34:	f001 f97c 	bl	8001f30 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c38:	bf00      	nop
 8000c3a:	3720      	adds	r7, #32
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40000400 	.word	0x40000400
 8000c44:	46020c00 	.word	0x46020c00
 8000c48:	42020000 	.word	0x42020000

08000c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <NMI_Handler+0x4>

08000c54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <HardFault_Handler+0x4>

08000c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <MemManage_Handler+0x4>

08000c64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <BusFault_Handler+0x4>

08000c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <UsageFault_Handler+0x4>

08000c74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca2:	f000 f9b9 	bl	8001018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000cb0:	4802      	ldr	r0, [pc, #8]	@ (8000cbc <FDCAN1_IT0_IRQHandler+0x10>)
 8000cb2:	f000 ff4b 	bl	8001b4c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000084 	.word	0x20000084

08000cc0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	e00a      	b.n	8000ce8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cd2:	f3af 8000 	nop.w
 8000cd6:	4601      	mov	r1, r0
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	1c5a      	adds	r2, r3, #1
 8000cdc:	60ba      	str	r2, [r7, #8]
 8000cde:	b2ca      	uxtb	r2, r1
 8000ce0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	697a      	ldr	r2, [r7, #20]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	dbf0      	blt.n	8000cd2 <_read+0x12>
  }

  return len;
 8000cf0:	687b      	ldr	r3, [r7, #4]
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b086      	sub	sp, #24
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	60f8      	str	r0, [r7, #12]
 8000d02:	60b9      	str	r1, [r7, #8]
 8000d04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
 8000d0a:	e009      	b.n	8000d20 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	1c5a      	adds	r2, r3, #1
 8000d10:	60ba      	str	r2, [r7, #8]
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	697a      	ldr	r2, [r7, #20]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	dbf1      	blt.n	8000d0c <_write+0x12>
  }
  return len;
 8000d28:	687b      	ldr	r3, [r7, #4]
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3718      	adds	r7, #24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <_close>:

int _close(int file)
{
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
 8000d52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d5a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <_isatty>:

int _isatty(int file)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b083      	sub	sp, #12
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d72:	2301      	movs	r3, #1
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3714      	adds	r7, #20
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da4:	4a14      	ldr	r2, [pc, #80]	@ (8000df8 <_sbrk+0x5c>)
 8000da6:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <_sbrk+0x60>)
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db0:	4b13      	ldr	r3, [pc, #76]	@ (8000e00 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d102      	bne.n	8000dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db8:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <_sbrk+0x64>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	@ (8000e04 <_sbrk+0x68>)
 8000dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dbe:	4b10      	ldr	r3, [pc, #64]	@ (8000e00 <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d207      	bcs.n	8000ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dcc:	f004 ff90 	bl	8005cf0 <__errno>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dda:	e009      	b.n	8000df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ddc:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de2:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	4a05      	ldr	r2, [pc, #20]	@ (8000e00 <_sbrk+0x64>)
 8000dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dee:	68fb      	ldr	r3, [r7, #12]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	200c0000 	.word	0x200c0000
 8000dfc:	00000400 	.word	0x00000400
 8000e00:	20000164 	.word	0x20000164
 8000e04:	200002b8 	.word	0x200002b8

08000e08 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e0c:	4b18      	ldr	r3, [pc, #96]	@ (8000e70 <SystemInit+0x68>)
 8000e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e12:	4a17      	ldr	r2, [pc, #92]	@ (8000e70 <SystemInit+0x68>)
 8000e14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000e1c:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <SystemInit+0x6c>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000e22:	4b14      	ldr	r3, [pc, #80]	@ (8000e74 <SystemInit+0x6c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000e28:	4b12      	ldr	r3, [pc, #72]	@ (8000e74 <SystemInit+0x6c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000e2e:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <SystemInit+0x6c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000e34:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <SystemInit+0x6c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0e      	ldr	r2, [pc, #56]	@ (8000e74 <SystemInit+0x6c>)
 8000e3a:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000e3e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000e42:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000e44:	4b0b      	ldr	r3, [pc, #44]	@ (8000e74 <SystemInit+0x6c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e74 <SystemInit+0x6c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a09      	ldr	r2, [pc, #36]	@ (8000e74 <SystemInit+0x6c>)
 8000e50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e54:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000e56:	4b07      	ldr	r3, [pc, #28]	@ (8000e74 <SystemInit+0x6c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e5c:	4b04      	ldr	r3, [pc, #16]	@ (8000e70 <SystemInit+0x68>)
 8000e5e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e62:	609a      	str	r2, [r3, #8]
  #endif
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000ed00 	.word	0xe000ed00
 8000e74:	46020c00 	.word	0x46020c00

08000e78 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   sp, =_estack    /* set stack pointer */
 8000e78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000eb0 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e7c:	f7ff ffc4 	bl	8000e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e80:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e82:	e003      	b.n	8000e8c <LoopCopyDataInit>

08000e84 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e84:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e86:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e88:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e8a:	3104      	adds	r1, #4

08000e8c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e8c:	480a      	ldr	r0, [pc, #40]	@ (8000eb8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ebc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e90:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e92:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e94:	d3f6      	bcc.n	8000e84 <CopyDataInit>
	ldr	r2, =_sbss
 8000e96:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e98:	e002      	b.n	8000ea0 <LoopFillZerobss>

08000e9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e9a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e9c:	f842 3b04 	str.w	r3, [r2], #4

08000ea0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ea0:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <LoopForever+0x16>)
	cmp	r2, r3
 8000ea2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ea4:	d3f9      	bcc.n	8000e9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ea6:	f004 ff29 	bl	8005cfc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eaa:	f7ff f9e5 	bl	8000278 <main>

08000eae <LoopForever>:

LoopForever:
    b LoopForever
 8000eae:	e7fe      	b.n	8000eae <LoopForever>
Reset_Handler:  ldr   sp, =_estack    /* set stack pointer */
 8000eb0:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000eb4:	080068ec 	.word	0x080068ec
	ldr	r0, =_sdata
 8000eb8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ebc:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8000ec0:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8000ec4:	200002b8 	.word	0x200002b8

08000ec8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ec8:	e7fe      	b.n	8000ec8 <ADC1_IRQHandler>
	...

08000ecc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <HAL_Init+0x50>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a11      	ldr	r2, [pc, #68]	@ (8000f1c <HAL_Init+0x50>)
 8000ed6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000edc:	2003      	movs	r0, #3
 8000ede:	f000 f98c 	bl	80011fa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000ee2:	f002 fbb7 	bl	8003654 <HAL_RCC_GetSysClockFreq>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f20 <HAL_Init+0x54>)
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	f003 030f 	and.w	r3, r3, #15
 8000ef0:	490c      	ldr	r1, [pc, #48]	@ (8000f24 <HAL_Init+0x58>)
 8000ef2:	5ccb      	ldrb	r3, [r1, r3]
 8000ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef8:	4a0b      	ldr	r2, [pc, #44]	@ (8000f28 <HAL_Init+0x5c>)
 8000efa:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000efc:	2004      	movs	r0, #4
 8000efe:	f000 f9d1 	bl	80012a4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f02:	200f      	movs	r0, #15
 8000f04:	f000 f812 	bl	8000f2c <HAL_InitTick>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e002      	b.n	8000f18 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f12:	f7ff fdb3 	bl	8000a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f16:	2300      	movs	r3, #0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40022000 	.word	0x40022000
 8000f20:	46020c00 	.word	0x46020c00
 8000f24:	080067d0 	.word	0x080067d0
 8000f28:	20000000 	.word	0x20000000

08000f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000f38:	4b33      	ldr	r3, [pc, #204]	@ (8001008 <HAL_InitTick+0xdc>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d101      	bne.n	8000f44 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e05c      	b.n	8000ffe <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000f44:	4b31      	ldr	r3, [pc, #196]	@ (800100c <HAL_InitTick+0xe0>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 0304 	and.w	r3, r3, #4
 8000f4c:	2b04      	cmp	r3, #4
 8000f4e:	d10c      	bne.n	8000f6a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000f50:	4b2f      	ldr	r3, [pc, #188]	@ (8001010 <HAL_InitTick+0xe4>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b2c      	ldr	r3, [pc, #176]	@ (8001008 <HAL_InitTick+0xdc>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	e037      	b.n	8000fda <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000f6a:	f000 f9f3 	bl	8001354 <HAL_SYSTICK_GetCLKSourceConfig>
 8000f6e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d023      	beq.n	8000fbe <HAL_InitTick+0x92>
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d82d      	bhi.n	8000fd8 <HAL_InitTick+0xac>
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_InitTick+0x5e>
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d00d      	beq.n	8000fa4 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000f88:	e026      	b.n	8000fd8 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000f8a:	4b21      	ldr	r3, [pc, #132]	@ (8001010 <HAL_InitTick+0xe4>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001008 <HAL_InitTick+0xdc>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	4619      	mov	r1, r3
 8000f94:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000f98:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa0:	60fb      	str	r3, [r7, #12]
        break;
 8000fa2:	e01a      	b.n	8000fda <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000fa4:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <HAL_InitTick+0xdc>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fae:	fbb3 f3f2 	udiv	r3, r3, r2
 8000fb2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fba:	60fb      	str	r3, [r7, #12]
        break;
 8000fbc:	e00d      	b.n	8000fda <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000fbe:	4b12      	ldr	r3, [pc, #72]	@ (8001008 <HAL_InitTick+0xdc>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8000fcc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd4:	60fb      	str	r3, [r7, #12]
        break;
 8000fd6:	e000      	b.n	8000fda <HAL_InitTick+0xae>
        break;
 8000fd8:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f000 f940 	bl	8001260 <HAL_SYSTICK_Config>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e009      	b.n	8000ffe <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fea:	2200      	movs	r2, #0
 8000fec:	6879      	ldr	r1, [r7, #4]
 8000fee:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff2:	f000 f90d 	bl	8001210 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000ff6:	4a07      	ldr	r2, [pc, #28]	@ (8001014 <HAL_InitTick+0xe8>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000008 	.word	0x20000008
 800100c:	e000e010 	.word	0xe000e010
 8001010:	20000000 	.word	0x20000000
 8001014:	20000004 	.word	0x20000004

08001018 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <HAL_IncTick+0x20>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	4b06      	ldr	r3, [pc, #24]	@ (800103c <HAL_IncTick+0x24>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4413      	add	r3, r2
 8001028:	4a04      	ldr	r2, [pc, #16]	@ (800103c <HAL_IncTick+0x24>)
 800102a:	6013      	str	r3, [r2, #0]
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20000008 	.word	0x20000008
 800103c:	20000168 	.word	0x20000168

08001040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return uwTick;
 8001044:	4b03      	ldr	r3, [pc, #12]	@ (8001054 <HAL_GetTick+0x14>)
 8001046:	681b      	ldr	r3, [r3, #0]
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000168 	.word	0x20000168

08001058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001060:	f7ff ffee 	bl	8001040 <HAL_GetTick>
 8001064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001070:	d005      	beq.n	800107e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001072:	4b0a      	ldr	r3, [pc, #40]	@ (800109c <HAL_Delay+0x44>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	461a      	mov	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4413      	add	r3, r2
 800107c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800107e:	bf00      	nop
 8001080:	f7ff ffde 	bl	8001040 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	429a      	cmp	r2, r3
 800108e:	d8f7      	bhi.n	8001080 <HAL_Delay+0x28>
  {
  }
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000008 	.word	0x20000008

080010a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b0:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <__NVIC_SetPriorityGrouping+0x44>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b6:	68ba      	ldr	r2, [r7, #8]
 80010b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010bc:	4013      	ands	r3, r2
 80010be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d2:	4a04      	ldr	r2, [pc, #16]	@ (80010e4 <__NVIC_SetPriorityGrouping+0x44>)
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	60d3      	str	r3, [r2, #12]
}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010ec:	4b04      	ldr	r3, [pc, #16]	@ (8001100 <__NVIC_GetPriorityGrouping+0x18>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	0a1b      	lsrs	r3, r3, #8
 80010f2:	f003 0307 	and.w	r3, r3, #7
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	2b00      	cmp	r3, #0
 8001114:	db0b      	blt.n	800112e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	f003 021f 	and.w	r2, r3, #31
 800111c:	4907      	ldr	r1, [pc, #28]	@ (800113c <__NVIC_EnableIRQ+0x38>)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	095b      	lsrs	r3, r3, #5
 8001124:	2001      	movs	r0, #1
 8001126:	fa00 f202 	lsl.w	r2, r0, r2
 800112a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000e100 	.word	0xe000e100

08001140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	6039      	str	r1, [r7, #0]
 800114a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001150:	2b00      	cmp	r3, #0
 8001152:	db0a      	blt.n	800116a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	b2da      	uxtb	r2, r3
 8001158:	490c      	ldr	r1, [pc, #48]	@ (800118c <__NVIC_SetPriority+0x4c>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	0112      	lsls	r2, r2, #4
 8001160:	b2d2      	uxtb	r2, r2
 8001162:	440b      	add	r3, r1
 8001164:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001168:	e00a      	b.n	8001180 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4908      	ldr	r1, [pc, #32]	@ (8001190 <__NVIC_SetPriority+0x50>)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	f003 030f 	and.w	r3, r3, #15
 8001176:	3b04      	subs	r3, #4
 8001178:	0112      	lsls	r2, r2, #4
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	440b      	add	r3, r1
 800117e:	761a      	strb	r2, [r3, #24]
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000e100 	.word	0xe000e100
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001194:	b480      	push	{r7}
 8001196:	b089      	sub	sp, #36	@ 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f1c3 0307 	rsb	r3, r3, #7
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	bf28      	it	cs
 80011b2:	2304      	movcs	r3, #4
 80011b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3304      	adds	r3, #4
 80011ba:	2b06      	cmp	r3, #6
 80011bc:	d902      	bls.n	80011c4 <NVIC_EncodePriority+0x30>
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3b03      	subs	r3, #3
 80011c2:	e000      	b.n	80011c6 <NVIC_EncodePriority+0x32>
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	f04f 32ff 	mov.w	r2, #4294967295
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43da      	mvns	r2, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	401a      	ands	r2, r3
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011dc:	f04f 31ff 	mov.w	r1, #4294967295
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	fa01 f303 	lsl.w	r3, r1, r3
 80011e6:	43d9      	mvns	r1, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	4313      	orrs	r3, r2
         );
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3724      	adds	r7, #36	@ 0x24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff ff4c 	bl	80010a0 <__NVIC_SetPriorityGrouping>
}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
 800121c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800121e:	f7ff ff63 	bl	80010e8 <__NVIC_GetPriorityGrouping>
 8001222:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	68b9      	ldr	r1, [r7, #8]
 8001228:	6978      	ldr	r0, [r7, #20]
 800122a:	f7ff ffb3 	bl	8001194 <NVIC_EncodePriority>
 800122e:	4602      	mov	r2, r0
 8001230:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001234:	4611      	mov	r1, r2
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ff82 	bl	8001140 <__NVIC_SetPriority>
}
 800123c:	bf00      	nop
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff ff56 	bl	8001104 <__NVIC_EnableIRQ>
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3b01      	subs	r3, #1
 800126c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001270:	d301      	bcc.n	8001276 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001272:	2301      	movs	r3, #1
 8001274:	e00d      	b.n	8001292 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001276:	4a0a      	ldr	r2, [pc, #40]	@ (80012a0 <HAL_SYSTICK_Config+0x40>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3b01      	subs	r3, #1
 800127c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800127e:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <HAL_SYSTICK_Config+0x40>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001284:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <HAL_SYSTICK_Config+0x40>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a05      	ldr	r2, [pc, #20]	@ (80012a0 <HAL_SYSTICK_Config+0x40>)
 800128a:	f043 0303 	orr.w	r3, r3, #3
 800128e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000e010 	.word	0xe000e010

080012a4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	d844      	bhi.n	800133c <HAL_SYSTICK_CLKSourceConfig+0x98>
 80012b2:	a201      	add	r2, pc, #4	@ (adr r2, 80012b8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80012b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b8:	080012db 	.word	0x080012db
 80012bc:	080012f9 	.word	0x080012f9
 80012c0:	0800131b 	.word	0x0800131b
 80012c4:	0800133d 	.word	0x0800133d
 80012c8:	080012cd 	.word	0x080012cd
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80012cc:	4b1f      	ldr	r3, [pc, #124]	@ (800134c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a1e      	ldr	r2, [pc, #120]	@ (800134c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80012d2:	f043 0304 	orr.w	r3, r3, #4
 80012d6:	6013      	str	r3, [r2, #0]
      break;
 80012d8:	e031      	b.n	800133e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80012da:	4b1c      	ldr	r3, [pc, #112]	@ (800134c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a1b      	ldr	r2, [pc, #108]	@ (800134c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80012e0:	f023 0304 	bic.w	r3, r3, #4
 80012e4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80012e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ec:	4a18      	ldr	r2, [pc, #96]	@ (8001350 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80012ee:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80012f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80012f6:	e022      	b.n	800133e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80012f8:	4b14      	ldr	r3, [pc, #80]	@ (800134c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a13      	ldr	r2, [pc, #76]	@ (800134c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80012fe:	f023 0304 	bic.w	r3, r3, #4
 8001302:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001304:	4b12      	ldr	r3, [pc, #72]	@ (8001350 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800130e:	4a10      	ldr	r2, [pc, #64]	@ (8001350 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001310:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001314:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001318:	e011      	b.n	800133e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800131a:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a0b      	ldr	r2, [pc, #44]	@ (800134c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001320:	f023 0304 	bic.w	r3, r3, #4
 8001324:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001326:	4b0a      	ldr	r3, [pc, #40]	@ (8001350 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001330:	4a07      	ldr	r2, [pc, #28]	@ (8001350 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001332:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001336:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800133a:	e000      	b.n	800133e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800133c:	bf00      	nop
  }
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000e010 	.word	0xe000e010
 8001350:	46020c00 	.word	0x46020c00

08001354 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800135a:	4b19      	ldr	r3, [pc, #100]	@ (80013c0 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	2b00      	cmp	r3, #0
 8001364:	d002      	beq.n	800136c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001366:	2304      	movs	r3, #4
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	e021      	b.n	80013b0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 800136c:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800136e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001372:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001376:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800137e:	d011      	beq.n	80013a4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001386:	d810      	bhi.n	80013aa <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d004      	beq.n	8001398 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001394:	d003      	beq.n	800139e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001396:	e008      	b.n	80013aa <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001398:	2300      	movs	r3, #0
 800139a:	607b      	str	r3, [r7, #4]
        break;
 800139c:	e008      	b.n	80013b0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800139e:	2301      	movs	r3, #1
 80013a0:	607b      	str	r3, [r7, #4]
        break;
 80013a2:	e005      	b.n	80013b0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80013a4:	2302      	movs	r3, #2
 80013a6:	607b      	str	r3, [r7, #4]
        break;
 80013a8:	e002      	b.n	80013b0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
        break;
 80013ae:	bf00      	nop
    }
  }
  return systick_source;
 80013b0:	687b      	ldr	r3, [r7, #4]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000e010 	.word	0xe000e010
 80013c4:	46020c00 	.word	0x46020c00

080013c8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e142      	b.n	8001660 <HAL_FDCAN_Init+0x298>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d106      	bne.n	80013f4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff fb5e 	bl	8000ab0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	699a      	ldr	r2, [r3, #24]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 0210 	bic.w	r2, r2, #16
 8001402:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001404:	f7ff fe1c 	bl	8001040 <HAL_GetTick>
 8001408:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800140a:	e012      	b.n	8001432 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800140c:	f7ff fe18 	bl	8001040 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b0a      	cmp	r3, #10
 8001418:	d90b      	bls.n	8001432 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800141e:	f043 0201 	orr.w	r2, r3, #1
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2203      	movs	r2, #3
 800142a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e116      	b.n	8001660 <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	f003 0308 	and.w	r3, r3, #8
 800143c:	2b08      	cmp	r3, #8
 800143e:	d0e5      	beq.n	800140c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	699a      	ldr	r2, [r3, #24]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f042 0201 	orr.w	r2, r2, #1
 800144e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001450:	f7ff fdf6 	bl	8001040 <HAL_GetTick>
 8001454:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001456:	e012      	b.n	800147e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001458:	f7ff fdf2 	bl	8001040 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b0a      	cmp	r3, #10
 8001464:	d90b      	bls.n	800147e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800146a:	f043 0201 	orr.w	r2, r3, #1
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2203      	movs	r2, #3
 8001476:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e0f0      	b.n	8001660 <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0e5      	beq.n	8001458 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	699a      	ldr	r2, [r3, #24]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f042 0202 	orr.w	r2, r2, #2
 800149a:	619a      	str	r2, [r3, #24]

  /* Configure Clock divider */
  FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800149c:	4a72      	ldr	r2, [pc, #456]	@ (8001668 <HAL_FDCAN_Init+0x2a0>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	6013      	str	r3, [r2, #0]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	7c1b      	ldrb	r3, [r3, #16]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d108      	bne.n	80014be <HAL_FDCAN_Init+0xf6>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	699a      	ldr	r2, [r3, #24]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80014ba:	619a      	str	r2, [r3, #24]
 80014bc:	e007      	b.n	80014ce <HAL_FDCAN_Init+0x106>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	699a      	ldr	r2, [r3, #24]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80014cc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	7c5b      	ldrb	r3, [r3, #17]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d108      	bne.n	80014e8 <HAL_FDCAN_Init+0x120>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	699a      	ldr	r2, [r3, #24]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80014e4:	619a      	str	r2, [r3, #24]
 80014e6:	e007      	b.n	80014f8 <HAL_FDCAN_Init+0x130>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	699a      	ldr	r2, [r3, #24]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80014f6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	7c9b      	ldrb	r3, [r3, #18]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d108      	bne.n	8001512 <HAL_FDCAN_Init+0x14a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	699a      	ldr	r2, [r3, #24]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800150e:	619a      	str	r2, [r3, #24]
 8001510:	e007      	b.n	8001522 <HAL_FDCAN_Init+0x15a>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	699a      	ldr	r2, [r3, #24]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001520:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	430a      	orrs	r2, r1
 8001536:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	699a      	ldr	r2, [r3, #24]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001546:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	691a      	ldr	r2, [r3, #16]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0210 	bic.w	r2, r2, #16
 8001556:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d108      	bne.n	8001572 <HAL_FDCAN_Init+0x1aa>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	699a      	ldr	r2, [r3, #24]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f042 0204 	orr.w	r2, r2, #4
 800156e:	619a      	str	r2, [r3, #24]
 8001570:	e02c      	b.n	80015cc <HAL_FDCAN_Init+0x204>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d028      	beq.n	80015cc <HAL_FDCAN_Init+0x204>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d01c      	beq.n	80015bc <HAL_FDCAN_Init+0x1f4>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	699a      	ldr	r2, [r3, #24]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001590:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	691a      	ldr	r2, [r3, #16]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f042 0210 	orr.w	r2, r2, #16
 80015a0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d110      	bne.n	80015cc <HAL_FDCAN_Init+0x204>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	699a      	ldr	r2, [r3, #24]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f042 0220 	orr.w	r2, r2, #32
 80015b8:	619a      	str	r2, [r3, #24]
 80015ba:	e007      	b.n	80015cc <HAL_FDCAN_Init+0x204>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	699a      	ldr	r2, [r3, #24]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f042 0220 	orr.w	r2, r2, #32
 80015ca:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	3b01      	subs	r3, #1
 80015d2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69db      	ldr	r3, [r3, #28]
 80015d8:	3b01      	subs	r3, #1
 80015da:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015dc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a1b      	ldr	r3, [r3, #32]
 80015e2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80015e4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	3b01      	subs	r3, #1
 80015ee:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80015f4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015f6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001600:	d115      	bne.n	800162e <HAL_FDCAN_Init+0x266>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001606:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800160c:	3b01      	subs	r3, #1
 800160e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001610:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	3b01      	subs	r3, #1
 8001618:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800161a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001622:	3b01      	subs	r3, #1
 8001624:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800162a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800162c:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 fc1d 	bl	8001e84 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2201      	movs	r2, #1
 800165a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	4000a500 	.word	0x4000a500

0800166c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 800166c:	b480      	push	{r7}
 800166e:	b087      	sub	sp, #28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800167c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800167e:	7dfb      	ldrb	r3, [r7, #23]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d002      	beq.n	800168a <HAL_FDCAN_ConfigFilter+0x1e>
 8001684:	7dfb      	ldrb	r3, [r7, #23]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d13d      	bne.n	8001706 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d119      	bne.n	80016c6 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800169e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80016a6:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80016ac:	4313      	orrs	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	e01d      	b.n	8001702 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	075a      	lsls	r2, r3, #29
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	079a      	lsls	r2, r3, #30
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	4313      	orrs	r3, r2
 80016e0:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	4413      	add	r3, r2
 80016ee:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	3304      	adds	r3, #4
 80016fa:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	e006      	b.n	8001714 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800170a:	f043 0202 	orr.w	r2, r3, #2
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
  }
}
 8001714:	4618      	mov	r0, r3
 8001716:	371c      	adds	r7, #28
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b01      	cmp	r3, #1
 8001732:	d110      	bne.n	8001756 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2202      	movs	r2, #2
 8001738:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	699a      	ldr	r2, [r3, #24]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 0201 	bic.w	r2, r2, #1
 800174a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001752:	2300      	movs	r3, #0
 8001754:	e006      	b.n	8001764 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800175a:	f043 0204 	orr.w	r2, r3, #4
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
  }
}
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001770:	b480      	push	{r7}
 8001772:	b08b      	sub	sp, #44	@ 0x2c
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
 800177c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001788:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800178a:	7efb      	ldrb	r3, [r7, #27]
 800178c:	2b02      	cmp	r3, #2
 800178e:	f040 80e8 	bne.w	8001962 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	2b40      	cmp	r3, #64	@ 0x40
 8001796:	d137      	bne.n	8001808 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017a0:	f003 030f 	and.w	r3, r3, #15
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d107      	bne.n	80017b8 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0db      	b.n	8001970 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017c8:	d10a      	bne.n	80017e0 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017da:	d101      	bne.n	80017e0 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80017dc:	2301      	movs	r3, #1
 80017de:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	f003 0303 	and.w	r3, r3, #3
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	4413      	add	r3, r2
 80017f2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80017f8:	69fa      	ldr	r2, [r7, #28]
 80017fa:	4613      	mov	r3, r2
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	4413      	add	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	440b      	add	r3, r1
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
 8001806:	e036      	b.n	8001876 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001810:	f003 030f 	and.w	r3, r3, #15
 8001814:	2b00      	cmp	r3, #0
 8001816:	d107      	bne.n	8001828 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800181c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e0a3      	b.n	8001970 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001830:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001834:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001838:	d10a      	bne.n	8001850 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001846:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800184a:	d101      	bne.n	8001850 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800184c:	2301      	movs	r3, #1
 800184e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001858:	0a1b      	lsrs	r3, r3, #8
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	69fa      	ldr	r2, [r7, #28]
 8001860:	4413      	add	r3, r2
 8001862:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001868:	69fa      	ldr	r2, [r7, #28]
 800186a:	4613      	mov	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	440b      	add	r3, r1
 8001874:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d107      	bne.n	800189a <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800188a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	0c9b      	lsrs	r3, r3, #18
 8001890:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	e005      	b.n	80018a6 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800189a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80018a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80018b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80018be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c0:	3304      	adds	r3, #4
 80018c2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80018c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80018ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	0c1b      	lsrs	r3, r3, #16
 80018d4:	f003 020f 	and.w	r2, r3, #15
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80018dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80018e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80018f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	0e1b      	lsrs	r3, r3, #24
 80018fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	0fda      	lsrs	r2, r3, #31
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800190c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190e:	3304      	adds	r3, #4
 8001910:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001914:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001916:	2300      	movs	r3, #0
 8001918:	623b      	str	r3, [r7, #32]
 800191a:	e00a      	b.n	8001932 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	441a      	add	r2, r3
 8001922:	6839      	ldr	r1, [r7, #0]
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	440b      	add	r3, r1
 8001928:	7812      	ldrb	r2, [r2, #0]
 800192a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800192c:	6a3b      	ldr	r3, [r7, #32]
 800192e:	3301      	adds	r3, #1
 8001930:	623b      	str	r3, [r7, #32]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	4a11      	ldr	r2, [pc, #68]	@ (800197c <HAL_FDCAN_GetRxMessage+0x20c>)
 8001938:	5cd3      	ldrb	r3, [r2, r3]
 800193a:	461a      	mov	r2, r3
 800193c:	6a3b      	ldr	r3, [r7, #32]
 800193e:	4293      	cmp	r3, r2
 8001940:	d3ec      	bcc.n	800191c <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	2b40      	cmp	r3, #64	@ 0x40
 8001946:	d105      	bne.n	8001954 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	69fa      	ldr	r2, [r7, #28]
 800194e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001952:	e004      	b.n	800195e <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	69fa      	ldr	r2, [r7, #28]
 800195a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800195e:	2300      	movs	r3, #0
 8001960:	e006      	b.n	8001970 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001966:	f043 0208 	orr.w	r2, r3, #8
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
  }
}
 8001970:	4618      	mov	r0, r3
 8001972:	372c      	adds	r7, #44	@ 0x2c
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	08006820 	.word	0x08006820

08001980 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001980:	b480      	push	{r7}
 8001982:	b087      	sub	sp, #28
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001992:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001994:	7dfb      	ldrb	r3, [r7, #23]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d003      	beq.n	80019a2 <HAL_FDCAN_ActivateNotification+0x22>
 800199a:	7dfb      	ldrb	r3, [r7, #23]
 800199c:	2b02      	cmp	r3, #2
 800199e:	f040 80c8 	bne.w	8001b32 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a8:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d004      	beq.n	80019be <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d03b      	beq.n	8001a36 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d004      	beq.n	80019d2 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d031      	beq.n	8001a36 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d004      	beq.n	80019e6 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d027      	beq.n	8001a36 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d004      	beq.n	80019fa <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d01d      	beq.n	8001a36 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d004      	beq.n	8001a0e <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	f003 0310 	and.w	r3, r3, #16
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d013      	beq.n	8001a36 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d004      	beq.n	8001a22 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	f003 0320 	and.w	r3, r3, #32
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d009      	beq.n	8001a36 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d00c      	beq.n	8001a46 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d107      	bne.n	8001a46 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f042 0201 	orr.w	r2, r2, #1
 8001a44:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d004      	beq.n	8001a5a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d13b      	bne.n	8001ad2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d004      	beq.n	8001a6e <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d131      	bne.n	8001ad2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d004      	beq.n	8001a82 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	f003 0304 	and.w	r3, r3, #4
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d127      	bne.n	8001ad2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d004      	beq.n	8001a96 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d11d      	bne.n	8001ad2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d004      	beq.n	8001aaa <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	f003 0310 	and.w	r3, r3, #16
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d113      	bne.n	8001ad2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d004      	beq.n	8001abe <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	f003 0320 	and.w	r3, r3, #32
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d109      	bne.n	8001ad2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00c      	beq.n	8001ae2 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d007      	beq.n	8001ae2 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f042 0202 	orr.w	r2, r2, #2
 8001ae0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d009      	beq.n	8001b00 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d009      	beq.n	8001b1e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68ba      	ldr	r2, [r7, #8]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	e006      	b.n	8001b40 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b36:	f043 0202 	orr.w	r2, r3, #2
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
  }
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	371c      	adds	r7, #28
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08c      	sub	sp, #48	@ 0x30
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b5a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b68:	4013      	ands	r3, r2
 8001b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b80:	4013      	ands	r3, r2
 8001b82:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b98:	4013      	ands	r3, r2
 8001b9a:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ba2:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001ba6:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bae:	6a3a      	ldr	r2, [r7, #32]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bba:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001bbe:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bc6:	69fa      	ldr	r2, [r7, #28]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bd2:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bda:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	099b      	lsrs	r3, r3, #6
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d00c      	beq.n	8001c02 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	099b      	lsrs	r3, r3, #6
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d006      	beq.n	8001c02 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2240      	movs	r2, #64	@ 0x40
 8001bfa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f922 	bl	8001e46 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	0a1b      	lsrs	r3, r3, #8
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d01a      	beq.n	8001c44 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	0a1b      	lsrs	r3, r3, #8
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d014      	beq.n	8001c44 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001c22:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c3a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001c3c:	6939      	ldr	r1, [r7, #16]
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f8e2 	bl	8001e08 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d007      	beq.n	8001c5a <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c50:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001c52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f8ac 	bl	8001db2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d007      	beq.n	8001c70 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c66:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001c68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7fe fde0 	bl	8000830 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d007      	beq.n	8001c86 <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c7c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001c7e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f8a1 	bl	8001dc8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	0a5b      	lsrs	r3, r3, #9
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00d      	beq.n	8001cae <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	0a5b      	lsrs	r3, r3, #9
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d007      	beq.n	8001cae <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ca6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f898 	bl	8001dde <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	09db      	lsrs	r3, r3, #7
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d019      	beq.n	8001cee <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	09db      	lsrs	r3, r3, #7
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d013      	beq.n	8001cee <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001cce:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2280      	movs	r2, #128	@ 0x80
 8001ce4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001ce6:	68f9      	ldr	r1, [r7, #12]
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 f882 	bl	8001df2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	0b5b      	lsrs	r3, r3, #13
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00d      	beq.n	8001d16 <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	0b5b      	lsrs	r3, r3, #13
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d007      	beq.n	8001d16 <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d0e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f884 	bl	8001e1e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	0bdb      	lsrs	r3, r3, #15
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00d      	beq.n	8001d3e <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	0bdb      	lsrs	r3, r3, #15
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d007      	beq.n	8001d3e <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001d36:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f87a 	bl	8001e32 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	0b9b      	lsrs	r3, r3, #14
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d010      	beq.n	8001d6c <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	0b9b      	lsrs	r3, r3, #14
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00a      	beq.n	8001d6c <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d5e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d64:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d007      	beq.n	8001d82 <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	69fa      	ldr	r2, [r7, #28]
 8001d78:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001d7a:	69f9      	ldr	r1, [r7, #28]
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f876 	bl	8001e6e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001d82:	6a3b      	ldr	r3, [r7, #32]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d009      	beq.n	8001d9c <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6a3a      	ldr	r2, [r7, #32]
 8001d8e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d002      	beq.n	8001daa <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f858 	bl	8001e5a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001daa:	bf00      	nop
 8001dac:	3730      	adds	r7, #48	@ 0x30
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
 8001dba:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001e8c:	4b27      	ldr	r3, [pc, #156]	@ (8001f2c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001e8e:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e9e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ea6:	041a      	lsls	r2, r3, #16
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ec4:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ecc:	061a      	lsls	r2, r3, #24
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	e005      	b.n	8001f12 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	3304      	adds	r3, #4
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d3f3      	bcc.n	8001f06 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001f1e:	bf00      	nop
 8001f20:	bf00      	nop
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	4000ac00 	.word	0x4000ac00

08001f30 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b089      	sub	sp, #36	@ 0x24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001f42:	e1ba      	b.n	80022ba <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	2101      	movs	r1, #1
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f50:	4013      	ands	r3, r2
 8001f52:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 81aa 	beq.w	80022b4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a55      	ldr	r2, [pc, #340]	@ (80020b8 <HAL_GPIO_Init+0x188>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d15d      	bne.n	8002024 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001f6e:	2201      	movs	r2, #1
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43db      	mvns	r3, r3
 8001f78:	69fa      	ldr	r2, [r7, #28]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 0201 	and.w	r2, r3, #1
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	69fa      	ldr	r2, [r7, #28]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69fa      	ldr	r2, [r7, #28]
 8001f96:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001f98:	4a48      	ldr	r2, [pc, #288]	@ (80020bc <HAL_GPIO_Init+0x18c>)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001fa0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001fa2:	4a46      	ldr	r2, [pc, #280]	@ (80020bc <HAL_GPIO_Init+0x18c>)
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4413      	add	r3, r2
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	08da      	lsrs	r2, r3, #3
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	3208      	adds	r2, #8
 8001fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fba:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	220f      	movs	r2, #15
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	69fa      	ldr	r2, [r7, #28]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	220b      	movs	r2, #11
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	69fa      	ldr	r2, [r7, #28]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	08da      	lsrs	r2, r3, #3
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	3208      	adds	r2, #8
 8001fee:	69f9      	ldr	r1, [r7, #28]
 8001ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	2203      	movs	r2, #3
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	69fa      	ldr	r2, [r7, #28]
 8002008:	4013      	ands	r3, r2
 800200a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	2202      	movs	r2, #2
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	69fa      	ldr	r2, [r7, #28]
 8002018:	4313      	orrs	r3, r2
 800201a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	69fa      	ldr	r2, [r7, #28]
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	e067      	b.n	80020f4 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b02      	cmp	r3, #2
 800202a:	d003      	beq.n	8002034 <HAL_GPIO_Init+0x104>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b12      	cmp	r3, #18
 8002032:	d145      	bne.n	80020c0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	08da      	lsrs	r2, r3, #3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3208      	adds	r2, #8
 800203c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002040:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	220f      	movs	r2, #15
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	69fa      	ldr	r2, [r7, #28]
 8002054:	4013      	ands	r3, r2
 8002056:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	f003 020f 	and.w	r2, r3, #15
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	69fa      	ldr	r2, [r7, #28]
 800206e:	4313      	orrs	r3, r2
 8002070:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	08da      	lsrs	r2, r3, #3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3208      	adds	r2, #8
 800207a:	69f9      	ldr	r1, [r7, #28]
 800207c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	2203      	movs	r2, #3
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69fa      	ldr	r2, [r7, #28]
 8002094:	4013      	ands	r3, r2
 8002096:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0203 	and.w	r2, r3, #3
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	69fa      	ldr	r2, [r7, #28]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	69fa      	ldr	r2, [r7, #28]
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	e01e      	b.n	80020f4 <HAL_GPIO_Init+0x1c4>
 80020b6:	bf00      	nop
 80020b8:	46020000 	.word	0x46020000
 80020bc:	08006830 	.word	0x08006830
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	2203      	movs	r2, #3
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69fa      	ldr	r2, [r7, #28]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0203 	and.w	r2, r3, #3
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	69fa      	ldr	r2, [r7, #28]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	69fa      	ldr	r2, [r7, #28]
 80020f2:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d00b      	beq.n	8002114 <HAL_GPIO_Init+0x1e4>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d007      	beq.n	8002114 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002108:	2b11      	cmp	r3, #17
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b12      	cmp	r3, #18
 8002112:	d130      	bne.n	8002176 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	2203      	movs	r2, #3
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	69fa      	ldr	r2, [r7, #28]
 8002128:	4013      	ands	r3, r2
 800212a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	69fa      	ldr	r2, [r7, #28]
 800213a:	4313      	orrs	r3, r2
 800213c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	69fa      	ldr	r2, [r7, #28]
 8002142:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800214a:	2201      	movs	r2, #1
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	69fa      	ldr	r2, [r7, #28]
 8002156:	4013      	ands	r3, r2
 8002158:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	091b      	lsrs	r3, r3, #4
 8002160:	f003 0201 	and.w	r2, r3, #1
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	69fa      	ldr	r2, [r7, #28]
 800216c:	4313      	orrs	r3, r2
 800216e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	69fa      	ldr	r2, [r7, #28]
 8002174:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b03      	cmp	r3, #3
 800217c:	d017      	beq.n	80021ae <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	2203      	movs	r2, #3
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	69fa      	ldr	r2, [r7, #28]
 8002192:	4013      	ands	r3, r2
 8002194:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	69fa      	ldr	r2, [r7, #28]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	69fa      	ldr	r2, [r7, #28]
 80021ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d07c      	beq.n	80022b4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80021ba:	4a47      	ldr	r2, [pc, #284]	@ (80022d8 <HAL_GPIO_Init+0x3a8>)
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	089b      	lsrs	r3, r3, #2
 80021c0:	3318      	adds	r3, #24
 80021c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	220f      	movs	r2, #15
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43db      	mvns	r3, r3
 80021d8:	69fa      	ldr	r2, [r7, #28]
 80021da:	4013      	ands	r3, r2
 80021dc:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	0a9a      	lsrs	r2, r3, #10
 80021e2:	4b3e      	ldr	r3, [pc, #248]	@ (80022dc <HAL_GPIO_Init+0x3ac>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	f002 0203 	and.w	r2, r2, #3
 80021ec:	00d2      	lsls	r2, r2, #3
 80021ee:	4093      	lsls	r3, r2
 80021f0:	69fa      	ldr	r2, [r7, #28]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80021f6:	4938      	ldr	r1, [pc, #224]	@ (80022d8 <HAL_GPIO_Init+0x3a8>)
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	089b      	lsrs	r3, r3, #2
 80021fc:	3318      	adds	r3, #24
 80021fe:	69fa      	ldr	r2, [r7, #28]
 8002200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002204:	4b34      	ldr	r3, [pc, #208]	@ (80022d8 <HAL_GPIO_Init+0x3a8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	43db      	mvns	r3, r3
 800220e:	69fa      	ldr	r2, [r7, #28]
 8002210:	4013      	ands	r3, r2
 8002212:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002220:	69fa      	ldr	r2, [r7, #28]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4313      	orrs	r3, r2
 8002226:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002228:	4a2b      	ldr	r2, [pc, #172]	@ (80022d8 <HAL_GPIO_Init+0x3a8>)
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800222e:	4b2a      	ldr	r3, [pc, #168]	@ (80022d8 <HAL_GPIO_Init+0x3a8>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	43db      	mvns	r3, r3
 8002238:	69fa      	ldr	r2, [r7, #28]
 800223a:	4013      	ands	r3, r2
 800223c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800224a:	69fa      	ldr	r2, [r7, #28]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4313      	orrs	r3, r2
 8002250:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8002252:	4a21      	ldr	r2, [pc, #132]	@ (80022d8 <HAL_GPIO_Init+0x3a8>)
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002258:	4b1f      	ldr	r3, [pc, #124]	@ (80022d8 <HAL_GPIO_Init+0x3a8>)
 800225a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800225e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	43db      	mvns	r3, r3
 8002264:	69fa      	ldr	r2, [r7, #28]
 8002266:	4013      	ands	r3, r2
 8002268:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002276:	69fa      	ldr	r2, [r7, #28]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4313      	orrs	r3, r2
 800227c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800227e:	4a16      	ldr	r2, [pc, #88]	@ (80022d8 <HAL_GPIO_Init+0x3a8>)
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002286:	4b14      	ldr	r3, [pc, #80]	@ (80022d8 <HAL_GPIO_Init+0x3a8>)
 8002288:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800228c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	43db      	mvns	r3, r3
 8002292:	69fa      	ldr	r2, [r7, #28]
 8002294:	4013      	ands	r3, r2
 8002296:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80022a4:	69fa      	ldr	r2, [r7, #28]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80022ac:	4a0a      	ldr	r2, [pc, #40]	@ (80022d8 <HAL_GPIO_Init+0x3a8>)
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	3301      	adds	r3, #1
 80022b8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	fa22 f303 	lsr.w	r3, r2, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f47f ae3d 	bne.w	8001f44 <HAL_GPIO_Init+0x14>
  }
}
 80022ca:	bf00      	nop
 80022cc:	bf00      	nop
 80022ce:	3724      	adds	r7, #36	@ 0x24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	46022000 	.word	0x46022000
 80022dc:	002f7f7f 	.word	0x002f7f7f

080022e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	460b      	mov	r3, r1
 80022ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691a      	ldr	r2, [r3, #16]
 80022f0:	887b      	ldrh	r3, [r7, #2]
 80022f2:	4013      	ands	r3, r2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d002      	beq.n	80022fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022f8:	2301      	movs	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
 80022fc:	e001      	b.n	8002302 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022fe:	2300      	movs	r3, #0
 8002300:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8002302:	7bfb      	ldrb	r3, [r7, #15]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	460b      	mov	r3, r1
 800231a:	807b      	strh	r3, [r7, #2]
 800231c:	4613      	mov	r3, r2
 800231e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002320:	787b      	ldrb	r3, [r7, #1]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002326:	887a      	ldrh	r2, [r7, #2]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800232c:	e002      	b.n	8002334 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800232e:	887a      	ldrh	r2, [r7, #2]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002348:	2300      	movs	r3, #0
 800234a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800234c:	4b0b      	ldr	r3, [pc, #44]	@ (800237c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b00      	cmp	r3, #0
 8002356:	d002      	beq.n	800235e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	73fb      	strb	r3, [r7, #15]
 800235c:	e007      	b.n	800236e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800235e:	4b07      	ldr	r3, [pc, #28]	@ (800237c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f023 0204 	bic.w	r2, r3, #4
 8002366:	4905      	ldr	r1, [pc, #20]	@ (800237c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4313      	orrs	r3, r2
 800236c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800236e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	40030400 	.word	0x40030400

08002380 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002384:	4b05      	ldr	r3, [pc, #20]	@ (800239c <HAL_ICACHE_Enable+0x1c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a04      	ldr	r2, [pc, #16]	@ (800239c <HAL_ICACHE_Enable+0x1c>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	40030400 	.word	0x40030400

080023a0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80023a8:	4b39      	ldr	r3, [pc, #228]	@ (8002490 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80023aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023b0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d10b      	bne.n	80023d2 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023c0:	d905      	bls.n	80023ce <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80023c2:	4b33      	ldr	r3, [pc, #204]	@ (8002490 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	4a32      	ldr	r2, [pc, #200]	@ (8002490 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80023c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023cc:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80023ce:	2300      	movs	r3, #0
 80023d0:	e057      	b.n	8002482 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023d8:	d90a      	bls.n	80023f0 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80023da:	4b2d      	ldr	r3, [pc, #180]	@ (8002490 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	4a2a      	ldr	r2, [pc, #168]	@ (8002490 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80023e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023ec:	60d3      	str	r3, [r2, #12]
 80023ee:	e007      	b.n	8002400 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80023f0:	4b27      	ldr	r3, [pc, #156]	@ (8002490 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80023f8:	4925      	ldr	r1, [pc, #148]	@ (8002490 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002400:	4b24      	ldr	r3, [pc, #144]	@ (8002494 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a24      	ldr	r2, [pc, #144]	@ (8002498 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002406:	fba2 2303 	umull	r2, r3, r2, r3
 800240a:	099b      	lsrs	r3, r3, #6
 800240c:	2232      	movs	r2, #50	@ 0x32
 800240e:	fb02 f303 	mul.w	r3, r2, r3
 8002412:	4a21      	ldr	r2, [pc, #132]	@ (8002498 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002414:	fba2 2303 	umull	r2, r3, r2, r3
 8002418:	099b      	lsrs	r3, r3, #6
 800241a:	3301      	adds	r3, #1
 800241c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800241e:	e002      	b.n	8002426 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	3b01      	subs	r3, #1
 8002424:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002426:	4b1a      	ldr	r3, [pc, #104]	@ (8002490 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d102      	bne.n	8002438 <HAL_PWREx_ControlVoltageScaling+0x98>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1f3      	bne.n	8002420 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d01b      	beq.n	8002476 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800243e:	4b15      	ldr	r3, [pc, #84]	@ (8002494 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a15      	ldr	r2, [pc, #84]	@ (8002498 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002444:	fba2 2303 	umull	r2, r3, r2, r3
 8002448:	099b      	lsrs	r3, r3, #6
 800244a:	2232      	movs	r2, #50	@ 0x32
 800244c:	fb02 f303 	mul.w	r3, r2, r3
 8002450:	4a11      	ldr	r2, [pc, #68]	@ (8002498 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	099b      	lsrs	r3, r3, #6
 8002458:	3301      	adds	r3, #1
 800245a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800245c:	e002      	b.n	8002464 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	3b01      	subs	r3, #1
 8002462:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002464:	4b0a      	ldr	r3, [pc, #40]	@ (8002490 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002468:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d102      	bne.n	8002476 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f3      	bne.n	800245e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e000      	b.n	8002482 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	46020800 	.word	0x46020800
 8002494:	20000000 	.word	0x20000000
 8002498:	10624dd3 	.word	0x10624dd3

0800249c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80024a0:	4b04      	ldr	r3, [pc, #16]	@ (80024b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80024a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	46020800 	.word	0x46020800

080024b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08e      	sub	sp, #56	@ 0x38
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d102      	bne.n	80024d2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	f000 bec8 	b.w	8003262 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024d2:	4b99      	ldr	r3, [pc, #612]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024dc:	4b96      	ldr	r3, [pc, #600]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 80024de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0310 	and.w	r3, r3, #16
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 816c 	beq.w	80027cc <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80024f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d007      	beq.n	800250a <HAL_RCC_OscConfig+0x52>
 80024fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024fc:	2b0c      	cmp	r3, #12
 80024fe:	f040 80de 	bne.w	80026be <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002504:	2b01      	cmp	r3, #1
 8002506:	f040 80da 	bne.w	80026be <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d102      	bne.n	8002518 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	f000 bea5 	b.w	8003262 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800251c:	4b86      	ldr	r3, [pc, #536]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d004      	beq.n	8002532 <HAL_RCC_OscConfig+0x7a>
 8002528:	4b83      	ldr	r3, [pc, #524]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002530:	e005      	b.n	800253e <HAL_RCC_OscConfig+0x86>
 8002532:	4b81      	ldr	r3, [pc, #516]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 8002534:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002538:	041b      	lsls	r3, r3, #16
 800253a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800253e:	4293      	cmp	r3, r2
 8002540:	d255      	bcs.n	80025ee <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10a      	bne.n	800255e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254c:	4618      	mov	r0, r3
 800254e:	f001 f9a1 	bl	8003894 <RCC_SetFlashLatencyFromMSIRange>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d002      	beq.n	800255e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	f000 be82 	b.w	8003262 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800255e:	4b76      	ldr	r3, [pc, #472]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	4a75      	ldr	r2, [pc, #468]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 8002564:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002568:	6093      	str	r3, [r2, #8]
 800256a:	4b73      	ldr	r3, [pc, #460]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002576:	4970      	ldr	r1, [pc, #448]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 8002578:	4313      	orrs	r3, r2
 800257a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002580:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002584:	d309      	bcc.n	800259a <HAL_RCC_OscConfig+0xe2>
 8002586:	4b6c      	ldr	r3, [pc, #432]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f023 021f 	bic.w	r2, r3, #31
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	4969      	ldr	r1, [pc, #420]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 8002594:	4313      	orrs	r3, r2
 8002596:	60cb      	str	r3, [r1, #12]
 8002598:	e07e      	b.n	8002698 <HAL_RCC_OscConfig+0x1e0>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259e:	2b00      	cmp	r3, #0
 80025a0:	da0a      	bge.n	80025b8 <HAL_RCC_OscConfig+0x100>
 80025a2:	4b65      	ldr	r3, [pc, #404]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	015b      	lsls	r3, r3, #5
 80025b0:	4961      	ldr	r1, [pc, #388]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	60cb      	str	r3, [r1, #12]
 80025b6:	e06f      	b.n	8002698 <HAL_RCC_OscConfig+0x1e0>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025c0:	d30a      	bcc.n	80025d8 <HAL_RCC_OscConfig+0x120>
 80025c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	029b      	lsls	r3, r3, #10
 80025d0:	4959      	ldr	r1, [pc, #356]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	60cb      	str	r3, [r1, #12]
 80025d6:	e05f      	b.n	8002698 <HAL_RCC_OscConfig+0x1e0>
 80025d8:	4b57      	ldr	r3, [pc, #348]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	03db      	lsls	r3, r3, #15
 80025e6:	4954      	ldr	r1, [pc, #336]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	60cb      	str	r3, [r1, #12]
 80025ec:	e054      	b.n	8002698 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80025ee:	4b52      	ldr	r3, [pc, #328]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	4a51      	ldr	r2, [pc, #324]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 80025f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80025f8:	6093      	str	r3, [r2, #8]
 80025fa:	4b4f      	ldr	r3, [pc, #316]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002606:	494c      	ldr	r1, [pc, #304]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 8002608:	4313      	orrs	r3, r2
 800260a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002610:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002614:	d309      	bcc.n	800262a <HAL_RCC_OscConfig+0x172>
 8002616:	4b48      	ldr	r3, [pc, #288]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f023 021f 	bic.w	r2, r3, #31
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	4945      	ldr	r1, [pc, #276]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 8002624:	4313      	orrs	r3, r2
 8002626:	60cb      	str	r3, [r1, #12]
 8002628:	e028      	b.n	800267c <HAL_RCC_OscConfig+0x1c4>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262e:	2b00      	cmp	r3, #0
 8002630:	da0a      	bge.n	8002648 <HAL_RCC_OscConfig+0x190>
 8002632:	4b41      	ldr	r3, [pc, #260]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	015b      	lsls	r3, r3, #5
 8002640:	493d      	ldr	r1, [pc, #244]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 8002642:	4313      	orrs	r3, r2
 8002644:	60cb      	str	r3, [r1, #12]
 8002646:	e019      	b.n	800267c <HAL_RCC_OscConfig+0x1c4>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002650:	d30a      	bcc.n	8002668 <HAL_RCC_OscConfig+0x1b0>
 8002652:	4b39      	ldr	r3, [pc, #228]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	029b      	lsls	r3, r3, #10
 8002660:	4935      	ldr	r1, [pc, #212]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 8002662:	4313      	orrs	r3, r2
 8002664:	60cb      	str	r3, [r1, #12]
 8002666:	e009      	b.n	800267c <HAL_RCC_OscConfig+0x1c4>
 8002668:	4b33      	ldr	r3, [pc, #204]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	03db      	lsls	r3, r3, #15
 8002676:	4930      	ldr	r1, [pc, #192]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 8002678:	4313      	orrs	r3, r2
 800267a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800267c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10a      	bne.n	8002698 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002686:	4618      	mov	r0, r3
 8002688:	f001 f904 	bl	8003894 <RCC_SetFlashLatencyFromMSIRange>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d002      	beq.n	8002698 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	f000 bde5 	b.w	8003262 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8002698:	f001 f8e2 	bl	8003860 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800269c:	4b27      	ldr	r3, [pc, #156]	@ (800273c <HAL_RCC_OscConfig+0x284>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fe fc43 	bl	8000f2c <HAL_InitTick>
 80026a6:	4603      	mov	r3, r0
 80026a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80026ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 808a 	beq.w	80027ca <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80026b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80026ba:	f000 bdd2 	b.w	8003262 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d066      	beq.n	8002794 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80026c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a1b      	ldr	r2, [pc, #108]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80026d2:	f7fe fcb5 	bl	8001040 <HAL_GetTick>
 80026d6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80026d8:	e009      	b.n	80026ee <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026da:	f7fe fcb1 	bl	8001040 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d902      	bls.n	80026ee <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	f000 bdba 	b.w	8003262 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80026ee:	4b12      	ldr	r3, [pc, #72]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0304 	and.w	r3, r3, #4
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0ef      	beq.n	80026da <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80026fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	4a0e      	ldr	r2, [pc, #56]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 8002700:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002704:	6093      	str	r3, [r2, #8]
 8002706:	4b0c      	ldr	r3, [pc, #48]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002712:	4909      	ldr	r1, [pc, #36]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 8002714:	4313      	orrs	r3, r2
 8002716:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002720:	d30e      	bcc.n	8002740 <HAL_RCC_OscConfig+0x288>
 8002722:	4b05      	ldr	r3, [pc, #20]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f023 021f 	bic.w	r2, r3, #31
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	4902      	ldr	r1, [pc, #8]	@ (8002738 <HAL_RCC_OscConfig+0x280>)
 8002730:	4313      	orrs	r3, r2
 8002732:	60cb      	str	r3, [r1, #12]
 8002734:	e04a      	b.n	80027cc <HAL_RCC_OscConfig+0x314>
 8002736:	bf00      	nop
 8002738:	46020c00 	.word	0x46020c00
 800273c:	20000004 	.word	0x20000004
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002744:	2b00      	cmp	r3, #0
 8002746:	da0a      	bge.n	800275e <HAL_RCC_OscConfig+0x2a6>
 8002748:	4b98      	ldr	r3, [pc, #608]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	015b      	lsls	r3, r3, #5
 8002756:	4995      	ldr	r1, [pc, #596]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 8002758:	4313      	orrs	r3, r2
 800275a:	60cb      	str	r3, [r1, #12]
 800275c:	e036      	b.n	80027cc <HAL_RCC_OscConfig+0x314>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002766:	d30a      	bcc.n	800277e <HAL_RCC_OscConfig+0x2c6>
 8002768:	4b90      	ldr	r3, [pc, #576]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	029b      	lsls	r3, r3, #10
 8002776:	498d      	ldr	r1, [pc, #564]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 8002778:	4313      	orrs	r3, r2
 800277a:	60cb      	str	r3, [r1, #12]
 800277c:	e026      	b.n	80027cc <HAL_RCC_OscConfig+0x314>
 800277e:	4b8b      	ldr	r3, [pc, #556]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	03db      	lsls	r3, r3, #15
 800278c:	4987      	ldr	r1, [pc, #540]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 800278e:	4313      	orrs	r3, r2
 8002790:	60cb      	str	r3, [r1, #12]
 8002792:	e01b      	b.n	80027cc <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002794:	4b85      	ldr	r3, [pc, #532]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a84      	ldr	r2, [pc, #528]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 800279a:	f023 0301 	bic.w	r3, r3, #1
 800279e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80027a0:	f7fe fc4e 	bl	8001040 <HAL_GetTick>
 80027a4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80027a6:	e009      	b.n	80027bc <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027a8:	f7fe fc4a 	bl	8001040 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d902      	bls.n	80027bc <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	f000 bd53 	b.w	8003262 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80027bc:	4b7b      	ldr	r3, [pc, #492]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1ef      	bne.n	80027a8 <HAL_RCC_OscConfig+0x2f0>
 80027c8:	e000      	b.n	80027cc <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80027ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 808b 	beq.w	80028f0 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80027da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d005      	beq.n	80027ec <HAL_RCC_OscConfig+0x334>
 80027e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e2:	2b0c      	cmp	r3, #12
 80027e4:	d109      	bne.n	80027fa <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d106      	bne.n	80027fa <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d17d      	bne.n	80028f0 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	f000 bd34 	b.w	8003262 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002802:	d106      	bne.n	8002812 <HAL_RCC_OscConfig+0x35a>
 8002804:	4b69      	ldr	r3, [pc, #420]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a68      	ldr	r2, [pc, #416]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 800280a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	e041      	b.n	8002896 <HAL_RCC_OscConfig+0x3de>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800281a:	d112      	bne.n	8002842 <HAL_RCC_OscConfig+0x38a>
 800281c:	4b63      	ldr	r3, [pc, #396]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a62      	ldr	r2, [pc, #392]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 8002822:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002826:	6013      	str	r3, [r2, #0]
 8002828:	4b60      	ldr	r3, [pc, #384]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a5f      	ldr	r2, [pc, #380]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 800282e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002832:	6013      	str	r3, [r2, #0]
 8002834:	4b5d      	ldr	r3, [pc, #372]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a5c      	ldr	r2, [pc, #368]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 800283a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800283e:	6013      	str	r3, [r2, #0]
 8002840:	e029      	b.n	8002896 <HAL_RCC_OscConfig+0x3de>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800284a:	d112      	bne.n	8002872 <HAL_RCC_OscConfig+0x3ba>
 800284c:	4b57      	ldr	r3, [pc, #348]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a56      	ldr	r2, [pc, #344]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 8002852:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	4b54      	ldr	r3, [pc, #336]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a53      	ldr	r2, [pc, #332]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 800285e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	4b51      	ldr	r3, [pc, #324]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a50      	ldr	r2, [pc, #320]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 800286a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	e011      	b.n	8002896 <HAL_RCC_OscConfig+0x3de>
 8002872:	4b4e      	ldr	r3, [pc, #312]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a4d      	ldr	r2, [pc, #308]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 8002878:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	4b4b      	ldr	r3, [pc, #300]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a4a      	ldr	r2, [pc, #296]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 8002884:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	4b48      	ldr	r3, [pc, #288]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a47      	ldr	r2, [pc, #284]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 8002890:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002894:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d014      	beq.n	80028c8 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800289e:	f7fe fbcf 	bl	8001040 <HAL_GetTick>
 80028a2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028a4:	e009      	b.n	80028ba <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a6:	f7fe fbcb 	bl	8001040 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b64      	cmp	r3, #100	@ 0x64
 80028b2:	d902      	bls.n	80028ba <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	f000 bcd4 	b.w	8003262 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ba:	4b3c      	ldr	r3, [pc, #240]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0ef      	beq.n	80028a6 <HAL_RCC_OscConfig+0x3ee>
 80028c6:	e013      	b.n	80028f0 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80028c8:	f7fe fbba 	bl	8001040 <HAL_GetTick>
 80028cc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ce:	e009      	b.n	80028e4 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028d0:	f7fe fbb6 	bl	8001040 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b64      	cmp	r3, #100	@ 0x64
 80028dc:	d902      	bls.n	80028e4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	f000 bcbf 	b.w	8003262 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028e4:	4b31      	ldr	r3, [pc, #196]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1ef      	bne.n	80028d0 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d05f      	beq.n	80029bc <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80028fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d005      	beq.n	800290e <HAL_RCC_OscConfig+0x456>
 8002902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002904:	2b0c      	cmp	r3, #12
 8002906:	d114      	bne.n	8002932 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800290a:	2b02      	cmp	r3, #2
 800290c:	d111      	bne.n	8002932 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d102      	bne.n	800291c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	f000 bca3 	b.w	8003262 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800291c:	4b23      	ldr	r3, [pc, #140]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	041b      	lsls	r3, r3, #16
 800292a:	4920      	ldr	r1, [pc, #128]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 800292c:	4313      	orrs	r3, r2
 800292e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002930:	e044      	b.n	80029bc <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d024      	beq.n	8002984 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800293a:	4b1c      	ldr	r3, [pc, #112]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a1b      	ldr	r2, [pc, #108]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 8002940:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002944:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002946:	f7fe fb7b 	bl	8001040 <HAL_GetTick>
 800294a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800294c:	e009      	b.n	8002962 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800294e:	f7fe fb77 	bl	8001040 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d902      	bls.n	8002962 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	f000 bc80 	b.w	8003262 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002962:	4b12      	ldr	r3, [pc, #72]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0ef      	beq.n	800294e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800296e:	4b0f      	ldr	r3, [pc, #60]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	041b      	lsls	r3, r3, #16
 800297c:	490b      	ldr	r1, [pc, #44]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 800297e:	4313      	orrs	r3, r2
 8002980:	610b      	str	r3, [r1, #16]
 8002982:	e01b      	b.n	80029bc <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8002984:	4b09      	ldr	r3, [pc, #36]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a08      	ldr	r2, [pc, #32]	@ (80029ac <HAL_RCC_OscConfig+0x4f4>)
 800298a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800298e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002990:	f7fe fb56 	bl	8001040 <HAL_GetTick>
 8002994:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002996:	e00b      	b.n	80029b0 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002998:	f7fe fb52 	bl	8001040 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d904      	bls.n	80029b0 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	f000 bc5b 	b.w	8003262 <HAL_RCC_OscConfig+0xdaa>
 80029ac:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029b0:	4baf      	ldr	r3, [pc, #700]	@ (8002c70 <HAL_RCC_OscConfig+0x7b8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1ed      	bne.n	8002998 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 80c8 	beq.w	8002b5a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80029ca:	2300      	movs	r3, #0
 80029cc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d0:	4ba7      	ldr	r3, [pc, #668]	@ (8002c70 <HAL_RCC_OscConfig+0x7b8>)
 80029d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d111      	bne.n	8002a02 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029de:	4ba4      	ldr	r3, [pc, #656]	@ (8002c70 <HAL_RCC_OscConfig+0x7b8>)
 80029e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029e4:	4aa2      	ldr	r2, [pc, #648]	@ (8002c70 <HAL_RCC_OscConfig+0x7b8>)
 80029e6:	f043 0304 	orr.w	r3, r3, #4
 80029ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80029ee:	4ba0      	ldr	r3, [pc, #640]	@ (8002c70 <HAL_RCC_OscConfig+0x7b8>)
 80029f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	617b      	str	r3, [r7, #20]
 80029fa:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80029fc:	2301      	movs	r3, #1
 80029fe:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002a02:	4b9c      	ldr	r3, [pc, #624]	@ (8002c74 <HAL_RCC_OscConfig+0x7bc>)
 8002a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d119      	bne.n	8002a42 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002a0e:	4b99      	ldr	r3, [pc, #612]	@ (8002c74 <HAL_RCC_OscConfig+0x7bc>)
 8002a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a12:	4a98      	ldr	r2, [pc, #608]	@ (8002c74 <HAL_RCC_OscConfig+0x7bc>)
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a1a:	f7fe fb11 	bl	8001040 <HAL_GetTick>
 8002a1e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002a20:	e009      	b.n	8002a36 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a22:	f7fe fb0d 	bl	8001040 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d902      	bls.n	8002a36 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	f000 bc16 	b.w	8003262 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002a36:	4b8f      	ldr	r3, [pc, #572]	@ (8002c74 <HAL_RCC_OscConfig+0x7bc>)
 8002a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0ef      	beq.n	8002a22 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d05f      	beq.n	8002b0a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8002a4a:	4b89      	ldr	r3, [pc, #548]	@ (8002c70 <HAL_RCC_OscConfig+0x7b8>)
 8002a4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a50:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699a      	ldr	r2, [r3, #24]
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d037      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002a60:	6a3b      	ldr	r3, [r7, #32]
 8002a62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d006      	beq.n	8002a78 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e3f4      	b.n	8003262 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d01b      	beq.n	8002aba <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8002a82:	4b7b      	ldr	r3, [pc, #492]	@ (8002c70 <HAL_RCC_OscConfig+0x7b8>)
 8002a84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a88:	4a79      	ldr	r2, [pc, #484]	@ (8002c70 <HAL_RCC_OscConfig+0x7b8>)
 8002a8a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8002a8e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8002a92:	f7fe fad5 	bl	8001040 <HAL_GetTick>
 8002a96:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a9a:	f7fe fad1 	bl	8001040 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b05      	cmp	r3, #5
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e3da      	b.n	8003262 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002aac:	4b70      	ldr	r3, [pc, #448]	@ (8002c70 <HAL_RCC_OscConfig+0x7b8>)
 8002aae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ab2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1ef      	bne.n	8002a9a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8002aba:	4b6d      	ldr	r3, [pc, #436]	@ (8002c70 <HAL_RCC_OscConfig+0x7b8>)
 8002abc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ac0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	4969      	ldr	r1, [pc, #420]	@ (8002c70 <HAL_RCC_OscConfig+0x7b8>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8002ad0:	4b67      	ldr	r3, [pc, #412]	@ (8002c70 <HAL_RCC_OscConfig+0x7b8>)
 8002ad2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ad6:	4a66      	ldr	r2, [pc, #408]	@ (8002c70 <HAL_RCC_OscConfig+0x7b8>)
 8002ad8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002adc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8002ae0:	f7fe faae 	bl	8001040 <HAL_GetTick>
 8002ae4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae8:	f7fe faaa 	bl	8001040 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b05      	cmp	r3, #5
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e3b3      	b.n	8003262 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002afa:	4b5d      	ldr	r3, [pc, #372]	@ (8002c70 <HAL_RCC_OscConfig+0x7b8>)
 8002afc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0ef      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x630>
 8002b08:	e01b      	b.n	8002b42 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8002b0a:	4b59      	ldr	r3, [pc, #356]	@ (8002c70 <HAL_RCC_OscConfig+0x7b8>)
 8002b0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b10:	4a57      	ldr	r2, [pc, #348]	@ (8002c70 <HAL_RCC_OscConfig+0x7b8>)
 8002b12:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8002b16:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8002b1a:	f7fe fa91 	bl	8001040 <HAL_GetTick>
 8002b1e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b22:	f7fe fa8d 	bl	8001040 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b05      	cmp	r3, #5
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e396      	b.n	8003262 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002b34:	4b4e      	ldr	r3, [pc, #312]	@ (8002c70 <HAL_RCC_OscConfig+0x7b8>)
 8002b36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1ef      	bne.n	8002b22 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b42:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d107      	bne.n	8002b5a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b4a:	4b49      	ldr	r3, [pc, #292]	@ (8002c70 <HAL_RCC_OscConfig+0x7b8>)
 8002b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b50:	4a47      	ldr	r2, [pc, #284]	@ (8002c70 <HAL_RCC_OscConfig+0x7b8>)
 8002b52:	f023 0304 	bic.w	r3, r3, #4
 8002b56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f000 8111 	beq.w	8002d8a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b6e:	4b40      	ldr	r3, [pc, #256]	@ (8002c70 <HAL_RCC_OscConfig+0x7b8>)
 8002b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d111      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b7c:	4b3c      	ldr	r3, [pc, #240]	@ (8002c70 <HAL_RCC_OscConfig+0x7b8>)
 8002b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b82:	4a3b      	ldr	r2, [pc, #236]	@ (8002c70 <HAL_RCC_OscConfig+0x7b8>)
 8002b84:	f043 0304 	orr.w	r3, r3, #4
 8002b88:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002b8c:	4b38      	ldr	r3, [pc, #224]	@ (8002c70 <HAL_RCC_OscConfig+0x7b8>)
 8002b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b92:	f003 0304 	and.w	r3, r3, #4
 8002b96:	613b      	str	r3, [r7, #16]
 8002b98:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002ba0:	4b34      	ldr	r3, [pc, #208]	@ (8002c74 <HAL_RCC_OscConfig+0x7bc>)
 8002ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d118      	bne.n	8002bde <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002bac:	4b31      	ldr	r3, [pc, #196]	@ (8002c74 <HAL_RCC_OscConfig+0x7bc>)
 8002bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb0:	4a30      	ldr	r2, [pc, #192]	@ (8002c74 <HAL_RCC_OscConfig+0x7bc>)
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bb8:	f7fe fa42 	bl	8001040 <HAL_GetTick>
 8002bbc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc0:	f7fe fa3e 	bl	8001040 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e347      	b.n	8003262 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002bd2:	4b28      	ldr	r3, [pc, #160]	@ (8002c74 <HAL_RCC_OscConfig+0x7bc>)
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d01f      	beq.n	8002c2a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d010      	beq.n	8002c18 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c70 <HAL_RCC_OscConfig+0x7b8>)
 8002bf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bfc:	4a1c      	ldr	r2, [pc, #112]	@ (8002c70 <HAL_RCC_OscConfig+0x7b8>)
 8002bfe:	f043 0304 	orr.w	r3, r3, #4
 8002c02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c06:	4b1a      	ldr	r3, [pc, #104]	@ (8002c70 <HAL_RCC_OscConfig+0x7b8>)
 8002c08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c0c:	4a18      	ldr	r2, [pc, #96]	@ (8002c70 <HAL_RCC_OscConfig+0x7b8>)
 8002c0e:	f043 0301 	orr.w	r3, r3, #1
 8002c12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002c16:	e018      	b.n	8002c4a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c18:	4b15      	ldr	r3, [pc, #84]	@ (8002c70 <HAL_RCC_OscConfig+0x7b8>)
 8002c1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c1e:	4a14      	ldr	r2, [pc, #80]	@ (8002c70 <HAL_RCC_OscConfig+0x7b8>)
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002c28:	e00f      	b.n	8002c4a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c2a:	4b11      	ldr	r3, [pc, #68]	@ (8002c70 <HAL_RCC_OscConfig+0x7b8>)
 8002c2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c30:	4a0f      	ldr	r2, [pc, #60]	@ (8002c70 <HAL_RCC_OscConfig+0x7b8>)
 8002c32:	f023 0301 	bic.w	r3, r3, #1
 8002c36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c70 <HAL_RCC_OscConfig+0x7b8>)
 8002c3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c40:	4a0b      	ldr	r2, [pc, #44]	@ (8002c70 <HAL_RCC_OscConfig+0x7b8>)
 8002c42:	f023 0304 	bic.w	r3, r3, #4
 8002c46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d057      	beq.n	8002d02 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002c52:	f7fe f9f5 	bl	8001040 <HAL_GetTick>
 8002c56:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c58:	e00e      	b.n	8002c78 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c5a:	f7fe f9f1 	bl	8001040 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d905      	bls.n	8002c78 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e2f8      	b.n	8003262 <HAL_RCC_OscConfig+0xdaa>
 8002c70:	46020c00 	.word	0x46020c00
 8002c74:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c78:	4b9c      	ldr	r3, [pc, #624]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002c7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0e9      	beq.n	8002c5a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d01b      	beq.n	8002cca <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002c92:	4b96      	ldr	r3, [pc, #600]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002c94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c98:	4a94      	ldr	r2, [pc, #592]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002c9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c9e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002ca2:	e00a      	b.n	8002cba <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca4:	f7fe f9cc 	bl	8001040 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e2d3      	b.n	8003262 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002cba:	4b8c      	ldr	r3, [pc, #560]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002cbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002cc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0ed      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x7ec>
 8002cc8:	e053      	b.n	8002d72 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002cca:	4b88      	ldr	r3, [pc, #544]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002ccc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002cd0:	4a86      	ldr	r2, [pc, #536]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002cd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002cd6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002cda:	e00a      	b.n	8002cf2 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cdc:	f7fe f9b0 	bl	8001040 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e2b7      	b.n	8003262 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002cf2:	4b7e      	ldr	r3, [pc, #504]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002cf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002cf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1ed      	bne.n	8002cdc <HAL_RCC_OscConfig+0x824>
 8002d00:	e037      	b.n	8002d72 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002d02:	f7fe f99d 	bl	8001040 <HAL_GetTick>
 8002d06:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d08:	e00a      	b.n	8002d20 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0a:	f7fe f999 	bl	8001040 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e2a0      	b.n	8003262 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d20:	4b72      	ldr	r3, [pc, #456]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002d22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1ed      	bne.n	8002d0a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002d2e:	4b6f      	ldr	r3, [pc, #444]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002d30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d01a      	beq.n	8002d72 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002d3c:	4b6b      	ldr	r3, [pc, #428]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002d3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d42:	4a6a      	ldr	r2, [pc, #424]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002d44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d48:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002d4c:	e00a      	b.n	8002d64 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d4e:	f7fe f977 	bl	8001040 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e27e      	b.n	8003262 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002d64:	4b61      	ldr	r3, [pc, #388]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002d66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1ed      	bne.n	8002d4e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d72:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d107      	bne.n	8002d8a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d7a:	4b5c      	ldr	r3, [pc, #368]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d80:	4a5a      	ldr	r2, [pc, #360]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002d82:	f023 0304 	bic.w	r3, r3, #4
 8002d86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d036      	beq.n	8002e04 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d019      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002d9e:	4b53      	ldr	r3, [pc, #332]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a52      	ldr	r2, [pc, #328]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002da4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002da8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002daa:	f7fe f949 	bl	8001040 <HAL_GetTick>
 8002dae:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002db2:	f7fe f945 	bl	8001040 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e24e      	b.n	8003262 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002dc4:	4b49      	ldr	r3, [pc, #292]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0f0      	beq.n	8002db2 <HAL_RCC_OscConfig+0x8fa>
 8002dd0:	e018      	b.n	8002e04 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8002dd2:	4b46      	ldr	r3, [pc, #280]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a45      	ldr	r2, [pc, #276]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002dd8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ddc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002dde:	f7fe f92f 	bl	8001040 <HAL_GetTick>
 8002de2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002de6:	f7fe f92b 	bl	8001040 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e234      	b.n	8003262 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002df8:	4b3c      	ldr	r3, [pc, #240]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1f0      	bne.n	8002de6 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d036      	beq.n	8002e7e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d019      	beq.n	8002e4c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002e18:	4b34      	ldr	r3, [pc, #208]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a33      	ldr	r2, [pc, #204]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002e1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e22:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002e24:	f7fe f90c 	bl	8001040 <HAL_GetTick>
 8002e28:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002e2c:	f7fe f908 	bl	8001040 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e211      	b.n	8003262 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002e3e:	4b2b      	ldr	r3, [pc, #172]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0x974>
 8002e4a:	e018      	b.n	8002e7e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002e4c:	4b27      	ldr	r3, [pc, #156]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a26      	ldr	r2, [pc, #152]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002e52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e56:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002e58:	f7fe f8f2 	bl	8001040 <HAL_GetTick>
 8002e5c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002e60:	f7fe f8ee 	bl	8001040 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e1f7      	b.n	8003262 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002e72:	4b1e      	ldr	r3, [pc, #120]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d07f      	beq.n	8002f8a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d062      	beq.n	8002f58 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002e92:	4b16      	ldr	r3, [pc, #88]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	4a15      	ldr	r2, [pc, #84]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002e98:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e9c:	6093      	str	r3, [r2, #8]
 8002e9e:	4b13      	ldr	r3, [pc, #76]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eaa:	4910      	ldr	r1, [pc, #64]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002eb8:	d309      	bcc.n	8002ece <HAL_RCC_OscConfig+0xa16>
 8002eba:	4b0c      	ldr	r3, [pc, #48]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f023 021f 	bic.w	r2, r3, #31
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	4909      	ldr	r1, [pc, #36]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	60cb      	str	r3, [r1, #12]
 8002ecc:	e02a      	b.n	8002f24 <HAL_RCC_OscConfig+0xa6c>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	da0c      	bge.n	8002ef0 <HAL_RCC_OscConfig+0xa38>
 8002ed6:	4b05      	ldr	r3, [pc, #20]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	015b      	lsls	r3, r3, #5
 8002ee4:	4901      	ldr	r1, [pc, #4]	@ (8002eec <HAL_RCC_OscConfig+0xa34>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60cb      	str	r3, [r1, #12]
 8002eea:	e01b      	b.n	8002f24 <HAL_RCC_OscConfig+0xa6c>
 8002eec:	46020c00 	.word	0x46020c00
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ef8:	d30a      	bcc.n	8002f10 <HAL_RCC_OscConfig+0xa58>
 8002efa:	4ba1      	ldr	r3, [pc, #644]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	029b      	lsls	r3, r3, #10
 8002f08:	499d      	ldr	r1, [pc, #628]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60cb      	str	r3, [r1, #12]
 8002f0e:	e009      	b.n	8002f24 <HAL_RCC_OscConfig+0xa6c>
 8002f10:	4b9b      	ldr	r3, [pc, #620]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	03db      	lsls	r3, r3, #15
 8002f1e:	4998      	ldr	r1, [pc, #608]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002f24:	4b96      	ldr	r3, [pc, #600]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a95      	ldr	r2, [pc, #596]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 8002f2a:	f043 0310 	orr.w	r3, r3, #16
 8002f2e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002f30:	f7fe f886 	bl	8001040 <HAL_GetTick>
 8002f34:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002f38:	f7fe f882 	bl	8001040 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e18b      	b.n	8003262 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002f4a:	4b8d      	ldr	r3, [pc, #564]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0320 	and.w	r3, r3, #32
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCC_OscConfig+0xa80>
 8002f56:	e018      	b.n	8002f8a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002f58:	4b89      	ldr	r3, [pc, #548]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a88      	ldr	r2, [pc, #544]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 8002f5e:	f023 0310 	bic.w	r3, r3, #16
 8002f62:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002f64:	f7fe f86c 	bl	8001040 <HAL_GetTick>
 8002f68:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002f6c:	f7fe f868 	bl	8001040 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e171      	b.n	8003262 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002f7e:	4b80      	ldr	r3, [pc, #512]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0320 	and.w	r3, r3, #32
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 8166 	beq.w	8003260 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002f94:	2300      	movs	r3, #0
 8002f96:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f9a:	4b79      	ldr	r3, [pc, #484]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
 8002fa2:	2b0c      	cmp	r3, #12
 8002fa4:	f000 80f2 	beq.w	800318c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	f040 80c5 	bne.w	800313c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002fb2:	4b73      	ldr	r3, [pc, #460]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a72      	ldr	r2, [pc, #456]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 8002fb8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fbc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002fbe:	f7fe f83f 	bl	8001040 <HAL_GetTick>
 8002fc2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc6:	f7fe f83b 	bl	8001040 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e144      	b.n	8003262 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002fd8:	4b69      	ldr	r3, [pc, #420]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1f0      	bne.n	8002fc6 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fe4:	4b66      	ldr	r3, [pc, #408]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 8002fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d111      	bne.n	8003016 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002ff2:	4b63      	ldr	r3, [pc, #396]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 8002ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ff8:	4a61      	ldr	r2, [pc, #388]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 8002ffa:	f043 0304 	orr.w	r3, r3, #4
 8002ffe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003002:	4b5f      	ldr	r3, [pc, #380]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 8003004:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8003010:	2301      	movs	r3, #1
 8003012:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8003016:	4b5b      	ldr	r3, [pc, #364]	@ (8003184 <HAL_RCC_OscConfig+0xccc>)
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800301e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003022:	d102      	bne.n	800302a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8003024:	2301      	movs	r3, #1
 8003026:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800302a:	4b56      	ldr	r3, [pc, #344]	@ (8003184 <HAL_RCC_OscConfig+0xccc>)
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	4a55      	ldr	r2, [pc, #340]	@ (8003184 <HAL_RCC_OscConfig+0xccc>)
 8003030:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003034:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003036:	4b52      	ldr	r3, [pc, #328]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 8003038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800303a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800303e:	f023 0303 	bic.w	r3, r3, #3
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800304a:	3a01      	subs	r2, #1
 800304c:	0212      	lsls	r2, r2, #8
 800304e:	4311      	orrs	r1, r2
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003054:	430a      	orrs	r2, r1
 8003056:	494a      	ldr	r1, [pc, #296]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 8003058:	4313      	orrs	r3, r2
 800305a:	628b      	str	r3, [r1, #40]	@ 0x28
 800305c:	4b48      	ldr	r3, [pc, #288]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 800305e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003060:	4b49      	ldr	r3, [pc, #292]	@ (8003188 <HAL_RCC_OscConfig+0xcd0>)
 8003062:	4013      	ands	r3, r2
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003068:	3a01      	subs	r2, #1
 800306a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003072:	3a01      	subs	r2, #1
 8003074:	0252      	lsls	r2, r2, #9
 8003076:	b292      	uxth	r2, r2
 8003078:	4311      	orrs	r1, r2
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800307e:	3a01      	subs	r2, #1
 8003080:	0412      	lsls	r2, r2, #16
 8003082:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003086:	4311      	orrs	r1, r2
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800308c:	3a01      	subs	r2, #1
 800308e:	0612      	lsls	r2, r2, #24
 8003090:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003094:	430a      	orrs	r2, r1
 8003096:	493a      	ldr	r1, [pc, #232]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 8003098:	4313      	orrs	r3, r2
 800309a:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800309c:	4b38      	ldr	r3, [pc, #224]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 800309e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a0:	4a37      	ldr	r2, [pc, #220]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 80030a2:	f023 0310 	bic.w	r3, r3, #16
 80030a6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ac:	4a34      	ldr	r2, [pc, #208]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80030b2:	4b33      	ldr	r3, [pc, #204]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 80030b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b6:	4a32      	ldr	r2, [pc, #200]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 80030b8:	f043 0310 	orr.w	r3, r3, #16
 80030bc:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80030be:	4b30      	ldr	r3, [pc, #192]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 80030c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c2:	f023 020c 	bic.w	r2, r3, #12
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ca:	492d      	ldr	r1, [pc, #180]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80030d0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d105      	bne.n	80030e4 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80030d8:	4b2a      	ldr	r3, [pc, #168]	@ (8003184 <HAL_RCC_OscConfig+0xccc>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	4a29      	ldr	r2, [pc, #164]	@ (8003184 <HAL_RCC_OscConfig+0xccc>)
 80030de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030e2:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80030e4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d107      	bne.n	80030fc <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80030ec:	4b24      	ldr	r3, [pc, #144]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 80030ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030f2:	4a23      	ldr	r2, [pc, #140]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 80030f4:	f023 0304 	bic.w	r3, r3, #4
 80030f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80030fc:	4b20      	ldr	r3, [pc, #128]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a1f      	ldr	r2, [pc, #124]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 8003102:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003106:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003108:	f7fd ff9a 	bl	8001040 <HAL_GetTick>
 800310c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003110:	f7fd ff96 	bl	8001040 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e09f      	b.n	8003262 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003122:	4b17      	ldr	r3, [pc, #92]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800312e:	4b14      	ldr	r3, [pc, #80]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 8003130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003132:	4a13      	ldr	r2, [pc, #76]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 8003134:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003138:	6293      	str	r3, [r2, #40]	@ 0x28
 800313a:	e091      	b.n	8003260 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800313c:	4b10      	ldr	r3, [pc, #64]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a0f      	ldr	r2, [pc, #60]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 8003142:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003146:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003148:	f7fd ff7a 	bl	8001040 <HAL_GetTick>
 800314c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003150:	f7fd ff76 	bl	8001040 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e07f      	b.n	8003262 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003162:	4b07      	ldr	r3, [pc, #28]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f0      	bne.n	8003150 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800316e:	4b04      	ldr	r3, [pc, #16]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 8003170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003172:	4a03      	ldr	r2, [pc, #12]	@ (8003180 <HAL_RCC_OscConfig+0xcc8>)
 8003174:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003178:	f023 0303 	bic.w	r3, r3, #3
 800317c:	6293      	str	r3, [r2, #40]	@ 0x28
 800317e:	e06f      	b.n	8003260 <HAL_RCC_OscConfig+0xda8>
 8003180:	46020c00 	.word	0x46020c00
 8003184:	46020800 	.word	0x46020800
 8003188:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800318c:	4b37      	ldr	r3, [pc, #220]	@ (800326c <HAL_RCC_OscConfig+0xdb4>)
 800318e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003190:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003192:	4b36      	ldr	r3, [pc, #216]	@ (800326c <HAL_RCC_OscConfig+0xdb4>)
 8003194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003196:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800319c:	2b01      	cmp	r3, #1
 800319e:	d039      	beq.n	8003214 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f003 0203 	and.w	r2, r3, #3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d132      	bne.n	8003214 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	0a1b      	lsrs	r3, r3, #8
 80031b2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ba:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80031bc:	429a      	cmp	r2, r3
 80031be:	d129      	bne.n	8003214 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d122      	bne.n	8003214 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031d8:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80031da:	429a      	cmp	r2, r3
 80031dc:	d11a      	bne.n	8003214 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	0a5b      	lsrs	r3, r3, #9
 80031e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d111      	bne.n	8003214 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	0c1b      	lsrs	r3, r3, #16
 80031f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031fc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031fe:	429a      	cmp	r2, r3
 8003200:	d108      	bne.n	8003214 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	0e1b      	lsrs	r3, r3, #24
 8003206:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800320e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e024      	b.n	8003262 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003218:	4b14      	ldr	r3, [pc, #80]	@ (800326c <HAL_RCC_OscConfig+0xdb4>)
 800321a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800321c:	08db      	lsrs	r3, r3, #3
 800321e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003226:	429a      	cmp	r2, r3
 8003228:	d01a      	beq.n	8003260 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800322a:	4b10      	ldr	r3, [pc, #64]	@ (800326c <HAL_RCC_OscConfig+0xdb4>)
 800322c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322e:	4a0f      	ldr	r2, [pc, #60]	@ (800326c <HAL_RCC_OscConfig+0xdb4>)
 8003230:	f023 0310 	bic.w	r3, r3, #16
 8003234:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003236:	f7fd ff03 	bl	8001040 <HAL_GetTick>
 800323a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800323c:	bf00      	nop
 800323e:	f7fd feff 	bl	8001040 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003246:	4293      	cmp	r3, r2
 8003248:	d0f9      	beq.n	800323e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800324e:	4a07      	ldr	r2, [pc, #28]	@ (800326c <HAL_RCC_OscConfig+0xdb4>)
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003254:	4b05      	ldr	r3, [pc, #20]	@ (800326c <HAL_RCC_OscConfig+0xdb4>)
 8003256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003258:	4a04      	ldr	r2, [pc, #16]	@ (800326c <HAL_RCC_OscConfig+0xdb4>)
 800325a:	f043 0310 	orr.w	r3, r3, #16
 800325e:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3738      	adds	r7, #56	@ 0x38
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	46020c00 	.word	0x46020c00

08003270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e1d9      	b.n	8003638 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003284:	4b9b      	ldr	r3, [pc, #620]	@ (80034f4 <HAL_RCC_ClockConfig+0x284>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 030f 	and.w	r3, r3, #15
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	429a      	cmp	r2, r3
 8003290:	d910      	bls.n	80032b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003292:	4b98      	ldr	r3, [pc, #608]	@ (80034f4 <HAL_RCC_ClockConfig+0x284>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f023 020f 	bic.w	r2, r3, #15
 800329a:	4996      	ldr	r1, [pc, #600]	@ (80034f4 <HAL_RCC_ClockConfig+0x284>)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	4313      	orrs	r3, r2
 80032a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a2:	4b94      	ldr	r3, [pc, #592]	@ (80034f4 <HAL_RCC_ClockConfig+0x284>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d001      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e1c1      	b.n	8003638 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0310 	and.w	r3, r3, #16
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d010      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	695a      	ldr	r2, [r3, #20]
 80032c4:	4b8c      	ldr	r3, [pc, #560]	@ (80034f8 <HAL_RCC_ClockConfig+0x288>)
 80032c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d908      	bls.n	80032e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80032d0:	4b89      	ldr	r3, [pc, #548]	@ (80034f8 <HAL_RCC_ClockConfig+0x288>)
 80032d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	4986      	ldr	r1, [pc, #536]	@ (80034f8 <HAL_RCC_ClockConfig+0x288>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d012      	beq.n	8003314 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691a      	ldr	r2, [r3, #16]
 80032f2:	4b81      	ldr	r3, [pc, #516]	@ (80034f8 <HAL_RCC_ClockConfig+0x288>)
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	091b      	lsrs	r3, r3, #4
 80032f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d909      	bls.n	8003314 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003300:	4b7d      	ldr	r3, [pc, #500]	@ (80034f8 <HAL_RCC_ClockConfig+0x288>)
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	497a      	ldr	r1, [pc, #488]	@ (80034f8 <HAL_RCC_ClockConfig+0x288>)
 8003310:	4313      	orrs	r3, r2
 8003312:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d010      	beq.n	8003342 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	4b74      	ldr	r3, [pc, #464]	@ (80034f8 <HAL_RCC_ClockConfig+0x288>)
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800332c:	429a      	cmp	r2, r3
 800332e:	d908      	bls.n	8003342 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003330:	4b71      	ldr	r3, [pc, #452]	@ (80034f8 <HAL_RCC_ClockConfig+0x288>)
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	496e      	ldr	r1, [pc, #440]	@ (80034f8 <HAL_RCC_ClockConfig+0x288>)
 800333e:	4313      	orrs	r3, r2
 8003340:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d010      	beq.n	8003370 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	4b69      	ldr	r3, [pc, #420]	@ (80034f8 <HAL_RCC_ClockConfig+0x288>)
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	429a      	cmp	r2, r3
 800335c:	d908      	bls.n	8003370 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800335e:	4b66      	ldr	r3, [pc, #408]	@ (80034f8 <HAL_RCC_ClockConfig+0x288>)
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	f023 020f 	bic.w	r2, r3, #15
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	4963      	ldr	r1, [pc, #396]	@ (80034f8 <HAL_RCC_ClockConfig+0x288>)
 800336c:	4313      	orrs	r3, r2
 800336e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 80d2 	beq.w	8003522 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800337e:	2300      	movs	r3, #0
 8003380:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b03      	cmp	r3, #3
 8003388:	d143      	bne.n	8003412 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800338a:	4b5b      	ldr	r3, [pc, #364]	@ (80034f8 <HAL_RCC_ClockConfig+0x288>)
 800338c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d110      	bne.n	80033ba <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003398:	4b57      	ldr	r3, [pc, #348]	@ (80034f8 <HAL_RCC_ClockConfig+0x288>)
 800339a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800339e:	4a56      	ldr	r2, [pc, #344]	@ (80034f8 <HAL_RCC_ClockConfig+0x288>)
 80033a0:	f043 0304 	orr.w	r3, r3, #4
 80033a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80033a8:	4b53      	ldr	r3, [pc, #332]	@ (80034f8 <HAL_RCC_ClockConfig+0x288>)
 80033aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033ae:	f003 0304 	and.w	r3, r3, #4
 80033b2:	60bb      	str	r3, [r7, #8]
 80033b4:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80033b6:	2301      	movs	r3, #1
 80033b8:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80033ba:	f7fd fe41 	bl	8001040 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80033c0:	4b4e      	ldr	r3, [pc, #312]	@ (80034fc <HAL_RCC_ClockConfig+0x28c>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00f      	beq.n	80033ec <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80033ce:	f7fd fe37 	bl	8001040 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e12b      	b.n	8003638 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80033e0:	4b46      	ldr	r3, [pc, #280]	@ (80034fc <HAL_RCC_ClockConfig+0x28c>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0f0      	beq.n	80033ce <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80033ec:	7dfb      	ldrb	r3, [r7, #23]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d107      	bne.n	8003402 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80033f2:	4b41      	ldr	r3, [pc, #260]	@ (80034f8 <HAL_RCC_ClockConfig+0x288>)
 80033f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033f8:	4a3f      	ldr	r2, [pc, #252]	@ (80034f8 <HAL_RCC_ClockConfig+0x288>)
 80033fa:	f023 0304 	bic.w	r3, r3, #4
 80033fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003402:	4b3d      	ldr	r3, [pc, #244]	@ (80034f8 <HAL_RCC_ClockConfig+0x288>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d121      	bne.n	8003452 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e112      	b.n	8003638 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b02      	cmp	r3, #2
 8003418:	d107      	bne.n	800342a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800341a:	4b37      	ldr	r3, [pc, #220]	@ (80034f8 <HAL_RCC_ClockConfig+0x288>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d115      	bne.n	8003452 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e106      	b.n	8003638 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d107      	bne.n	8003442 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003432:	4b31      	ldr	r3, [pc, #196]	@ (80034f8 <HAL_RCC_ClockConfig+0x288>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0304 	and.w	r3, r3, #4
 800343a:	2b00      	cmp	r3, #0
 800343c:	d109      	bne.n	8003452 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e0fa      	b.n	8003638 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003442:	4b2d      	ldr	r3, [pc, #180]	@ (80034f8 <HAL_RCC_ClockConfig+0x288>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e0f2      	b.n	8003638 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8003452:	4b29      	ldr	r3, [pc, #164]	@ (80034f8 <HAL_RCC_ClockConfig+0x288>)
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	f023 0203 	bic.w	r2, r3, #3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	4926      	ldr	r1, [pc, #152]	@ (80034f8 <HAL_RCC_ClockConfig+0x288>)
 8003460:	4313      	orrs	r3, r2
 8003462:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8003464:	f7fd fdec 	bl	8001040 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b03      	cmp	r3, #3
 8003470:	d112      	bne.n	8003498 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003472:	e00a      	b.n	800348a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003474:	f7fd fde4 	bl	8001040 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003482:	4293      	cmp	r3, r2
 8003484:	d901      	bls.n	800348a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e0d6      	b.n	8003638 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800348a:	4b1b      	ldr	r3, [pc, #108]	@ (80034f8 <HAL_RCC_ClockConfig+0x288>)
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	2b0c      	cmp	r3, #12
 8003494:	d1ee      	bne.n	8003474 <HAL_RCC_ClockConfig+0x204>
 8003496:	e044      	b.n	8003522 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2b02      	cmp	r3, #2
 800349e:	d112      	bne.n	80034c6 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80034a0:	e00a      	b.n	80034b8 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a2:	f7fd fdcd 	bl	8001040 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e0bf      	b.n	8003638 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80034b8:	4b0f      	ldr	r3, [pc, #60]	@ (80034f8 <HAL_RCC_ClockConfig+0x288>)
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	f003 030c 	and.w	r3, r3, #12
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d1ee      	bne.n	80034a2 <HAL_RCC_ClockConfig+0x232>
 80034c4:	e02d      	b.n	8003522 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d123      	bne.n	8003516 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80034ce:	e00a      	b.n	80034e6 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034d0:	f7fd fdb6 	bl	8001040 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034de:	4293      	cmp	r3, r2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e0a8      	b.n	8003638 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80034e6:	4b04      	ldr	r3, [pc, #16]	@ (80034f8 <HAL_RCC_ClockConfig+0x288>)
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	f003 030c 	and.w	r3, r3, #12
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1ee      	bne.n	80034d0 <HAL_RCC_ClockConfig+0x260>
 80034f2:	e016      	b.n	8003522 <HAL_RCC_ClockConfig+0x2b2>
 80034f4:	40022000 	.word	0x40022000
 80034f8:	46020c00 	.word	0x46020c00
 80034fc:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003500:	f7fd fd9e 	bl	8001040 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800350e:	4293      	cmp	r3, r2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e090      	b.n	8003638 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003516:	4b4a      	ldr	r3, [pc, #296]	@ (8003640 <HAL_RCC_ClockConfig+0x3d0>)
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	f003 030c 	and.w	r3, r3, #12
 800351e:	2b04      	cmp	r3, #4
 8003520:	d1ee      	bne.n	8003500 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d010      	beq.n	8003550 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	4b43      	ldr	r3, [pc, #268]	@ (8003640 <HAL_RCC_ClockConfig+0x3d0>)
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	429a      	cmp	r2, r3
 800353c:	d208      	bcs.n	8003550 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800353e:	4b40      	ldr	r3, [pc, #256]	@ (8003640 <HAL_RCC_ClockConfig+0x3d0>)
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	f023 020f 	bic.w	r2, r3, #15
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	493d      	ldr	r1, [pc, #244]	@ (8003640 <HAL_RCC_ClockConfig+0x3d0>)
 800354c:	4313      	orrs	r3, r2
 800354e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003550:	4b3c      	ldr	r3, [pc, #240]	@ (8003644 <HAL_RCC_ClockConfig+0x3d4>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 030f 	and.w	r3, r3, #15
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	429a      	cmp	r2, r3
 800355c:	d210      	bcs.n	8003580 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355e:	4b39      	ldr	r3, [pc, #228]	@ (8003644 <HAL_RCC_ClockConfig+0x3d4>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f023 020f 	bic.w	r2, r3, #15
 8003566:	4937      	ldr	r1, [pc, #220]	@ (8003644 <HAL_RCC_ClockConfig+0x3d4>)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	4313      	orrs	r3, r2
 800356c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800356e:	4b35      	ldr	r3, [pc, #212]	@ (8003644 <HAL_RCC_ClockConfig+0x3d4>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	429a      	cmp	r2, r3
 800357a:	d001      	beq.n	8003580 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e05b      	b.n	8003638 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	d010      	beq.n	80035ae <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	4b2b      	ldr	r3, [pc, #172]	@ (8003640 <HAL_RCC_ClockConfig+0x3d0>)
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003598:	429a      	cmp	r2, r3
 800359a:	d208      	bcs.n	80035ae <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800359c:	4b28      	ldr	r3, [pc, #160]	@ (8003640 <HAL_RCC_ClockConfig+0x3d0>)
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	4925      	ldr	r1, [pc, #148]	@ (8003640 <HAL_RCC_ClockConfig+0x3d0>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d012      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691a      	ldr	r2, [r3, #16]
 80035be:	4b20      	ldr	r3, [pc, #128]	@ (8003640 <HAL_RCC_ClockConfig+0x3d0>)
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	091b      	lsrs	r3, r3, #4
 80035c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d209      	bcs.n	80035e0 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80035cc:	4b1c      	ldr	r3, [pc, #112]	@ (8003640 <HAL_RCC_ClockConfig+0x3d0>)
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	4919      	ldr	r1, [pc, #100]	@ (8003640 <HAL_RCC_ClockConfig+0x3d0>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0310 	and.w	r3, r3, #16
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d010      	beq.n	800360e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	695a      	ldr	r2, [r3, #20]
 80035f0:	4b13      	ldr	r3, [pc, #76]	@ (8003640 <HAL_RCC_ClockConfig+0x3d0>)
 80035f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d208      	bcs.n	800360e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80035fc:	4b10      	ldr	r3, [pc, #64]	@ (8003640 <HAL_RCC_ClockConfig+0x3d0>)
 80035fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003600:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	490d      	ldr	r1, [pc, #52]	@ (8003640 <HAL_RCC_ClockConfig+0x3d0>)
 800360a:	4313      	orrs	r3, r2
 800360c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800360e:	f000 f821 	bl	8003654 <HAL_RCC_GetSysClockFreq>
 8003612:	4602      	mov	r2, r0
 8003614:	4b0a      	ldr	r3, [pc, #40]	@ (8003640 <HAL_RCC_ClockConfig+0x3d0>)
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	f003 030f 	and.w	r3, r3, #15
 800361c:	490a      	ldr	r1, [pc, #40]	@ (8003648 <HAL_RCC_ClockConfig+0x3d8>)
 800361e:	5ccb      	ldrb	r3, [r1, r3]
 8003620:	fa22 f303 	lsr.w	r3, r2, r3
 8003624:	4a09      	ldr	r2, [pc, #36]	@ (800364c <HAL_RCC_ClockConfig+0x3dc>)
 8003626:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003628:	4b09      	ldr	r3, [pc, #36]	@ (8003650 <HAL_RCC_ClockConfig+0x3e0>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f7fd fc7d 	bl	8000f2c <HAL_InitTick>
 8003632:	4603      	mov	r3, r0
 8003634:	73fb      	strb	r3, [r7, #15]

  return status;
 8003636:	7bfb      	ldrb	r3, [r7, #15]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	46020c00 	.word	0x46020c00
 8003644:	40022000 	.word	0x40022000
 8003648:	080067d0 	.word	0x080067d0
 800364c:	20000000 	.word	0x20000000
 8003650:	20000004 	.word	0x20000004

08003654 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003654:	b480      	push	{r7}
 8003656:	b08b      	sub	sp, #44	@ 0x2c
 8003658:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800365a:	2300      	movs	r3, #0
 800365c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800365e:	2300      	movs	r3, #0
 8003660:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003662:	4b78      	ldr	r3, [pc, #480]	@ (8003844 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	f003 030c 	and.w	r3, r3, #12
 800366a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800366c:	4b75      	ldr	r3, [pc, #468]	@ (8003844 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800366e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003670:	f003 0303 	and.w	r3, r3, #3
 8003674:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d005      	beq.n	8003688 <HAL_RCC_GetSysClockFreq+0x34>
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	2b0c      	cmp	r3, #12
 8003680:	d121      	bne.n	80036c6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d11e      	bne.n	80036c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003688:	4b6e      	ldr	r3, [pc, #440]	@ (8003844 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d107      	bne.n	80036a4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003694:	4b6b      	ldr	r3, [pc, #428]	@ (8003844 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003696:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800369a:	0b1b      	lsrs	r3, r3, #12
 800369c:	f003 030f 	and.w	r3, r3, #15
 80036a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80036a2:	e005      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80036a4:	4b67      	ldr	r3, [pc, #412]	@ (8003844 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	0f1b      	lsrs	r3, r3, #28
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036b0:	4a65      	ldr	r2, [pc, #404]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80036b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b8:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d110      	bne.n	80036e2 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80036c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c2:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80036c4:	e00d      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036c6:	4b5f      	ldr	r3, [pc, #380]	@ (8003844 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	f003 030c 	and.w	r3, r3, #12
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d102      	bne.n	80036d8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036d2:	4b5e      	ldr	r3, [pc, #376]	@ (800384c <HAL_RCC_GetSysClockFreq+0x1f8>)
 80036d4:	623b      	str	r3, [r7, #32]
 80036d6:	e004      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d101      	bne.n	80036e2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036de:	4b5c      	ldr	r3, [pc, #368]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80036e0:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	2b0c      	cmp	r3, #12
 80036e6:	f040 80a5 	bne.w	8003834 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80036ea:	4b56      	ldr	r3, [pc, #344]	@ (8003844 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80036ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80036f4:	4b53      	ldr	r3, [pc, #332]	@ (8003844 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80036f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f8:	0a1b      	lsrs	r3, r3, #8
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	3301      	adds	r3, #1
 8003700:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003702:	4b50      	ldr	r3, [pc, #320]	@ (8003844 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003706:	091b      	lsrs	r3, r3, #4
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800370e:	4b4d      	ldr	r3, [pc, #308]	@ (8003844 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003712:	08db      	lsrs	r3, r3, #3
 8003714:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	fb02 f303 	mul.w	r3, r2, r3
 800371e:	ee07 3a90 	vmov	s15, r3
 8003722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003726:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	2b02      	cmp	r3, #2
 800372e:	d003      	beq.n	8003738 <HAL_RCC_GetSysClockFreq+0xe4>
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	2b03      	cmp	r3, #3
 8003734:	d022      	beq.n	800377c <HAL_RCC_GetSysClockFreq+0x128>
 8003736:	e043      	b.n	80037c0 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	ee07 3a90 	vmov	s15, r3
 800373e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003742:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8003854 <HAL_RCC_GetSysClockFreq+0x200>
 8003746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800374a:	4b3e      	ldr	r3, [pc, #248]	@ (8003844 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800374c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800374e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003752:	ee07 3a90 	vmov	s15, r3
 8003756:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800375a:	ed97 6a01 	vldr	s12, [r7, #4]
 800375e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003858 <HAL_RCC_GetSysClockFreq+0x204>
 8003762:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003766:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800376a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800376e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003776:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800377a:	e046      	b.n	800380a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	ee07 3a90 	vmov	s15, r3
 8003782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003786:	eddf 6a35 	vldr	s13, [pc, #212]	@ 800385c <HAL_RCC_GetSysClockFreq+0x208>
 800378a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800378e:	4b2d      	ldr	r3, [pc, #180]	@ (8003844 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003796:	ee07 3a90 	vmov	s15, r3
 800379a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800379e:	ed97 6a01 	vldr	s12, [r7, #4]
 80037a2:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8003858 <HAL_RCC_GetSysClockFreq+0x204>
 80037a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80037ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037be:	e024      	b.n	800380a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c2:	ee07 3a90 	vmov	s15, r3
 80037c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	ee07 3a90 	vmov	s15, r3
 80037d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003844 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80037da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037e0:	ee07 3a90 	vmov	s15, r3
 80037e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80037e8:	ed97 6a01 	vldr	s12, [r7, #4]
 80037ec:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8003858 <HAL_RCC_GetSysClockFreq+0x204>
 80037f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80037f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003804:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003808:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800380a:	4b0e      	ldr	r3, [pc, #56]	@ (8003844 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800380c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800380e:	0e1b      	lsrs	r3, r3, #24
 8003810:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003814:	3301      	adds	r3, #1
 8003816:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	ee07 3a90 	vmov	s15, r3
 800381e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003822:	edd7 6a07 	vldr	s13, [r7, #28]
 8003826:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800382a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800382e:	ee17 3a90 	vmov	r3, s15
 8003832:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8003834:	6a3b      	ldr	r3, [r7, #32]
}
 8003836:	4618      	mov	r0, r3
 8003838:	372c      	adds	r7, #44	@ 0x2c
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	46020c00 	.word	0x46020c00
 8003848:	080067e0 	.word	0x080067e0
 800384c:	00f42400 	.word	0x00f42400
 8003850:	016e3600 	.word	0x016e3600
 8003854:	4b742400 	.word	0x4b742400
 8003858:	46000000 	.word	0x46000000
 800385c:	4bb71b00 	.word	0x4bb71b00

08003860 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003864:	f7ff fef6 	bl	8003654 <HAL_RCC_GetSysClockFreq>
 8003868:	4602      	mov	r2, r0
 800386a:	4b07      	ldr	r3, [pc, #28]	@ (8003888 <HAL_RCC_GetHCLKFreq+0x28>)
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	4906      	ldr	r1, [pc, #24]	@ (800388c <HAL_RCC_GetHCLKFreq+0x2c>)
 8003874:	5ccb      	ldrb	r3, [r1, r3]
 8003876:	fa22 f303 	lsr.w	r3, r2, r3
 800387a:	4a05      	ldr	r2, [pc, #20]	@ (8003890 <HAL_RCC_GetHCLKFreq+0x30>)
 800387c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800387e:	4b04      	ldr	r3, [pc, #16]	@ (8003890 <HAL_RCC_GetHCLKFreq+0x30>)
 8003880:	681b      	ldr	r3, [r3, #0]
}
 8003882:	4618      	mov	r0, r3
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	46020c00 	.word	0x46020c00
 800388c:	080067d0 	.word	0x080067d0
 8003890:	20000000 	.word	0x20000000

08003894 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800389c:	4b3e      	ldr	r3, [pc, #248]	@ (8003998 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800389e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038a2:	f003 0304 	and.w	r3, r3, #4
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038aa:	f7fe fdf7 	bl	800249c <HAL_PWREx_GetVoltageRange>
 80038ae:	6178      	str	r0, [r7, #20]
 80038b0:	e019      	b.n	80038e6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038b2:	4b39      	ldr	r3, [pc, #228]	@ (8003998 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80038b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038b8:	4a37      	ldr	r2, [pc, #220]	@ (8003998 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80038ba:	f043 0304 	orr.w	r3, r3, #4
 80038be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80038c2:	4b35      	ldr	r3, [pc, #212]	@ (8003998 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80038c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038d0:	f7fe fde4 	bl	800249c <HAL_PWREx_GetVoltageRange>
 80038d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038d6:	4b30      	ldr	r3, [pc, #192]	@ (8003998 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80038d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038dc:	4a2e      	ldr	r2, [pc, #184]	@ (8003998 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80038de:	f023 0304 	bic.w	r3, r3, #4
 80038e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80038ec:	d003      	beq.n	80038f6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038f4:	d109      	bne.n	800390a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038fc:	d202      	bcs.n	8003904 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80038fe:	2301      	movs	r3, #1
 8003900:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003902:	e033      	b.n	800396c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8003904:	2300      	movs	r3, #0
 8003906:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003908:	e030      	b.n	800396c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003910:	d208      	bcs.n	8003924 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003918:	d102      	bne.n	8003920 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800391a:	2303      	movs	r3, #3
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	e025      	b.n	800396c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e035      	b.n	8003990 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800392a:	d90f      	bls.n	800394c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d109      	bne.n	8003946 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003938:	d902      	bls.n	8003940 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800393a:	2300      	movs	r3, #0
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	e015      	b.n	800396c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003940:	2301      	movs	r3, #1
 8003942:	613b      	str	r3, [r7, #16]
 8003944:	e012      	b.n	800396c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8003946:	2300      	movs	r3, #0
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	e00f      	b.n	800396c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003952:	d109      	bne.n	8003968 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800395a:	d102      	bne.n	8003962 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800395c:	2301      	movs	r3, #1
 800395e:	613b      	str	r3, [r7, #16]
 8003960:	e004      	b.n	800396c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8003962:	2302      	movs	r3, #2
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	e001      	b.n	800396c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8003968:	2301      	movs	r3, #1
 800396a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800396c:	4b0b      	ldr	r3, [pc, #44]	@ (800399c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f023 020f 	bic.w	r2, r3, #15
 8003974:	4909      	ldr	r1, [pc, #36]	@ (800399c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800397c:	4b07      	ldr	r3, [pc, #28]	@ (800399c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 030f 	and.w	r3, r3, #15
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	429a      	cmp	r2, r3
 8003988:	d001      	beq.n	800398e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e000      	b.n	8003990 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	46020c00 	.word	0x46020c00
 800399c:	40022000 	.word	0x40022000

080039a0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80039a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039a4:	b0b8      	sub	sp, #224	@ 0xe0
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039ac:	2300      	movs	r3, #0
 80039ae:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039b2:	2300      	movs	r3, #0
 80039b4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80039bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c0:	f002 0401 	and.w	r4, r2, #1
 80039c4:	2500      	movs	r5, #0
 80039c6:	ea54 0305 	orrs.w	r3, r4, r5
 80039ca:	d00b      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80039cc:	4bca      	ldr	r3, [pc, #808]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80039ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039d2:	f023 0103 	bic.w	r1, r3, #3
 80039d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80039da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039dc:	4ac6      	ldr	r2, [pc, #792]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80039de:	430b      	orrs	r3, r1
 80039e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80039e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ec:	f002 0802 	and.w	r8, r2, #2
 80039f0:	f04f 0900 	mov.w	r9, #0
 80039f4:	ea58 0309 	orrs.w	r3, r8, r9
 80039f8:	d00b      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80039fa:	4bbf      	ldr	r3, [pc, #764]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80039fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a00:	f023 010c 	bic.w	r1, r3, #12
 8003a04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a0a:	4abb      	ldr	r2, [pc, #748]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003a0c:	430b      	orrs	r3, r1
 8003a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1a:	f002 0a04 	and.w	sl, r2, #4
 8003a1e:	f04f 0b00 	mov.w	fp, #0
 8003a22:	ea5a 030b 	orrs.w	r3, sl, fp
 8003a26:	d00b      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003a28:	4bb3      	ldr	r3, [pc, #716]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a2e:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003a32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a38:	4aaf      	ldr	r2, [pc, #700]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003a3a:	430b      	orrs	r3, r1
 8003a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a48:	f002 0308 	and.w	r3, r2, #8
 8003a4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a50:	2300      	movs	r3, #0
 8003a52:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a56:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	d00b      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003a60:	4ba5      	ldr	r3, [pc, #660]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a66:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a70:	4aa1      	ldr	r2, [pc, #644]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003a72:	430b      	orrs	r3, r1
 8003a74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a80:	f002 0310 	and.w	r3, r2, #16
 8003a84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a88:	2300      	movs	r3, #0
 8003a8a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003a8e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003a92:	460b      	mov	r3, r1
 8003a94:	4313      	orrs	r3, r2
 8003a96:	d00b      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003a98:	4b97      	ldr	r3, [pc, #604]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a9e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003aa2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aa8:	4a93      	ldr	r2, [pc, #588]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003aaa:	430b      	orrs	r3, r1
 8003aac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ab0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab8:	f002 0320 	and.w	r3, r2, #32
 8003abc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ac6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4313      	orrs	r3, r2
 8003ace:	d00b      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003ad0:	4b89      	ldr	r3, [pc, #548]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003ad2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003ad6:	f023 0107 	bic.w	r1, r3, #7
 8003ada:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ade:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ae0:	4a85      	ldr	r2, [pc, #532]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003ae2:	430b      	orrs	r3, r1
 8003ae4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ae8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003af4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003af8:	2300      	movs	r3, #0
 8003afa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003afe:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003b02:	460b      	mov	r3, r1
 8003b04:	4313      	orrs	r3, r2
 8003b06:	d00b      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003b08:	4b7b      	ldr	r3, [pc, #492]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b0e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8003b12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b18:	4a77      	ldr	r2, [pc, #476]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b1a:	430b      	orrs	r3, r1
 8003b1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b28:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003b2c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003b30:	2300      	movs	r3, #0
 8003b32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003b36:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	d00b      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003b40:	4b6d      	ldr	r3, [pc, #436]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b50:	4a69      	ldr	r2, [pc, #420]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b52:	430b      	orrs	r3, r1
 8003b54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b60:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8003b64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b68:	2300      	movs	r3, #0
 8003b6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b6e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003b72:	460b      	mov	r3, r1
 8003b74:	4313      	orrs	r3, r2
 8003b76:	d00b      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003b78:	4b5f      	ldr	r3, [pc, #380]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b7e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b88:	4a5b      	ldr	r2, [pc, #364]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b8a:	430b      	orrs	r3, r1
 8003b8c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b98:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003b9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003ba6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003baa:	460b      	mov	r3, r1
 8003bac:	4313      	orrs	r3, r2
 8003bae:	d00b      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003bb0:	4b51      	ldr	r3, [pc, #324]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bb6:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8003bba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003bbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bc0:	4a4d      	ldr	r2, [pc, #308]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003bc2:	430b      	orrs	r3, r1
 8003bc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd0:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8003bd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003bde:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003be2:	460b      	mov	r3, r1
 8003be4:	4313      	orrs	r3, r2
 8003be6:	d00b      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003be8:	4b43      	ldr	r3, [pc, #268]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003bea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003bee:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8003bf2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003bf6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bf8:	4a3f      	ldr	r2, [pc, #252]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003bfa:	430b      	orrs	r3, r1
 8003bfc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c08:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003c0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c10:	2300      	movs	r3, #0
 8003c12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003c16:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	d00b      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003c20:	4b35      	ldr	r3, [pc, #212]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c26:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003c2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c30:	4a31      	ldr	r2, [pc, #196]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c32:	430b      	orrs	r3, r1
 8003c34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003c38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c40:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003c44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c46:	2300      	movs	r3, #0
 8003c48:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003c4a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4313      	orrs	r3, r2
 8003c52:	d00c      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003c54:	4b28      	ldr	r3, [pc, #160]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003c5a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003c5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c66:	4a24      	ldr	r2, [pc, #144]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c68:	430b      	orrs	r3, r1
 8003c6a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c76:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003c7a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003c80:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003c84:	460b      	mov	r3, r1
 8003c86:	4313      	orrs	r3, r2
 8003c88:	d04f      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003c8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c92:	2b80      	cmp	r3, #128	@ 0x80
 8003c94:	d02d      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8003c96:	2b80      	cmp	r3, #128	@ 0x80
 8003c98:	d827      	bhi.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003c9a:	2b60      	cmp	r3, #96	@ 0x60
 8003c9c:	d02e      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003c9e:	2b60      	cmp	r3, #96	@ 0x60
 8003ca0:	d823      	bhi.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003ca2:	2b40      	cmp	r3, #64	@ 0x40
 8003ca4:	d006      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003ca6:	2b40      	cmp	r3, #64	@ 0x40
 8003ca8:	d81f      	bhi.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d009      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8003cae:	2b20      	cmp	r3, #32
 8003cb0:	d011      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003cb2:	e01a      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003cb4:	4b10      	ldr	r3, [pc, #64]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb8:	4a0f      	ldr	r2, [pc, #60]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003cba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cbe:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003cc0:	e01d      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003cc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003cc6:	3308      	adds	r3, #8
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 fc0d 	bl	80044e8 <RCCEx_PLL2_Config>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003cd4:	e013      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003cd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003cda:	332c      	adds	r3, #44	@ 0x2c
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 fc9b 	bl	8004618 <RCCEx_PLL3_Config>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ce8:	e009      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003cf0:	e005      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8003cf2:	bf00      	nop
 8003cf4:	e003      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8003cf6:	bf00      	nop
 8003cf8:	46020c00 	.word	0x46020c00
        break;
 8003cfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cfe:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10d      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003d06:	4bb6      	ldr	r3, [pc, #728]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003d08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003d0c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8003d10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d18:	4ab1      	ldr	r2, [pc, #708]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003d1a:	430b      	orrs	r3, r1
 8003d1c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003d20:	e003      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d22:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003d26:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d32:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003d36:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d38:	2300      	movs	r3, #0
 8003d3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d3c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003d40:	460b      	mov	r3, r1
 8003d42:	4313      	orrs	r3, r2
 8003d44:	d053      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003d46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d52:	d033      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003d54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d58:	d82c      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003d5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d5e:	d02f      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003d60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d64:	d826      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003d66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d6a:	d008      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003d6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d70:	d820      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00a      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003d76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d7a:	d011      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003d7c:	e01a      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d7e:	4b98      	ldr	r3, [pc, #608]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d82:	4a97      	ldr	r2, [pc, #604]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d88:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003d8a:	e01a      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d90:	3308      	adds	r3, #8
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fba8 	bl	80044e8 <RCCEx_PLL2_Config>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003d9e:	e010      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003da0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003da4:	332c      	adds	r3, #44	@ 0x2c
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 fc36 	bl	8004618 <RCCEx_PLL3_Config>
 8003dac:	4603      	mov	r3, r0
 8003dae:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003db2:	e006      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003dba:	e002      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8003dbc:	bf00      	nop
 8003dbe:	e000      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8003dc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dc2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10d      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8003dca:	4b85      	ldr	r3, [pc, #532]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003dcc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003dd0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003dd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ddc:	4a80      	ldr	r2, [pc, #512]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003dde:	430b      	orrs	r3, r1
 8003de0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003de4:	e003      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003dea:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003dee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003dfa:	663b      	str	r3, [r7, #96]	@ 0x60
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e00:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003e04:	460b      	mov	r3, r1
 8003e06:	4313      	orrs	r3, r2
 8003e08:	d046      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003e0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003e0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003e12:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003e16:	d028      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003e18:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003e1c:	d821      	bhi.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003e1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e22:	d022      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003e24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e28:	d81b      	bhi.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003e2a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e2e:	d01c      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003e30:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e34:	d815      	bhi.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003e36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e3a:	d008      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003e3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e40:	d80f      	bhi.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d011      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003e46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e4a:	d00e      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003e4c:	e009      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003e52:	3308      	adds	r3, #8
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 fb47 	bl	80044e8 <RCCEx_PLL2_Config>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003e60:	e004      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003e68:	e000      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8003e6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e6c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10d      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003e74:	4b5a      	ldr	r3, [pc, #360]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003e76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003e7a:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003e7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003e82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003e86:	4a56      	ldr	r2, [pc, #344]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003e88:	430b      	orrs	r3, r1
 8003e8a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003e8e:	e003      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e90:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003e94:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003e98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003ea4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003eaa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	d03f      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003eb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d81e      	bhi.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8003ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8003ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec6:	bf00      	nop
 8003ec8:	08003f07 	.word	0x08003f07
 8003ecc:	08003edd 	.word	0x08003edd
 8003ed0:	08003eeb 	.word	0x08003eeb
 8003ed4:	08003f07 	.word	0x08003f07
 8003ed8:	08003f07 	.word	0x08003f07
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003edc:	4b40      	ldr	r3, [pc, #256]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee0:	4a3f      	ldr	r2, [pc, #252]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003ee2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ee6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003ee8:	e00e      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003eea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003eee:	332c      	adds	r3, #44	@ 0x2c
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 fb91 	bl	8004618 <RCCEx_PLL3_Config>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003efc:	e004      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003f04:	e000      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8003f06:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003f08:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10d      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003f10:	4b33      	ldr	r3, [pc, #204]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003f12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003f16:	f023 0107 	bic.w	r1, r3, #7
 8003f1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f22:	4a2f      	ldr	r2, [pc, #188]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003f24:	430b      	orrs	r3, r1
 8003f26:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003f2a:	e003      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003f30:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003f34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003f40:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f42:	2300      	movs	r3, #0
 8003f44:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f46:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	d04d      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003f50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f58:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f5c:	d028      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8003f5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f62:	d821      	bhi.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003f64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f68:	d024      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8003f6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f6e:	d81b      	bhi.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003f70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f74:	d00e      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8003f76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f7a:	d815      	bhi.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d01b      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8003f80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f84:	d110      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f86:	4b16      	ldr	r3, [pc, #88]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8a:	4a15      	ldr	r2, [pc, #84]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f90:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003f92:	e012      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f98:	332c      	adds	r3, #44	@ 0x2c
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fb3c 	bl	8004618 <RCCEx_PLL3_Config>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003fa6:	e008      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003fae:	e004      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8003fb0:	bf00      	nop
 8003fb2:	e002      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8003fb4:	bf00      	nop
 8003fb6:	e000      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8003fb8:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003fba:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d110      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003fc2:	4b07      	ldr	r3, [pc, #28]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003fc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003fc8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003fcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fd4:	4a02      	ldr	r2, [pc, #8]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003fd6:	430b      	orrs	r3, r1
 8003fd8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003fdc:	e006      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003fde:	bf00      	nop
 8003fe0:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003fe8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff4:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ffe:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004002:	460b      	mov	r3, r1
 8004004:	4313      	orrs	r3, r2
 8004006:	f000 80b5 	beq.w	8004174 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800400a:	2300      	movs	r3, #0
 800400c:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004010:	4b9d      	ldr	r3, [pc, #628]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004012:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004016:	f003 0304 	and.w	r3, r3, #4
 800401a:	2b00      	cmp	r3, #0
 800401c:	d113      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800401e:	4b9a      	ldr	r3, [pc, #616]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004020:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004024:	4a98      	ldr	r2, [pc, #608]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004026:	f043 0304 	orr.w	r3, r3, #4
 800402a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800402e:	4b96      	ldr	r3, [pc, #600]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004030:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800403c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8004040:	2301      	movs	r3, #1
 8004042:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004046:	4b91      	ldr	r3, [pc, #580]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800404a:	4a90      	ldr	r2, [pc, #576]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800404c:	f043 0301 	orr.w	r3, r3, #1
 8004050:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004052:	f7fc fff5 	bl	8001040 <HAL_GetTick>
 8004056:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800405a:	e00b      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800405c:	f7fc fff0 	bl	8001040 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d903      	bls.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004072:	e005      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004074:	4b85      	ldr	r3, [pc, #532]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0ed      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8004080:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004084:	2b00      	cmp	r3, #0
 8004086:	d165      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004088:	4b7f      	ldr	r3, [pc, #508]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800408a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800408e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004092:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800409a:	2b00      	cmp	r3, #0
 800409c:	d023      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x746>
 800409e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80040a2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80040a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d01b      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040ae:	4b76      	ldr	r3, [pc, #472]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80040b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040bc:	4b72      	ldr	r3, [pc, #456]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80040be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040c2:	4a71      	ldr	r2, [pc, #452]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80040c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040cc:	4b6e      	ldr	r3, [pc, #440]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80040ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040d2:	4a6d      	ldr	r2, [pc, #436]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80040d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040dc:	4a6a      	ldr	r2, [pc, #424]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80040de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d019      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f2:	f7fc ffa5 	bl	8001040 <HAL_GetTick>
 80040f6:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040fa:	e00d      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040fc:	f7fc ffa0 	bl	8001040 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004106:	1ad2      	subs	r2, r2, r3
 8004108:	f241 3388 	movw	r3, #5000	@ 0x1388
 800410c:	429a      	cmp	r2, r3
 800410e:	d903      	bls.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 8004116:	e006      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004118:	4b5b      	ldr	r3, [pc, #364]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800411a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0ea      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8004126:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10d      	bne.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800412e:	4b56      	ldr	r3, [pc, #344]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004130:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004134:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004138:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800413c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004140:	4a51      	ldr	r2, [pc, #324]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004142:	430b      	orrs	r3, r1
 8004144:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004148:	e008      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800414a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800414e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8004152:	e003      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004154:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004158:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800415c:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8004160:	2b01      	cmp	r3, #1
 8004162:	d107      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004164:	4b48      	ldr	r3, [pc, #288]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004166:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800416a:	4a47      	ldr	r2, [pc, #284]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800416c:	f023 0304 	bic.w	r3, r3, #4
 8004170:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8004174:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004180:	643b      	str	r3, [r7, #64]	@ 0x40
 8004182:	2300      	movs	r3, #0
 8004184:	647b      	str	r3, [r7, #68]	@ 0x44
 8004186:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800418a:	460b      	mov	r3, r1
 800418c:	4313      	orrs	r3, r2
 800418e:	d042      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8004190:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004194:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004198:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800419c:	d022      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x844>
 800419e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80041a2:	d81b      	bhi.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80041a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041a8:	d011      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x82e>
 80041aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041ae:	d815      	bhi.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d019      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80041b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041b8:	d110      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80041be:	3308      	adds	r3, #8
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 f991 	bl	80044e8 <RCCEx_PLL2_Config>
 80041c6:	4603      	mov	r3, r0
 80041c8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80041cc:	e00d      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ce:	4b2e      	ldr	r3, [pc, #184]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80041d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d2:	4a2d      	ldr	r2, [pc, #180]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80041d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041d8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80041da:	e006      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80041e2:	e002      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80041e4:	bf00      	nop
 80041e6:	e000      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80041e8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80041ea:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10d      	bne.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80041f2:	4b25      	ldr	r3, [pc, #148]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80041f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041f8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80041fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004200:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004204:	4a20      	ldr	r2, [pc, #128]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004206:	430b      	orrs	r3, r1
 8004208:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800420c:	e003      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004212:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004216:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800421a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004222:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004224:	2300      	movs	r3, #0
 8004226:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004228:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800422c:	460b      	mov	r3, r1
 800422e:	4313      	orrs	r3, r2
 8004230:	d032      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004232:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004236:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800423a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800423e:	d00b      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004240:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004244:	d804      	bhi.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8004246:	2b00      	cmp	r3, #0
 8004248:	d008      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800424a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800424e:	d007      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004256:	e004      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8004258:	bf00      	nop
 800425a:	e002      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 800425c:	bf00      	nop
 800425e:	e000      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8004260:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004262:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004266:	2b00      	cmp	r3, #0
 8004268:	d112      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800426a:	4b07      	ldr	r3, [pc, #28]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800426c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004270:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004274:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004278:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800427c:	4a02      	ldr	r2, [pc, #8]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800427e:	430b      	orrs	r3, r1
 8004280:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004284:	e008      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8004286:	bf00      	nop
 8004288:	46020c00 	.word	0x46020c00
 800428c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004290:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004294:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8004298:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800429c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80042a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80042a6:	2300      	movs	r3, #0
 80042a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80042aa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80042ae:	460b      	mov	r3, r1
 80042b0:	4313      	orrs	r3, r2
 80042b2:	d019      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80042b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80042bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042c0:	d105      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80042c2:	4b88      	ldr	r3, [pc, #544]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80042c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c6:	4a87      	ldr	r2, [pc, #540]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80042c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042cc:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80042ce:	4b85      	ldr	r3, [pc, #532]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80042d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80042d4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80042d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80042e0:	4a80      	ldr	r2, [pc, #512]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80042e2:	430b      	orrs	r3, r1
 80042e4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80042e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80042f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042f6:	2300      	movs	r3, #0
 80042f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042fa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80042fe:	460b      	mov	r3, r1
 8004300:	4313      	orrs	r3, r2
 8004302:	d00c      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004304:	4b77      	ldr	r3, [pc, #476]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800430a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800430e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004312:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004316:	4973      	ldr	r1, [pc, #460]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004318:	4313      	orrs	r3, r2
 800431a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800431e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004326:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800432a:	623b      	str	r3, [r7, #32]
 800432c:	2300      	movs	r3, #0
 800432e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004330:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004334:	460b      	mov	r3, r1
 8004336:	4313      	orrs	r3, r2
 8004338:	d00c      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800433a:	4b6a      	ldr	r3, [pc, #424]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800433c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004340:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004344:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004348:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800434c:	4965      	ldr	r1, [pc, #404]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004354:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004360:	61bb      	str	r3, [r7, #24]
 8004362:	2300      	movs	r3, #0
 8004364:	61fb      	str	r3, [r7, #28]
 8004366:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800436a:	460b      	mov	r3, r1
 800436c:	4313      	orrs	r3, r2
 800436e:	d00c      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004370:	4b5c      	ldr	r3, [pc, #368]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004372:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004376:	f023 0218 	bic.w	r2, r3, #24
 800437a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800437e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004382:	4958      	ldr	r1, [pc, #352]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004384:	4313      	orrs	r3, r2
 8004386:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800438a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800438e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004392:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004396:	613b      	str	r3, [r7, #16]
 8004398:	2300      	movs	r3, #0
 800439a:	617b      	str	r3, [r7, #20]
 800439c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80043a0:	460b      	mov	r3, r1
 80043a2:	4313      	orrs	r3, r2
 80043a4:	d032      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80043a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80043ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043b2:	d105      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043b4:	4b4b      	ldr	r3, [pc, #300]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80043b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b8:	4a4a      	ldr	r2, [pc, #296]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80043ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043be:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80043c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80043c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80043cc:	d108      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043d2:	3308      	adds	r3, #8
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 f887 	bl	80044e8 <RCCEx_PLL2_Config>
 80043da:	4603      	mov	r3, r0
 80043dc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 80043e0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10d      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80043e8:	4b3e      	ldr	r3, [pc, #248]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80043ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80043ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80043f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80043fa:	493a      	ldr	r1, [pc, #232]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004402:	e003      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004404:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004408:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800440c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004414:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004418:	60bb      	str	r3, [r7, #8]
 800441a:	2300      	movs	r3, #0
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004422:	460b      	mov	r3, r1
 8004424:	4313      	orrs	r3, r2
 8004426:	d03a      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8004428:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800442c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004430:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004434:	d00e      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8004436:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800443a:	d815      	bhi.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 800443c:	2b00      	cmp	r3, #0
 800443e:	d017      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8004440:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004444:	d110      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004446:	4b27      	ldr	r3, [pc, #156]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444a:	4a26      	ldr	r2, [pc, #152]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800444c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004450:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004452:	e00e      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004454:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004458:	3308      	adds	r3, #8
 800445a:	4618      	mov	r0, r3
 800445c:	f000 f844 	bl	80044e8 <RCCEx_PLL2_Config>
 8004460:	4603      	mov	r3, r0
 8004462:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004466:	e004      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800446e:	e000      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8004470:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004472:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10d      	bne.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800447a:	4b1a      	ldr	r3, [pc, #104]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800447c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004480:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004484:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004488:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800448c:	4915      	ldr	r1, [pc, #84]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004494:	e003      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004496:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800449a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800449e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80044a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a6:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80044aa:	603b      	str	r3, [r7, #0]
 80044ac:	2300      	movs	r3, #0
 80044ae:	607b      	str	r3, [r7, #4]
 80044b0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80044b4:	460b      	mov	r3, r1
 80044b6:	4313      	orrs	r3, r2
 80044b8:	d00c      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80044ba:	4b0a      	ldr	r3, [pc, #40]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80044bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80044c0:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80044c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80044c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80044cc:	4905      	ldr	r1, [pc, #20]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80044d4:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 80044d8:	4618      	mov	r0, r3
 80044da:	37e0      	adds	r7, #224	@ 0xe0
 80044dc:	46bd      	mov	sp, r7
 80044de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044e2:	bf00      	nop
 80044e4:	46020c00 	.word	0x46020c00

080044e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80044f0:	4b47      	ldr	r3, [pc, #284]	@ (8004610 <RCCEx_PLL2_Config+0x128>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a46      	ldr	r2, [pc, #280]	@ (8004610 <RCCEx_PLL2_Config+0x128>)
 80044f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80044fa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80044fc:	f7fc fda0 	bl	8001040 <HAL_GetTick>
 8004500:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004502:	e008      	b.n	8004516 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004504:	f7fc fd9c 	bl	8001040 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d901      	bls.n	8004516 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e077      	b.n	8004606 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004516:	4b3e      	ldr	r3, [pc, #248]	@ (8004610 <RCCEx_PLL2_Config+0x128>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1f0      	bne.n	8004504 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004522:	4b3b      	ldr	r3, [pc, #236]	@ (8004610 <RCCEx_PLL2_Config+0x128>)
 8004524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004526:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800452a:	f023 0303 	bic.w	r3, r3, #3
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6811      	ldr	r1, [r2, #0]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6852      	ldr	r2, [r2, #4]
 8004536:	3a01      	subs	r2, #1
 8004538:	0212      	lsls	r2, r2, #8
 800453a:	430a      	orrs	r2, r1
 800453c:	4934      	ldr	r1, [pc, #208]	@ (8004610 <RCCEx_PLL2_Config+0x128>)
 800453e:	4313      	orrs	r3, r2
 8004540:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8004542:	4b33      	ldr	r3, [pc, #204]	@ (8004610 <RCCEx_PLL2_Config+0x128>)
 8004544:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004546:	4b33      	ldr	r3, [pc, #204]	@ (8004614 <RCCEx_PLL2_Config+0x12c>)
 8004548:	4013      	ands	r3, r2
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6892      	ldr	r2, [r2, #8]
 800454e:	3a01      	subs	r2, #1
 8004550:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	68d2      	ldr	r2, [r2, #12]
 8004558:	3a01      	subs	r2, #1
 800455a:	0252      	lsls	r2, r2, #9
 800455c:	b292      	uxth	r2, r2
 800455e:	4311      	orrs	r1, r2
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6912      	ldr	r2, [r2, #16]
 8004564:	3a01      	subs	r2, #1
 8004566:	0412      	lsls	r2, r2, #16
 8004568:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800456c:	4311      	orrs	r1, r2
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	6952      	ldr	r2, [r2, #20]
 8004572:	3a01      	subs	r2, #1
 8004574:	0612      	lsls	r2, r2, #24
 8004576:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800457a:	430a      	orrs	r2, r1
 800457c:	4924      	ldr	r1, [pc, #144]	@ (8004610 <RCCEx_PLL2_Config+0x128>)
 800457e:	4313      	orrs	r3, r2
 8004580:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8004582:	4b23      	ldr	r3, [pc, #140]	@ (8004610 <RCCEx_PLL2_Config+0x128>)
 8004584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004586:	f023 020c 	bic.w	r2, r3, #12
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	4920      	ldr	r1, [pc, #128]	@ (8004610 <RCCEx_PLL2_Config+0x128>)
 8004590:	4313      	orrs	r3, r2
 8004592:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8004594:	4b1e      	ldr	r3, [pc, #120]	@ (8004610 <RCCEx_PLL2_Config+0x128>)
 8004596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	491c      	ldr	r1, [pc, #112]	@ (8004610 <RCCEx_PLL2_Config+0x128>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80045a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004610 <RCCEx_PLL2_Config+0x128>)
 80045a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a6:	4a1a      	ldr	r2, [pc, #104]	@ (8004610 <RCCEx_PLL2_Config+0x128>)
 80045a8:	f023 0310 	bic.w	r3, r3, #16
 80045ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80045ae:	4b18      	ldr	r3, [pc, #96]	@ (8004610 <RCCEx_PLL2_Config+0x128>)
 80045b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045b6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	69d2      	ldr	r2, [r2, #28]
 80045be:	00d2      	lsls	r2, r2, #3
 80045c0:	4913      	ldr	r1, [pc, #76]	@ (8004610 <RCCEx_PLL2_Config+0x128>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80045c6:	4b12      	ldr	r3, [pc, #72]	@ (8004610 <RCCEx_PLL2_Config+0x128>)
 80045c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ca:	4a11      	ldr	r2, [pc, #68]	@ (8004610 <RCCEx_PLL2_Config+0x128>)
 80045cc:	f043 0310 	orr.w	r3, r3, #16
 80045d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80045d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004610 <RCCEx_PLL2_Config+0x128>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a0e      	ldr	r2, [pc, #56]	@ (8004610 <RCCEx_PLL2_Config+0x128>)
 80045d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045dc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80045de:	f7fc fd2f 	bl	8001040 <HAL_GetTick>
 80045e2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045e4:	e008      	b.n	80045f8 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80045e6:	f7fc fd2b 	bl	8001040 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d901      	bls.n	80045f8 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e006      	b.n	8004606 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045f8:	4b05      	ldr	r3, [pc, #20]	@ (8004610 <RCCEx_PLL2_Config+0x128>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0f0      	beq.n	80045e6 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8004604:	2300      	movs	r3, #0

}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	46020c00 	.word	0x46020c00
 8004614:	80800000 	.word	0x80800000

08004618 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8004620:	4b47      	ldr	r3, [pc, #284]	@ (8004740 <RCCEx_PLL3_Config+0x128>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a46      	ldr	r2, [pc, #280]	@ (8004740 <RCCEx_PLL3_Config+0x128>)
 8004626:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800462a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800462c:	f7fc fd08 	bl	8001040 <HAL_GetTick>
 8004630:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004632:	e008      	b.n	8004646 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004634:	f7fc fd04 	bl	8001040 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e077      	b.n	8004736 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004646:	4b3e      	ldr	r3, [pc, #248]	@ (8004740 <RCCEx_PLL3_Config+0x128>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f0      	bne.n	8004634 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8004652:	4b3b      	ldr	r3, [pc, #236]	@ (8004740 <RCCEx_PLL3_Config+0x128>)
 8004654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004656:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800465a:	f023 0303 	bic.w	r3, r3, #3
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6811      	ldr	r1, [r2, #0]
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6852      	ldr	r2, [r2, #4]
 8004666:	3a01      	subs	r2, #1
 8004668:	0212      	lsls	r2, r2, #8
 800466a:	430a      	orrs	r2, r1
 800466c:	4934      	ldr	r1, [pc, #208]	@ (8004740 <RCCEx_PLL3_Config+0x128>)
 800466e:	4313      	orrs	r3, r2
 8004670:	630b      	str	r3, [r1, #48]	@ 0x30
 8004672:	4b33      	ldr	r3, [pc, #204]	@ (8004740 <RCCEx_PLL3_Config+0x128>)
 8004674:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004676:	4b33      	ldr	r3, [pc, #204]	@ (8004744 <RCCEx_PLL3_Config+0x12c>)
 8004678:	4013      	ands	r3, r2
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6892      	ldr	r2, [r2, #8]
 800467e:	3a01      	subs	r2, #1
 8004680:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	68d2      	ldr	r2, [r2, #12]
 8004688:	3a01      	subs	r2, #1
 800468a:	0252      	lsls	r2, r2, #9
 800468c:	b292      	uxth	r2, r2
 800468e:	4311      	orrs	r1, r2
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6912      	ldr	r2, [r2, #16]
 8004694:	3a01      	subs	r2, #1
 8004696:	0412      	lsls	r2, r2, #16
 8004698:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800469c:	4311      	orrs	r1, r2
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6952      	ldr	r2, [r2, #20]
 80046a2:	3a01      	subs	r2, #1
 80046a4:	0612      	lsls	r2, r2, #24
 80046a6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80046aa:	430a      	orrs	r2, r1
 80046ac:	4924      	ldr	r1, [pc, #144]	@ (8004740 <RCCEx_PLL3_Config+0x128>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80046b2:	4b23      	ldr	r3, [pc, #140]	@ (8004740 <RCCEx_PLL3_Config+0x128>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b6:	f023 020c 	bic.w	r2, r3, #12
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	4920      	ldr	r1, [pc, #128]	@ (8004740 <RCCEx_PLL3_Config+0x128>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80046c4:	4b1e      	ldr	r3, [pc, #120]	@ (8004740 <RCCEx_PLL3_Config+0x128>)
 80046c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	491c      	ldr	r1, [pc, #112]	@ (8004740 <RCCEx_PLL3_Config+0x128>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80046d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004740 <RCCEx_PLL3_Config+0x128>)
 80046d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d6:	4a1a      	ldr	r2, [pc, #104]	@ (8004740 <RCCEx_PLL3_Config+0x128>)
 80046d8:	f023 0310 	bic.w	r3, r3, #16
 80046dc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80046de:	4b18      	ldr	r3, [pc, #96]	@ (8004740 <RCCEx_PLL3_Config+0x128>)
 80046e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046e6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	69d2      	ldr	r2, [r2, #28]
 80046ee:	00d2      	lsls	r2, r2, #3
 80046f0:	4913      	ldr	r1, [pc, #76]	@ (8004740 <RCCEx_PLL3_Config+0x128>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80046f6:	4b12      	ldr	r3, [pc, #72]	@ (8004740 <RCCEx_PLL3_Config+0x128>)
 80046f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fa:	4a11      	ldr	r2, [pc, #68]	@ (8004740 <RCCEx_PLL3_Config+0x128>)
 80046fc:	f043 0310 	orr.w	r3, r3, #16
 8004700:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8004702:	4b0f      	ldr	r3, [pc, #60]	@ (8004740 <RCCEx_PLL3_Config+0x128>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a0e      	ldr	r2, [pc, #56]	@ (8004740 <RCCEx_PLL3_Config+0x128>)
 8004708:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800470c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800470e:	f7fc fc97 	bl	8001040 <HAL_GetTick>
 8004712:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004714:	e008      	b.n	8004728 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004716:	f7fc fc93 	bl	8001040 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d901      	bls.n	8004728 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e006      	b.n	8004736 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004728:	4b05      	ldr	r3, [pc, #20]	@ (8004740 <RCCEx_PLL3_Config+0x128>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0f0      	beq.n	8004716 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	46020c00 	.word	0x46020c00
 8004744:	80800000 	.word	0x80800000

08004748 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e049      	b.n	80047ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d106      	bne.n	8004774 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7fc fa10 	bl	8000b94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3304      	adds	r3, #4
 8004784:	4619      	mov	r1, r3
 8004786:	4610      	mov	r0, r2
 8004788:	f000 fa9c 	bl	8004cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
	...

080047f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d109      	bne.n	800481c <HAL_TIM_PWM_Start+0x24>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b01      	cmp	r3, #1
 8004812:	bf14      	ite	ne
 8004814:	2301      	movne	r3, #1
 8004816:	2300      	moveq	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	e03c      	b.n	8004896 <HAL_TIM_PWM_Start+0x9e>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b04      	cmp	r3, #4
 8004820:	d109      	bne.n	8004836 <HAL_TIM_PWM_Start+0x3e>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b01      	cmp	r3, #1
 800482c:	bf14      	ite	ne
 800482e:	2301      	movne	r3, #1
 8004830:	2300      	moveq	r3, #0
 8004832:	b2db      	uxtb	r3, r3
 8004834:	e02f      	b.n	8004896 <HAL_TIM_PWM_Start+0x9e>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b08      	cmp	r3, #8
 800483a:	d109      	bne.n	8004850 <HAL_TIM_PWM_Start+0x58>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b01      	cmp	r3, #1
 8004846:	bf14      	ite	ne
 8004848:	2301      	movne	r3, #1
 800484a:	2300      	moveq	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	e022      	b.n	8004896 <HAL_TIM_PWM_Start+0x9e>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	2b0c      	cmp	r3, #12
 8004854:	d109      	bne.n	800486a <HAL_TIM_PWM_Start+0x72>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b01      	cmp	r3, #1
 8004860:	bf14      	ite	ne
 8004862:	2301      	movne	r3, #1
 8004864:	2300      	moveq	r3, #0
 8004866:	b2db      	uxtb	r3, r3
 8004868:	e015      	b.n	8004896 <HAL_TIM_PWM_Start+0x9e>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b10      	cmp	r3, #16
 800486e:	d109      	bne.n	8004884 <HAL_TIM_PWM_Start+0x8c>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b01      	cmp	r3, #1
 800487a:	bf14      	ite	ne
 800487c:	2301      	movne	r3, #1
 800487e:	2300      	moveq	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	e008      	b.n	8004896 <HAL_TIM_PWM_Start+0x9e>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b01      	cmp	r3, #1
 800488e:	bf14      	ite	ne
 8004890:	2301      	movne	r3, #1
 8004892:	2300      	moveq	r3, #0
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e0d8      	b.n	8004a50 <HAL_TIM_PWM_Start+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d104      	bne.n	80048ae <HAL_TIM_PWM_Start+0xb6>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048ac:	e023      	b.n	80048f6 <HAL_TIM_PWM_Start+0xfe>
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b04      	cmp	r3, #4
 80048b2:	d104      	bne.n	80048be <HAL_TIM_PWM_Start+0xc6>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048bc:	e01b      	b.n	80048f6 <HAL_TIM_PWM_Start+0xfe>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d104      	bne.n	80048ce <HAL_TIM_PWM_Start+0xd6>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048cc:	e013      	b.n	80048f6 <HAL_TIM_PWM_Start+0xfe>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b0c      	cmp	r3, #12
 80048d2:	d104      	bne.n	80048de <HAL_TIM_PWM_Start+0xe6>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048dc:	e00b      	b.n	80048f6 <HAL_TIM_PWM_Start+0xfe>
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b10      	cmp	r3, #16
 80048e2:	d104      	bne.n	80048ee <HAL_TIM_PWM_Start+0xf6>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2202      	movs	r2, #2
 80048e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048ec:	e003      	b.n	80048f6 <HAL_TIM_PWM_Start+0xfe>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2202      	movs	r2, #2
 80048f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2201      	movs	r2, #1
 80048fc:	6839      	ldr	r1, [r7, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 feb6 	bl	8005670 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a53      	ldr	r2, [pc, #332]	@ (8004a58 <HAL_TIM_PWM_Start+0x260>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d02c      	beq.n	8004968 <HAL_TIM_PWM_Start+0x170>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a52      	ldr	r2, [pc, #328]	@ (8004a5c <HAL_TIM_PWM_Start+0x264>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d027      	beq.n	8004968 <HAL_TIM_PWM_Start+0x170>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a50      	ldr	r2, [pc, #320]	@ (8004a60 <HAL_TIM_PWM_Start+0x268>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d022      	beq.n	8004968 <HAL_TIM_PWM_Start+0x170>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a4f      	ldr	r2, [pc, #316]	@ (8004a64 <HAL_TIM_PWM_Start+0x26c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d01d      	beq.n	8004968 <HAL_TIM_PWM_Start+0x170>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a4d      	ldr	r2, [pc, #308]	@ (8004a68 <HAL_TIM_PWM_Start+0x270>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d018      	beq.n	8004968 <HAL_TIM_PWM_Start+0x170>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a4c      	ldr	r2, [pc, #304]	@ (8004a6c <HAL_TIM_PWM_Start+0x274>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d013      	beq.n	8004968 <HAL_TIM_PWM_Start+0x170>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a4a      	ldr	r2, [pc, #296]	@ (8004a70 <HAL_TIM_PWM_Start+0x278>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d00e      	beq.n	8004968 <HAL_TIM_PWM_Start+0x170>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a49      	ldr	r2, [pc, #292]	@ (8004a74 <HAL_TIM_PWM_Start+0x27c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d009      	beq.n	8004968 <HAL_TIM_PWM_Start+0x170>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a47      	ldr	r2, [pc, #284]	@ (8004a78 <HAL_TIM_PWM_Start+0x280>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d004      	beq.n	8004968 <HAL_TIM_PWM_Start+0x170>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a46      	ldr	r2, [pc, #280]	@ (8004a7c <HAL_TIM_PWM_Start+0x284>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d101      	bne.n	800496c <HAL_TIM_PWM_Start+0x174>
 8004968:	2301      	movs	r3, #1
 800496a:	e000      	b.n	800496e <HAL_TIM_PWM_Start+0x176>
 800496c:	2300      	movs	r3, #0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d007      	beq.n	8004982 <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004980:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a34      	ldr	r2, [pc, #208]	@ (8004a58 <HAL_TIM_PWM_Start+0x260>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d040      	beq.n	8004a0e <HAL_TIM_PWM_Start+0x216>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a32      	ldr	r2, [pc, #200]	@ (8004a5c <HAL_TIM_PWM_Start+0x264>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d03b      	beq.n	8004a0e <HAL_TIM_PWM_Start+0x216>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800499e:	d036      	beq.n	8004a0e <HAL_TIM_PWM_Start+0x216>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049a8:	d031      	beq.n	8004a0e <HAL_TIM_PWM_Start+0x216>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a34      	ldr	r2, [pc, #208]	@ (8004a80 <HAL_TIM_PWM_Start+0x288>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d02c      	beq.n	8004a0e <HAL_TIM_PWM_Start+0x216>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a32      	ldr	r2, [pc, #200]	@ (8004a84 <HAL_TIM_PWM_Start+0x28c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d027      	beq.n	8004a0e <HAL_TIM_PWM_Start+0x216>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a31      	ldr	r2, [pc, #196]	@ (8004a88 <HAL_TIM_PWM_Start+0x290>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d022      	beq.n	8004a0e <HAL_TIM_PWM_Start+0x216>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a2f      	ldr	r2, [pc, #188]	@ (8004a8c <HAL_TIM_PWM_Start+0x294>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d01d      	beq.n	8004a0e <HAL_TIM_PWM_Start+0x216>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a2e      	ldr	r2, [pc, #184]	@ (8004a90 <HAL_TIM_PWM_Start+0x298>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d018      	beq.n	8004a0e <HAL_TIM_PWM_Start+0x216>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a2c      	ldr	r2, [pc, #176]	@ (8004a94 <HAL_TIM_PWM_Start+0x29c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d013      	beq.n	8004a0e <HAL_TIM_PWM_Start+0x216>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a1d      	ldr	r2, [pc, #116]	@ (8004a60 <HAL_TIM_PWM_Start+0x268>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d00e      	beq.n	8004a0e <HAL_TIM_PWM_Start+0x216>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a1b      	ldr	r2, [pc, #108]	@ (8004a64 <HAL_TIM_PWM_Start+0x26c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d009      	beq.n	8004a0e <HAL_TIM_PWM_Start+0x216>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a1a      	ldr	r2, [pc, #104]	@ (8004a68 <HAL_TIM_PWM_Start+0x270>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d004      	beq.n	8004a0e <HAL_TIM_PWM_Start+0x216>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a18      	ldr	r2, [pc, #96]	@ (8004a6c <HAL_TIM_PWM_Start+0x274>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d115      	bne.n	8004a3a <HAL_TIM_PWM_Start+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	4b20      	ldr	r3, [pc, #128]	@ (8004a98 <HAL_TIM_PWM_Start+0x2a0>)
 8004a16:	4013      	ands	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2b06      	cmp	r3, #6
 8004a1e:	d015      	beq.n	8004a4c <HAL_TIM_PWM_Start+0x254>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a26:	d011      	beq.n	8004a4c <HAL_TIM_PWM_Start+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0201 	orr.w	r2, r2, #1
 8004a36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a38:	e008      	b.n	8004a4c <HAL_TIM_PWM_Start+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f042 0201 	orr.w	r2, r2, #1
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	e000      	b.n	8004a4e <HAL_TIM_PWM_Start+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	40012c00 	.word	0x40012c00
 8004a5c:	50012c00 	.word	0x50012c00
 8004a60:	40013400 	.word	0x40013400
 8004a64:	50013400 	.word	0x50013400
 8004a68:	40014000 	.word	0x40014000
 8004a6c:	50014000 	.word	0x50014000
 8004a70:	40014400 	.word	0x40014400
 8004a74:	50014400 	.word	0x50014400
 8004a78:	40014800 	.word	0x40014800
 8004a7c:	50014800 	.word	0x50014800
 8004a80:	40000400 	.word	0x40000400
 8004a84:	50000400 	.word	0x50000400
 8004a88:	40000800 	.word	0x40000800
 8004a8c:	50000800 	.word	0x50000800
 8004a90:	40000c00 	.word	0x40000c00
 8004a94:	50000c00 	.word	0x50000c00
 8004a98:	00010007 	.word	0x00010007

08004a9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d101      	bne.n	8004aba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	e0ff      	b.n	8004cba <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b14      	cmp	r3, #20
 8004ac6:	f200 80f0 	bhi.w	8004caa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004aca:	a201      	add	r2, pc, #4	@ (adr r2, 8004ad0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad0:	08004b25 	.word	0x08004b25
 8004ad4:	08004cab 	.word	0x08004cab
 8004ad8:	08004cab 	.word	0x08004cab
 8004adc:	08004cab 	.word	0x08004cab
 8004ae0:	08004b65 	.word	0x08004b65
 8004ae4:	08004cab 	.word	0x08004cab
 8004ae8:	08004cab 	.word	0x08004cab
 8004aec:	08004cab 	.word	0x08004cab
 8004af0:	08004ba7 	.word	0x08004ba7
 8004af4:	08004cab 	.word	0x08004cab
 8004af8:	08004cab 	.word	0x08004cab
 8004afc:	08004cab 	.word	0x08004cab
 8004b00:	08004be7 	.word	0x08004be7
 8004b04:	08004cab 	.word	0x08004cab
 8004b08:	08004cab 	.word	0x08004cab
 8004b0c:	08004cab 	.word	0x08004cab
 8004b10:	08004c29 	.word	0x08004c29
 8004b14:	08004cab 	.word	0x08004cab
 8004b18:	08004cab 	.word	0x08004cab
 8004b1c:	08004cab 	.word	0x08004cab
 8004b20:	08004c69 	.word	0x08004c69
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68b9      	ldr	r1, [r7, #8]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 f9ca 	bl	8004ec4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699a      	ldr	r2, [r3, #24]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0208 	orr.w	r2, r2, #8
 8004b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699a      	ldr	r2, [r3, #24]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 0204 	bic.w	r2, r2, #4
 8004b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6999      	ldr	r1, [r3, #24]
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	691a      	ldr	r2, [r3, #16]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	619a      	str	r2, [r3, #24]
      break;
 8004b62:	e0a5      	b.n	8004cb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68b9      	ldr	r1, [r7, #8]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 fa6c 	bl	8005048 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	699a      	ldr	r2, [r3, #24]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699a      	ldr	r2, [r3, #24]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6999      	ldr	r1, [r3, #24]
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	021a      	lsls	r2, r3, #8
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	619a      	str	r2, [r3, #24]
      break;
 8004ba4:	e084      	b.n	8004cb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68b9      	ldr	r1, [r7, #8]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 fafb 	bl	80051a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	69da      	ldr	r2, [r3, #28]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f042 0208 	orr.w	r2, r2, #8
 8004bc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69da      	ldr	r2, [r3, #28]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 0204 	bic.w	r2, r2, #4
 8004bd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	69d9      	ldr	r1, [r3, #28]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	691a      	ldr	r2, [r3, #16]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	61da      	str	r2, [r3, #28]
      break;
 8004be4:	e064      	b.n	8004cb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68b9      	ldr	r1, [r7, #8]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f000 fb89 	bl	8005304 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	69da      	ldr	r2, [r3, #28]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69da      	ldr	r2, [r3, #28]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	69d9      	ldr	r1, [r3, #28]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	021a      	lsls	r2, r3, #8
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	61da      	str	r2, [r3, #28]
      break;
 8004c26:	e043      	b.n	8004cb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68b9      	ldr	r1, [r7, #8]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fc18 	bl	8005464 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0208 	orr.w	r2, r2, #8
 8004c42:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0204 	bic.w	r2, r2, #4
 8004c52:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	691a      	ldr	r2, [r3, #16]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004c66:	e023      	b.n	8004cb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68b9      	ldr	r1, [r7, #8]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fc7a 	bl	8005568 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c82:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c92:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	021a      	lsls	r2, r3, #8
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004ca8:	e002      	b.n	8004cb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	75fb      	strb	r3, [r7, #23]
      break;
 8004cae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop

08004cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a6b      	ldr	r2, [pc, #428]	@ (8004e84 <TIM_Base_SetConfig+0x1c0>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d02b      	beq.n	8004d34 <TIM_Base_SetConfig+0x70>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a6a      	ldr	r2, [pc, #424]	@ (8004e88 <TIM_Base_SetConfig+0x1c4>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d027      	beq.n	8004d34 <TIM_Base_SetConfig+0x70>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cea:	d023      	beq.n	8004d34 <TIM_Base_SetConfig+0x70>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cf2:	d01f      	beq.n	8004d34 <TIM_Base_SetConfig+0x70>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a65      	ldr	r2, [pc, #404]	@ (8004e8c <TIM_Base_SetConfig+0x1c8>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d01b      	beq.n	8004d34 <TIM_Base_SetConfig+0x70>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a64      	ldr	r2, [pc, #400]	@ (8004e90 <TIM_Base_SetConfig+0x1cc>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d017      	beq.n	8004d34 <TIM_Base_SetConfig+0x70>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a63      	ldr	r2, [pc, #396]	@ (8004e94 <TIM_Base_SetConfig+0x1d0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d013      	beq.n	8004d34 <TIM_Base_SetConfig+0x70>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a62      	ldr	r2, [pc, #392]	@ (8004e98 <TIM_Base_SetConfig+0x1d4>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d00f      	beq.n	8004d34 <TIM_Base_SetConfig+0x70>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a61      	ldr	r2, [pc, #388]	@ (8004e9c <TIM_Base_SetConfig+0x1d8>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00b      	beq.n	8004d34 <TIM_Base_SetConfig+0x70>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a60      	ldr	r2, [pc, #384]	@ (8004ea0 <TIM_Base_SetConfig+0x1dc>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d007      	beq.n	8004d34 <TIM_Base_SetConfig+0x70>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a5f      	ldr	r2, [pc, #380]	@ (8004ea4 <TIM_Base_SetConfig+0x1e0>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d003      	beq.n	8004d34 <TIM_Base_SetConfig+0x70>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a5e      	ldr	r2, [pc, #376]	@ (8004ea8 <TIM_Base_SetConfig+0x1e4>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d108      	bne.n	8004d46 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a4e      	ldr	r2, [pc, #312]	@ (8004e84 <TIM_Base_SetConfig+0x1c0>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d043      	beq.n	8004dd6 <TIM_Base_SetConfig+0x112>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a4d      	ldr	r2, [pc, #308]	@ (8004e88 <TIM_Base_SetConfig+0x1c4>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d03f      	beq.n	8004dd6 <TIM_Base_SetConfig+0x112>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d5c:	d03b      	beq.n	8004dd6 <TIM_Base_SetConfig+0x112>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d64:	d037      	beq.n	8004dd6 <TIM_Base_SetConfig+0x112>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a48      	ldr	r2, [pc, #288]	@ (8004e8c <TIM_Base_SetConfig+0x1c8>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d033      	beq.n	8004dd6 <TIM_Base_SetConfig+0x112>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a47      	ldr	r2, [pc, #284]	@ (8004e90 <TIM_Base_SetConfig+0x1cc>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d02f      	beq.n	8004dd6 <TIM_Base_SetConfig+0x112>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a46      	ldr	r2, [pc, #280]	@ (8004e94 <TIM_Base_SetConfig+0x1d0>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d02b      	beq.n	8004dd6 <TIM_Base_SetConfig+0x112>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a45      	ldr	r2, [pc, #276]	@ (8004e98 <TIM_Base_SetConfig+0x1d4>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d027      	beq.n	8004dd6 <TIM_Base_SetConfig+0x112>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a44      	ldr	r2, [pc, #272]	@ (8004e9c <TIM_Base_SetConfig+0x1d8>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d023      	beq.n	8004dd6 <TIM_Base_SetConfig+0x112>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a43      	ldr	r2, [pc, #268]	@ (8004ea0 <TIM_Base_SetConfig+0x1dc>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d01f      	beq.n	8004dd6 <TIM_Base_SetConfig+0x112>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a42      	ldr	r2, [pc, #264]	@ (8004ea4 <TIM_Base_SetConfig+0x1e0>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d01b      	beq.n	8004dd6 <TIM_Base_SetConfig+0x112>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a41      	ldr	r2, [pc, #260]	@ (8004ea8 <TIM_Base_SetConfig+0x1e4>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d017      	beq.n	8004dd6 <TIM_Base_SetConfig+0x112>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a40      	ldr	r2, [pc, #256]	@ (8004eac <TIM_Base_SetConfig+0x1e8>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d013      	beq.n	8004dd6 <TIM_Base_SetConfig+0x112>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a3f      	ldr	r2, [pc, #252]	@ (8004eb0 <TIM_Base_SetConfig+0x1ec>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d00f      	beq.n	8004dd6 <TIM_Base_SetConfig+0x112>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a3e      	ldr	r2, [pc, #248]	@ (8004eb4 <TIM_Base_SetConfig+0x1f0>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00b      	beq.n	8004dd6 <TIM_Base_SetConfig+0x112>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a3d      	ldr	r2, [pc, #244]	@ (8004eb8 <TIM_Base_SetConfig+0x1f4>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d007      	beq.n	8004dd6 <TIM_Base_SetConfig+0x112>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a3c      	ldr	r2, [pc, #240]	@ (8004ebc <TIM_Base_SetConfig+0x1f8>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d003      	beq.n	8004dd6 <TIM_Base_SetConfig+0x112>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a3b      	ldr	r2, [pc, #236]	@ (8004ec0 <TIM_Base_SetConfig+0x1fc>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d108      	bne.n	8004de8 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	689a      	ldr	r2, [r3, #8]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a1e      	ldr	r2, [pc, #120]	@ (8004e84 <TIM_Base_SetConfig+0x1c0>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d023      	beq.n	8004e56 <TIM_Base_SetConfig+0x192>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a1d      	ldr	r2, [pc, #116]	@ (8004e88 <TIM_Base_SetConfig+0x1c4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d01f      	beq.n	8004e56 <TIM_Base_SetConfig+0x192>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a22      	ldr	r2, [pc, #136]	@ (8004ea4 <TIM_Base_SetConfig+0x1e0>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d01b      	beq.n	8004e56 <TIM_Base_SetConfig+0x192>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a21      	ldr	r2, [pc, #132]	@ (8004ea8 <TIM_Base_SetConfig+0x1e4>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d017      	beq.n	8004e56 <TIM_Base_SetConfig+0x192>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a20      	ldr	r2, [pc, #128]	@ (8004eac <TIM_Base_SetConfig+0x1e8>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d013      	beq.n	8004e56 <TIM_Base_SetConfig+0x192>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a1f      	ldr	r2, [pc, #124]	@ (8004eb0 <TIM_Base_SetConfig+0x1ec>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00f      	beq.n	8004e56 <TIM_Base_SetConfig+0x192>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a1e      	ldr	r2, [pc, #120]	@ (8004eb4 <TIM_Base_SetConfig+0x1f0>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d00b      	beq.n	8004e56 <TIM_Base_SetConfig+0x192>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a1d      	ldr	r2, [pc, #116]	@ (8004eb8 <TIM_Base_SetConfig+0x1f4>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d007      	beq.n	8004e56 <TIM_Base_SetConfig+0x192>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a1c      	ldr	r2, [pc, #112]	@ (8004ebc <TIM_Base_SetConfig+0x1f8>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d003      	beq.n	8004e56 <TIM_Base_SetConfig+0x192>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a1b      	ldr	r2, [pc, #108]	@ (8004ec0 <TIM_Base_SetConfig+0x1fc>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d103      	bne.n	8004e5e <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	691a      	ldr	r2, [r3, #16]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f043 0204 	orr.w	r2, r3, #4
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	601a      	str	r2, [r3, #0]
}
 8004e76:	bf00      	nop
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	40012c00 	.word	0x40012c00
 8004e88:	50012c00 	.word	0x50012c00
 8004e8c:	40000400 	.word	0x40000400
 8004e90:	50000400 	.word	0x50000400
 8004e94:	40000800 	.word	0x40000800
 8004e98:	50000800 	.word	0x50000800
 8004e9c:	40000c00 	.word	0x40000c00
 8004ea0:	50000c00 	.word	0x50000c00
 8004ea4:	40013400 	.word	0x40013400
 8004ea8:	50013400 	.word	0x50013400
 8004eac:	40014000 	.word	0x40014000
 8004eb0:	50014000 	.word	0x50014000
 8004eb4:	40014400 	.word	0x40014400
 8004eb8:	50014400 	.word	0x50014400
 8004ebc:	40014800 	.word	0x40014800
 8004ec0:	50014800 	.word	0x50014800

08004ec4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	f023 0201 	bic.w	r2, r3, #1
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ef2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0303 	bic.w	r3, r3, #3
 8004efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f023 0302 	bic.w	r3, r3, #2
 8004f10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a40      	ldr	r2, [pc, #256]	@ (8005020 <TIM_OC1_SetConfig+0x15c>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d023      	beq.n	8004f6c <TIM_OC1_SetConfig+0xa8>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a3f      	ldr	r2, [pc, #252]	@ (8005024 <TIM_OC1_SetConfig+0x160>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d01f      	beq.n	8004f6c <TIM_OC1_SetConfig+0xa8>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a3e      	ldr	r2, [pc, #248]	@ (8005028 <TIM_OC1_SetConfig+0x164>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d01b      	beq.n	8004f6c <TIM_OC1_SetConfig+0xa8>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a3d      	ldr	r2, [pc, #244]	@ (800502c <TIM_OC1_SetConfig+0x168>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d017      	beq.n	8004f6c <TIM_OC1_SetConfig+0xa8>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a3c      	ldr	r2, [pc, #240]	@ (8005030 <TIM_OC1_SetConfig+0x16c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d013      	beq.n	8004f6c <TIM_OC1_SetConfig+0xa8>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a3b      	ldr	r2, [pc, #236]	@ (8005034 <TIM_OC1_SetConfig+0x170>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d00f      	beq.n	8004f6c <TIM_OC1_SetConfig+0xa8>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a3a      	ldr	r2, [pc, #232]	@ (8005038 <TIM_OC1_SetConfig+0x174>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d00b      	beq.n	8004f6c <TIM_OC1_SetConfig+0xa8>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a39      	ldr	r2, [pc, #228]	@ (800503c <TIM_OC1_SetConfig+0x178>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d007      	beq.n	8004f6c <TIM_OC1_SetConfig+0xa8>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a38      	ldr	r2, [pc, #224]	@ (8005040 <TIM_OC1_SetConfig+0x17c>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d003      	beq.n	8004f6c <TIM_OC1_SetConfig+0xa8>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a37      	ldr	r2, [pc, #220]	@ (8005044 <TIM_OC1_SetConfig+0x180>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d10c      	bne.n	8004f86 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f023 0308 	bic.w	r3, r3, #8
 8004f72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f023 0304 	bic.w	r3, r3, #4
 8004f84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a25      	ldr	r2, [pc, #148]	@ (8005020 <TIM_OC1_SetConfig+0x15c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d023      	beq.n	8004fd6 <TIM_OC1_SetConfig+0x112>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a24      	ldr	r2, [pc, #144]	@ (8005024 <TIM_OC1_SetConfig+0x160>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d01f      	beq.n	8004fd6 <TIM_OC1_SetConfig+0x112>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a23      	ldr	r2, [pc, #140]	@ (8005028 <TIM_OC1_SetConfig+0x164>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d01b      	beq.n	8004fd6 <TIM_OC1_SetConfig+0x112>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a22      	ldr	r2, [pc, #136]	@ (800502c <TIM_OC1_SetConfig+0x168>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d017      	beq.n	8004fd6 <TIM_OC1_SetConfig+0x112>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a21      	ldr	r2, [pc, #132]	@ (8005030 <TIM_OC1_SetConfig+0x16c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d013      	beq.n	8004fd6 <TIM_OC1_SetConfig+0x112>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a20      	ldr	r2, [pc, #128]	@ (8005034 <TIM_OC1_SetConfig+0x170>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d00f      	beq.n	8004fd6 <TIM_OC1_SetConfig+0x112>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8005038 <TIM_OC1_SetConfig+0x174>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00b      	beq.n	8004fd6 <TIM_OC1_SetConfig+0x112>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a1e      	ldr	r2, [pc, #120]	@ (800503c <TIM_OC1_SetConfig+0x178>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d007      	beq.n	8004fd6 <TIM_OC1_SetConfig+0x112>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8005040 <TIM_OC1_SetConfig+0x17c>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d003      	beq.n	8004fd6 <TIM_OC1_SetConfig+0x112>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a1c      	ldr	r2, [pc, #112]	@ (8005044 <TIM_OC1_SetConfig+0x180>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d111      	bne.n	8004ffa <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	621a      	str	r2, [r3, #32]
}
 8005014:	bf00      	nop
 8005016:	371c      	adds	r7, #28
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr
 8005020:	40012c00 	.word	0x40012c00
 8005024:	50012c00 	.word	0x50012c00
 8005028:	40013400 	.word	0x40013400
 800502c:	50013400 	.word	0x50013400
 8005030:	40014000 	.word	0x40014000
 8005034:	50014000 	.word	0x50014000
 8005038:	40014400 	.word	0x40014400
 800503c:	50014400 	.word	0x50014400
 8005040:	40014800 	.word	0x40014800
 8005044:	50014800 	.word	0x50014800

08005048 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005048:	b480      	push	{r7}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	f023 0210 	bic.w	r2, r3, #16
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005076:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800507a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005082:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	021b      	lsls	r3, r3, #8
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	4313      	orrs	r3, r2
 800508e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f023 0320 	bic.w	r3, r3, #32
 8005096:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	011b      	lsls	r3, r3, #4
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a36      	ldr	r2, [pc, #216]	@ (8005180 <TIM_OC2_SetConfig+0x138>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d00b      	beq.n	80050c4 <TIM_OC2_SetConfig+0x7c>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a35      	ldr	r2, [pc, #212]	@ (8005184 <TIM_OC2_SetConfig+0x13c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d007      	beq.n	80050c4 <TIM_OC2_SetConfig+0x7c>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a34      	ldr	r2, [pc, #208]	@ (8005188 <TIM_OC2_SetConfig+0x140>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d003      	beq.n	80050c4 <TIM_OC2_SetConfig+0x7c>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a33      	ldr	r2, [pc, #204]	@ (800518c <TIM_OC2_SetConfig+0x144>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d10d      	bne.n	80050e0 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	011b      	lsls	r3, r3, #4
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a27      	ldr	r2, [pc, #156]	@ (8005180 <TIM_OC2_SetConfig+0x138>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d023      	beq.n	8005130 <TIM_OC2_SetConfig+0xe8>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a26      	ldr	r2, [pc, #152]	@ (8005184 <TIM_OC2_SetConfig+0x13c>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d01f      	beq.n	8005130 <TIM_OC2_SetConfig+0xe8>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a25      	ldr	r2, [pc, #148]	@ (8005188 <TIM_OC2_SetConfig+0x140>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d01b      	beq.n	8005130 <TIM_OC2_SetConfig+0xe8>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a24      	ldr	r2, [pc, #144]	@ (800518c <TIM_OC2_SetConfig+0x144>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d017      	beq.n	8005130 <TIM_OC2_SetConfig+0xe8>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a23      	ldr	r2, [pc, #140]	@ (8005190 <TIM_OC2_SetConfig+0x148>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d013      	beq.n	8005130 <TIM_OC2_SetConfig+0xe8>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a22      	ldr	r2, [pc, #136]	@ (8005194 <TIM_OC2_SetConfig+0x14c>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d00f      	beq.n	8005130 <TIM_OC2_SetConfig+0xe8>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a21      	ldr	r2, [pc, #132]	@ (8005198 <TIM_OC2_SetConfig+0x150>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d00b      	beq.n	8005130 <TIM_OC2_SetConfig+0xe8>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a20      	ldr	r2, [pc, #128]	@ (800519c <TIM_OC2_SetConfig+0x154>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d007      	beq.n	8005130 <TIM_OC2_SetConfig+0xe8>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a1f      	ldr	r2, [pc, #124]	@ (80051a0 <TIM_OC2_SetConfig+0x158>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d003      	beq.n	8005130 <TIM_OC2_SetConfig+0xe8>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a1e      	ldr	r2, [pc, #120]	@ (80051a4 <TIM_OC2_SetConfig+0x15c>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d113      	bne.n	8005158 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005136:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800513e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	4313      	orrs	r3, r2
 800514a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	4313      	orrs	r3, r2
 8005156:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	621a      	str	r2, [r3, #32]
}
 8005172:	bf00      	nop
 8005174:	371c      	adds	r7, #28
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	40012c00 	.word	0x40012c00
 8005184:	50012c00 	.word	0x50012c00
 8005188:	40013400 	.word	0x40013400
 800518c:	50013400 	.word	0x50013400
 8005190:	40014000 	.word	0x40014000
 8005194:	50014000 	.word	0x50014000
 8005198:	40014400 	.word	0x40014400
 800519c:	50014400 	.word	0x50014400
 80051a0:	40014800 	.word	0x40014800
 80051a4:	50014800 	.word	0x50014800

080051a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f023 0303 	bic.w	r3, r3, #3
 80051e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80051f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	021b      	lsls	r3, r3, #8
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	4313      	orrs	r3, r2
 8005200:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a35      	ldr	r2, [pc, #212]	@ (80052dc <TIM_OC3_SetConfig+0x134>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d00b      	beq.n	8005222 <TIM_OC3_SetConfig+0x7a>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a34      	ldr	r2, [pc, #208]	@ (80052e0 <TIM_OC3_SetConfig+0x138>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d007      	beq.n	8005222 <TIM_OC3_SetConfig+0x7a>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a33      	ldr	r2, [pc, #204]	@ (80052e4 <TIM_OC3_SetConfig+0x13c>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d003      	beq.n	8005222 <TIM_OC3_SetConfig+0x7a>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a32      	ldr	r2, [pc, #200]	@ (80052e8 <TIM_OC3_SetConfig+0x140>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d10d      	bne.n	800523e <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005228:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	021b      	lsls	r3, r3, #8
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	4313      	orrs	r3, r2
 8005234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800523c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a26      	ldr	r2, [pc, #152]	@ (80052dc <TIM_OC3_SetConfig+0x134>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d023      	beq.n	800528e <TIM_OC3_SetConfig+0xe6>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a25      	ldr	r2, [pc, #148]	@ (80052e0 <TIM_OC3_SetConfig+0x138>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d01f      	beq.n	800528e <TIM_OC3_SetConfig+0xe6>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a24      	ldr	r2, [pc, #144]	@ (80052e4 <TIM_OC3_SetConfig+0x13c>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d01b      	beq.n	800528e <TIM_OC3_SetConfig+0xe6>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a23      	ldr	r2, [pc, #140]	@ (80052e8 <TIM_OC3_SetConfig+0x140>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d017      	beq.n	800528e <TIM_OC3_SetConfig+0xe6>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a22      	ldr	r2, [pc, #136]	@ (80052ec <TIM_OC3_SetConfig+0x144>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d013      	beq.n	800528e <TIM_OC3_SetConfig+0xe6>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a21      	ldr	r2, [pc, #132]	@ (80052f0 <TIM_OC3_SetConfig+0x148>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d00f      	beq.n	800528e <TIM_OC3_SetConfig+0xe6>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a20      	ldr	r2, [pc, #128]	@ (80052f4 <TIM_OC3_SetConfig+0x14c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d00b      	beq.n	800528e <TIM_OC3_SetConfig+0xe6>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a1f      	ldr	r2, [pc, #124]	@ (80052f8 <TIM_OC3_SetConfig+0x150>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d007      	beq.n	800528e <TIM_OC3_SetConfig+0xe6>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a1e      	ldr	r2, [pc, #120]	@ (80052fc <TIM_OC3_SetConfig+0x154>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d003      	beq.n	800528e <TIM_OC3_SetConfig+0xe6>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a1d      	ldr	r2, [pc, #116]	@ (8005300 <TIM_OC3_SetConfig+0x158>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d113      	bne.n	80052b6 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800529c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	011b      	lsls	r3, r3, #4
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	621a      	str	r2, [r3, #32]
}
 80052d0:	bf00      	nop
 80052d2:	371c      	adds	r7, #28
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	40012c00 	.word	0x40012c00
 80052e0:	50012c00 	.word	0x50012c00
 80052e4:	40013400 	.word	0x40013400
 80052e8:	50013400 	.word	0x50013400
 80052ec:	40014000 	.word	0x40014000
 80052f0:	50014000 	.word	0x50014000
 80052f4:	40014400 	.word	0x40014400
 80052f8:	50014400 	.word	0x50014400
 80052fc:	40014800 	.word	0x40014800
 8005300:	50014800 	.word	0x50014800

08005304 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005304:	b480      	push	{r7}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005332:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800533e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	021b      	lsls	r3, r3, #8
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	4313      	orrs	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005352:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	031b      	lsls	r3, r3, #12
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	4313      	orrs	r3, r2
 800535e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a36      	ldr	r2, [pc, #216]	@ (800543c <TIM_OC4_SetConfig+0x138>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d00b      	beq.n	8005380 <TIM_OC4_SetConfig+0x7c>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a35      	ldr	r2, [pc, #212]	@ (8005440 <TIM_OC4_SetConfig+0x13c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d007      	beq.n	8005380 <TIM_OC4_SetConfig+0x7c>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a34      	ldr	r2, [pc, #208]	@ (8005444 <TIM_OC4_SetConfig+0x140>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d003      	beq.n	8005380 <TIM_OC4_SetConfig+0x7c>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a33      	ldr	r2, [pc, #204]	@ (8005448 <TIM_OC4_SetConfig+0x144>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d10d      	bne.n	800539c <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	031b      	lsls	r3, r3, #12
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	4313      	orrs	r3, r2
 8005392:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800539a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a27      	ldr	r2, [pc, #156]	@ (800543c <TIM_OC4_SetConfig+0x138>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d023      	beq.n	80053ec <TIM_OC4_SetConfig+0xe8>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a26      	ldr	r2, [pc, #152]	@ (8005440 <TIM_OC4_SetConfig+0x13c>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d01f      	beq.n	80053ec <TIM_OC4_SetConfig+0xe8>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a25      	ldr	r2, [pc, #148]	@ (8005444 <TIM_OC4_SetConfig+0x140>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d01b      	beq.n	80053ec <TIM_OC4_SetConfig+0xe8>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a24      	ldr	r2, [pc, #144]	@ (8005448 <TIM_OC4_SetConfig+0x144>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d017      	beq.n	80053ec <TIM_OC4_SetConfig+0xe8>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a23      	ldr	r2, [pc, #140]	@ (800544c <TIM_OC4_SetConfig+0x148>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d013      	beq.n	80053ec <TIM_OC4_SetConfig+0xe8>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a22      	ldr	r2, [pc, #136]	@ (8005450 <TIM_OC4_SetConfig+0x14c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00f      	beq.n	80053ec <TIM_OC4_SetConfig+0xe8>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a21      	ldr	r2, [pc, #132]	@ (8005454 <TIM_OC4_SetConfig+0x150>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d00b      	beq.n	80053ec <TIM_OC4_SetConfig+0xe8>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a20      	ldr	r2, [pc, #128]	@ (8005458 <TIM_OC4_SetConfig+0x154>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d007      	beq.n	80053ec <TIM_OC4_SetConfig+0xe8>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a1f      	ldr	r2, [pc, #124]	@ (800545c <TIM_OC4_SetConfig+0x158>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d003      	beq.n	80053ec <TIM_OC4_SetConfig+0xe8>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a1e      	ldr	r2, [pc, #120]	@ (8005460 <TIM_OC4_SetConfig+0x15c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d113      	bne.n	8005414 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053f2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80053fa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	019b      	lsls	r3, r3, #6
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4313      	orrs	r3, r2
 8005406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	019b      	lsls	r3, r3, #6
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	4313      	orrs	r3, r2
 8005412:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	621a      	str	r2, [r3, #32]
}
 800542e:	bf00      	nop
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	40012c00 	.word	0x40012c00
 8005440:	50012c00 	.word	0x50012c00
 8005444:	40013400 	.word	0x40013400
 8005448:	50013400 	.word	0x50013400
 800544c:	40014000 	.word	0x40014000
 8005450:	50014000 	.word	0x50014000
 8005454:	40014400 	.word	0x40014400
 8005458:	50014400 	.word	0x50014400
 800545c:	40014800 	.word	0x40014800
 8005460:	50014800 	.word	0x50014800

08005464 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005464:	b480      	push	{r7}
 8005466:	b087      	sub	sp, #28
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800548a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80054a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	041b      	lsls	r3, r3, #16
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a21      	ldr	r2, [pc, #132]	@ (8005540 <TIM_OC5_SetConfig+0xdc>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d023      	beq.n	8005506 <TIM_OC5_SetConfig+0xa2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a20      	ldr	r2, [pc, #128]	@ (8005544 <TIM_OC5_SetConfig+0xe0>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d01f      	beq.n	8005506 <TIM_OC5_SetConfig+0xa2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a1f      	ldr	r2, [pc, #124]	@ (8005548 <TIM_OC5_SetConfig+0xe4>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d01b      	beq.n	8005506 <TIM_OC5_SetConfig+0xa2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a1e      	ldr	r2, [pc, #120]	@ (800554c <TIM_OC5_SetConfig+0xe8>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d017      	beq.n	8005506 <TIM_OC5_SetConfig+0xa2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005550 <TIM_OC5_SetConfig+0xec>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d013      	beq.n	8005506 <TIM_OC5_SetConfig+0xa2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005554 <TIM_OC5_SetConfig+0xf0>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d00f      	beq.n	8005506 <TIM_OC5_SetConfig+0xa2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a1b      	ldr	r2, [pc, #108]	@ (8005558 <TIM_OC5_SetConfig+0xf4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d00b      	beq.n	8005506 <TIM_OC5_SetConfig+0xa2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a1a      	ldr	r2, [pc, #104]	@ (800555c <TIM_OC5_SetConfig+0xf8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d007      	beq.n	8005506 <TIM_OC5_SetConfig+0xa2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a19      	ldr	r2, [pc, #100]	@ (8005560 <TIM_OC5_SetConfig+0xfc>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d003      	beq.n	8005506 <TIM_OC5_SetConfig+0xa2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a18      	ldr	r2, [pc, #96]	@ (8005564 <TIM_OC5_SetConfig+0x100>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d109      	bne.n	800551a <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800550c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	021b      	lsls	r3, r3, #8
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	4313      	orrs	r3, r2
 8005518:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	621a      	str	r2, [r3, #32]
}
 8005534:	bf00      	nop
 8005536:	371c      	adds	r7, #28
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	40012c00 	.word	0x40012c00
 8005544:	50012c00 	.word	0x50012c00
 8005548:	40013400 	.word	0x40013400
 800554c:	50013400 	.word	0x50013400
 8005550:	40014000 	.word	0x40014000
 8005554:	50014000 	.word	0x50014000
 8005558:	40014400 	.word	0x40014400
 800555c:	50014400 	.word	0x50014400
 8005560:	40014800 	.word	0x40014800
 8005564:	50014800 	.word	0x50014800

08005568 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800558e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005596:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800559a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	021b      	lsls	r3, r3, #8
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80055ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	051b      	lsls	r3, r3, #20
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a22      	ldr	r2, [pc, #136]	@ (8005648 <TIM_OC6_SetConfig+0xe0>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d023      	beq.n	800560c <TIM_OC6_SetConfig+0xa4>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a21      	ldr	r2, [pc, #132]	@ (800564c <TIM_OC6_SetConfig+0xe4>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d01f      	beq.n	800560c <TIM_OC6_SetConfig+0xa4>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a20      	ldr	r2, [pc, #128]	@ (8005650 <TIM_OC6_SetConfig+0xe8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d01b      	beq.n	800560c <TIM_OC6_SetConfig+0xa4>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a1f      	ldr	r2, [pc, #124]	@ (8005654 <TIM_OC6_SetConfig+0xec>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d017      	beq.n	800560c <TIM_OC6_SetConfig+0xa4>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a1e      	ldr	r2, [pc, #120]	@ (8005658 <TIM_OC6_SetConfig+0xf0>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d013      	beq.n	800560c <TIM_OC6_SetConfig+0xa4>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a1d      	ldr	r2, [pc, #116]	@ (800565c <TIM_OC6_SetConfig+0xf4>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00f      	beq.n	800560c <TIM_OC6_SetConfig+0xa4>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005660 <TIM_OC6_SetConfig+0xf8>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d00b      	beq.n	800560c <TIM_OC6_SetConfig+0xa4>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a1b      	ldr	r2, [pc, #108]	@ (8005664 <TIM_OC6_SetConfig+0xfc>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d007      	beq.n	800560c <TIM_OC6_SetConfig+0xa4>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a1a      	ldr	r2, [pc, #104]	@ (8005668 <TIM_OC6_SetConfig+0x100>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d003      	beq.n	800560c <TIM_OC6_SetConfig+0xa4>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a19      	ldr	r2, [pc, #100]	@ (800566c <TIM_OC6_SetConfig+0x104>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d109      	bne.n	8005620 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005612:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	029b      	lsls	r3, r3, #10
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4313      	orrs	r3, r2
 800561e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	621a      	str	r2, [r3, #32]
}
 800563a:	bf00      	nop
 800563c:	371c      	adds	r7, #28
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	40012c00 	.word	0x40012c00
 800564c:	50012c00 	.word	0x50012c00
 8005650:	40013400 	.word	0x40013400
 8005654:	50013400 	.word	0x50013400
 8005658:	40014000 	.word	0x40014000
 800565c:	50014000 	.word	0x50014000
 8005660:	40014400 	.word	0x40014400
 8005664:	50014400 	.word	0x50014400
 8005668:	40014800 	.word	0x40014800
 800566c:	50014800 	.word	0x50014800

08005670 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	f003 031f 	and.w	r3, r3, #31
 8005682:	2201      	movs	r2, #1
 8005684:	fa02 f303 	lsl.w	r3, r2, r3
 8005688:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6a1a      	ldr	r2, [r3, #32]
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	43db      	mvns	r3, r3
 8005692:	401a      	ands	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6a1a      	ldr	r2, [r3, #32]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f003 031f 	and.w	r3, r3, #31
 80056a2:	6879      	ldr	r1, [r7, #4]
 80056a4:	fa01 f303 	lsl.w	r3, r1, r3
 80056a8:	431a      	orrs	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	621a      	str	r2, [r3, #32]
}
 80056ae:	bf00      	nop
 80056b0:	371c      	adds	r7, #28
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
	...

080056bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d101      	bne.n	80056d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056d0:	2302      	movs	r3, #2
 80056d2:	e097      	b.n	8005804 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a45      	ldr	r2, [pc, #276]	@ (8005810 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d00e      	beq.n	800571c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a44      	ldr	r2, [pc, #272]	@ (8005814 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d009      	beq.n	800571c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a42      	ldr	r2, [pc, #264]	@ (8005818 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d004      	beq.n	800571c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a41      	ldr	r2, [pc, #260]	@ (800581c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d108      	bne.n	800572e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005722:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005734:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005738:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	4313      	orrs	r3, r2
 8005742:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a2f      	ldr	r2, [pc, #188]	@ (8005810 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d040      	beq.n	80057d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a2e      	ldr	r2, [pc, #184]	@ (8005814 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d03b      	beq.n	80057d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005768:	d036      	beq.n	80057d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005772:	d031      	beq.n	80057d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a29      	ldr	r2, [pc, #164]	@ (8005820 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d02c      	beq.n	80057d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a28      	ldr	r2, [pc, #160]	@ (8005824 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d027      	beq.n	80057d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a26      	ldr	r2, [pc, #152]	@ (8005828 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d022      	beq.n	80057d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a25      	ldr	r2, [pc, #148]	@ (800582c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d01d      	beq.n	80057d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a23      	ldr	r2, [pc, #140]	@ (8005830 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d018      	beq.n	80057d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a22      	ldr	r2, [pc, #136]	@ (8005834 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d013      	beq.n	80057d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a18      	ldr	r2, [pc, #96]	@ (8005818 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d00e      	beq.n	80057d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a17      	ldr	r2, [pc, #92]	@ (800581c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d009      	beq.n	80057d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005838 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d004      	beq.n	80057d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a1a      	ldr	r2, [pc, #104]	@ (800583c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d10c      	bne.n	80057f2 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr
 8005810:	40012c00 	.word	0x40012c00
 8005814:	50012c00 	.word	0x50012c00
 8005818:	40013400 	.word	0x40013400
 800581c:	50013400 	.word	0x50013400
 8005820:	40000400 	.word	0x40000400
 8005824:	50000400 	.word	0x50000400
 8005828:	40000800 	.word	0x40000800
 800582c:	50000800 	.word	0x50000800
 8005830:	40000c00 	.word	0x40000c00
 8005834:	50000c00 	.word	0x50000c00
 8005838:	40014000 	.word	0x40014000
 800583c:	50014000 	.word	0x50014000

08005840 <std>:
 8005840:	2300      	movs	r3, #0
 8005842:	b510      	push	{r4, lr}
 8005844:	4604      	mov	r4, r0
 8005846:	6083      	str	r3, [r0, #8]
 8005848:	8181      	strh	r1, [r0, #12]
 800584a:	4619      	mov	r1, r3
 800584c:	6643      	str	r3, [r0, #100]	@ 0x64
 800584e:	81c2      	strh	r2, [r0, #14]
 8005850:	2208      	movs	r2, #8
 8005852:	6183      	str	r3, [r0, #24]
 8005854:	e9c0 3300 	strd	r3, r3, [r0]
 8005858:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800585c:	305c      	adds	r0, #92	@ 0x5c
 800585e:	f000 f9f9 	bl	8005c54 <memset>
 8005862:	4b0d      	ldr	r3, [pc, #52]	@ (8005898 <std+0x58>)
 8005864:	6224      	str	r4, [r4, #32]
 8005866:	6263      	str	r3, [r4, #36]	@ 0x24
 8005868:	4b0c      	ldr	r3, [pc, #48]	@ (800589c <std+0x5c>)
 800586a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800586c:	4b0c      	ldr	r3, [pc, #48]	@ (80058a0 <std+0x60>)
 800586e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005870:	4b0c      	ldr	r3, [pc, #48]	@ (80058a4 <std+0x64>)
 8005872:	6323      	str	r3, [r4, #48]	@ 0x30
 8005874:	4b0c      	ldr	r3, [pc, #48]	@ (80058a8 <std+0x68>)
 8005876:	429c      	cmp	r4, r3
 8005878:	d006      	beq.n	8005888 <std+0x48>
 800587a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800587e:	4294      	cmp	r4, r2
 8005880:	d002      	beq.n	8005888 <std+0x48>
 8005882:	33d0      	adds	r3, #208	@ 0xd0
 8005884:	429c      	cmp	r4, r3
 8005886:	d105      	bne.n	8005894 <std+0x54>
 8005888:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800588c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005890:	f000 ba58 	b.w	8005d44 <__retarget_lock_init_recursive>
 8005894:	bd10      	pop	{r4, pc}
 8005896:	bf00      	nop
 8005898:	08005aa5 	.word	0x08005aa5
 800589c:	08005ac7 	.word	0x08005ac7
 80058a0:	08005aff 	.word	0x08005aff
 80058a4:	08005b23 	.word	0x08005b23
 80058a8:	2000016c 	.word	0x2000016c

080058ac <stdio_exit_handler>:
 80058ac:	4a02      	ldr	r2, [pc, #8]	@ (80058b8 <stdio_exit_handler+0xc>)
 80058ae:	4903      	ldr	r1, [pc, #12]	@ (80058bc <stdio_exit_handler+0x10>)
 80058b0:	4803      	ldr	r0, [pc, #12]	@ (80058c0 <stdio_exit_handler+0x14>)
 80058b2:	f000 b869 	b.w	8005988 <_fwalk_sglue>
 80058b6:	bf00      	nop
 80058b8:	2000000c 	.word	0x2000000c
 80058bc:	080065e9 	.word	0x080065e9
 80058c0:	2000001c 	.word	0x2000001c

080058c4 <cleanup_stdio>:
 80058c4:	6841      	ldr	r1, [r0, #4]
 80058c6:	4b0c      	ldr	r3, [pc, #48]	@ (80058f8 <cleanup_stdio+0x34>)
 80058c8:	4299      	cmp	r1, r3
 80058ca:	b510      	push	{r4, lr}
 80058cc:	4604      	mov	r4, r0
 80058ce:	d001      	beq.n	80058d4 <cleanup_stdio+0x10>
 80058d0:	f000 fe8a 	bl	80065e8 <_fflush_r>
 80058d4:	68a1      	ldr	r1, [r4, #8]
 80058d6:	4b09      	ldr	r3, [pc, #36]	@ (80058fc <cleanup_stdio+0x38>)
 80058d8:	4299      	cmp	r1, r3
 80058da:	d002      	beq.n	80058e2 <cleanup_stdio+0x1e>
 80058dc:	4620      	mov	r0, r4
 80058de:	f000 fe83 	bl	80065e8 <_fflush_r>
 80058e2:	68e1      	ldr	r1, [r4, #12]
 80058e4:	4b06      	ldr	r3, [pc, #24]	@ (8005900 <cleanup_stdio+0x3c>)
 80058e6:	4299      	cmp	r1, r3
 80058e8:	d004      	beq.n	80058f4 <cleanup_stdio+0x30>
 80058ea:	4620      	mov	r0, r4
 80058ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058f0:	f000 be7a 	b.w	80065e8 <_fflush_r>
 80058f4:	bd10      	pop	{r4, pc}
 80058f6:	bf00      	nop
 80058f8:	2000016c 	.word	0x2000016c
 80058fc:	200001d4 	.word	0x200001d4
 8005900:	2000023c 	.word	0x2000023c

08005904 <global_stdio_init.part.0>:
 8005904:	b510      	push	{r4, lr}
 8005906:	4b0b      	ldr	r3, [pc, #44]	@ (8005934 <global_stdio_init.part.0+0x30>)
 8005908:	2104      	movs	r1, #4
 800590a:	4c0b      	ldr	r4, [pc, #44]	@ (8005938 <global_stdio_init.part.0+0x34>)
 800590c:	4a0b      	ldr	r2, [pc, #44]	@ (800593c <global_stdio_init.part.0+0x38>)
 800590e:	4620      	mov	r0, r4
 8005910:	601a      	str	r2, [r3, #0]
 8005912:	2200      	movs	r2, #0
 8005914:	f7ff ff94 	bl	8005840 <std>
 8005918:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800591c:	2201      	movs	r2, #1
 800591e:	2109      	movs	r1, #9
 8005920:	f7ff ff8e 	bl	8005840 <std>
 8005924:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005928:	2202      	movs	r2, #2
 800592a:	2112      	movs	r1, #18
 800592c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005930:	f7ff bf86 	b.w	8005840 <std>
 8005934:	200002a4 	.word	0x200002a4
 8005938:	2000016c 	.word	0x2000016c
 800593c:	080058ad 	.word	0x080058ad

08005940 <__sfp_lock_acquire>:
 8005940:	4801      	ldr	r0, [pc, #4]	@ (8005948 <__sfp_lock_acquire+0x8>)
 8005942:	f000 ba00 	b.w	8005d46 <__retarget_lock_acquire_recursive>
 8005946:	bf00      	nop
 8005948:	200002ad 	.word	0x200002ad

0800594c <__sfp_lock_release>:
 800594c:	4801      	ldr	r0, [pc, #4]	@ (8005954 <__sfp_lock_release+0x8>)
 800594e:	f000 b9fb 	b.w	8005d48 <__retarget_lock_release_recursive>
 8005952:	bf00      	nop
 8005954:	200002ad 	.word	0x200002ad

08005958 <__sinit>:
 8005958:	b510      	push	{r4, lr}
 800595a:	4604      	mov	r4, r0
 800595c:	f7ff fff0 	bl	8005940 <__sfp_lock_acquire>
 8005960:	6a23      	ldr	r3, [r4, #32]
 8005962:	b11b      	cbz	r3, 800596c <__sinit+0x14>
 8005964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005968:	f7ff bff0 	b.w	800594c <__sfp_lock_release>
 800596c:	4b04      	ldr	r3, [pc, #16]	@ (8005980 <__sinit+0x28>)
 800596e:	6223      	str	r3, [r4, #32]
 8005970:	4b04      	ldr	r3, [pc, #16]	@ (8005984 <__sinit+0x2c>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1f5      	bne.n	8005964 <__sinit+0xc>
 8005978:	f7ff ffc4 	bl	8005904 <global_stdio_init.part.0>
 800597c:	e7f2      	b.n	8005964 <__sinit+0xc>
 800597e:	bf00      	nop
 8005980:	080058c5 	.word	0x080058c5
 8005984:	200002a4 	.word	0x200002a4

08005988 <_fwalk_sglue>:
 8005988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800598c:	4607      	mov	r7, r0
 800598e:	4688      	mov	r8, r1
 8005990:	4614      	mov	r4, r2
 8005992:	2600      	movs	r6, #0
 8005994:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005998:	f1b9 0901 	subs.w	r9, r9, #1
 800599c:	d505      	bpl.n	80059aa <_fwalk_sglue+0x22>
 800599e:	6824      	ldr	r4, [r4, #0]
 80059a0:	2c00      	cmp	r4, #0
 80059a2:	d1f7      	bne.n	8005994 <_fwalk_sglue+0xc>
 80059a4:	4630      	mov	r0, r6
 80059a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059aa:	89ab      	ldrh	r3, [r5, #12]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d907      	bls.n	80059c0 <_fwalk_sglue+0x38>
 80059b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059b4:	3301      	adds	r3, #1
 80059b6:	d003      	beq.n	80059c0 <_fwalk_sglue+0x38>
 80059b8:	4629      	mov	r1, r5
 80059ba:	4638      	mov	r0, r7
 80059bc:	47c0      	blx	r8
 80059be:	4306      	orrs	r6, r0
 80059c0:	3568      	adds	r5, #104	@ 0x68
 80059c2:	e7e9      	b.n	8005998 <_fwalk_sglue+0x10>

080059c4 <iprintf>:
 80059c4:	b40f      	push	{r0, r1, r2, r3}
 80059c6:	b507      	push	{r0, r1, r2, lr}
 80059c8:	4906      	ldr	r1, [pc, #24]	@ (80059e4 <iprintf+0x20>)
 80059ca:	ab04      	add	r3, sp, #16
 80059cc:	6808      	ldr	r0, [r1, #0]
 80059ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80059d2:	6881      	ldr	r1, [r0, #8]
 80059d4:	9301      	str	r3, [sp, #4]
 80059d6:	f000 fadb 	bl	8005f90 <_vfiprintf_r>
 80059da:	b003      	add	sp, #12
 80059dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80059e0:	b004      	add	sp, #16
 80059e2:	4770      	bx	lr
 80059e4:	20000018 	.word	0x20000018

080059e8 <_puts_r>:
 80059e8:	6a03      	ldr	r3, [r0, #32]
 80059ea:	b570      	push	{r4, r5, r6, lr}
 80059ec:	4605      	mov	r5, r0
 80059ee:	460e      	mov	r6, r1
 80059f0:	6884      	ldr	r4, [r0, #8]
 80059f2:	b90b      	cbnz	r3, 80059f8 <_puts_r+0x10>
 80059f4:	f7ff ffb0 	bl	8005958 <__sinit>
 80059f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059fa:	07db      	lsls	r3, r3, #31
 80059fc:	d405      	bmi.n	8005a0a <_puts_r+0x22>
 80059fe:	89a3      	ldrh	r3, [r4, #12]
 8005a00:	0598      	lsls	r0, r3, #22
 8005a02:	d402      	bmi.n	8005a0a <_puts_r+0x22>
 8005a04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a06:	f000 f99e 	bl	8005d46 <__retarget_lock_acquire_recursive>
 8005a0a:	89a3      	ldrh	r3, [r4, #12]
 8005a0c:	0719      	lsls	r1, r3, #28
 8005a0e:	d502      	bpl.n	8005a16 <_puts_r+0x2e>
 8005a10:	6923      	ldr	r3, [r4, #16]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d135      	bne.n	8005a82 <_puts_r+0x9a>
 8005a16:	4621      	mov	r1, r4
 8005a18:	4628      	mov	r0, r5
 8005a1a:	f000 f8c5 	bl	8005ba8 <__swsetup_r>
 8005a1e:	b380      	cbz	r0, 8005a82 <_puts_r+0x9a>
 8005a20:	f04f 35ff 	mov.w	r5, #4294967295
 8005a24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a26:	07da      	lsls	r2, r3, #31
 8005a28:	d405      	bmi.n	8005a36 <_puts_r+0x4e>
 8005a2a:	89a3      	ldrh	r3, [r4, #12]
 8005a2c:	059b      	lsls	r3, r3, #22
 8005a2e:	d402      	bmi.n	8005a36 <_puts_r+0x4e>
 8005a30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a32:	f000 f989 	bl	8005d48 <__retarget_lock_release_recursive>
 8005a36:	4628      	mov	r0, r5
 8005a38:	bd70      	pop	{r4, r5, r6, pc}
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	da04      	bge.n	8005a48 <_puts_r+0x60>
 8005a3e:	69a2      	ldr	r2, [r4, #24]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	dc17      	bgt.n	8005a74 <_puts_r+0x8c>
 8005a44:	290a      	cmp	r1, #10
 8005a46:	d015      	beq.n	8005a74 <_puts_r+0x8c>
 8005a48:	6823      	ldr	r3, [r4, #0]
 8005a4a:	1c5a      	adds	r2, r3, #1
 8005a4c:	6022      	str	r2, [r4, #0]
 8005a4e:	7019      	strb	r1, [r3, #0]
 8005a50:	68a3      	ldr	r3, [r4, #8]
 8005a52:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005a56:	3b01      	subs	r3, #1
 8005a58:	60a3      	str	r3, [r4, #8]
 8005a5a:	2900      	cmp	r1, #0
 8005a5c:	d1ed      	bne.n	8005a3a <_puts_r+0x52>
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	da11      	bge.n	8005a86 <_puts_r+0x9e>
 8005a62:	4622      	mov	r2, r4
 8005a64:	210a      	movs	r1, #10
 8005a66:	4628      	mov	r0, r5
 8005a68:	f000 f85f 	bl	8005b2a <__swbuf_r>
 8005a6c:	3001      	adds	r0, #1
 8005a6e:	d0d7      	beq.n	8005a20 <_puts_r+0x38>
 8005a70:	250a      	movs	r5, #10
 8005a72:	e7d7      	b.n	8005a24 <_puts_r+0x3c>
 8005a74:	4622      	mov	r2, r4
 8005a76:	4628      	mov	r0, r5
 8005a78:	f000 f857 	bl	8005b2a <__swbuf_r>
 8005a7c:	3001      	adds	r0, #1
 8005a7e:	d1e7      	bne.n	8005a50 <_puts_r+0x68>
 8005a80:	e7ce      	b.n	8005a20 <_puts_r+0x38>
 8005a82:	3e01      	subs	r6, #1
 8005a84:	e7e4      	b.n	8005a50 <_puts_r+0x68>
 8005a86:	6823      	ldr	r3, [r4, #0]
 8005a88:	1c5a      	adds	r2, r3, #1
 8005a8a:	6022      	str	r2, [r4, #0]
 8005a8c:	220a      	movs	r2, #10
 8005a8e:	701a      	strb	r2, [r3, #0]
 8005a90:	e7ee      	b.n	8005a70 <_puts_r+0x88>
	...

08005a94 <puts>:
 8005a94:	4b02      	ldr	r3, [pc, #8]	@ (8005aa0 <puts+0xc>)
 8005a96:	4601      	mov	r1, r0
 8005a98:	6818      	ldr	r0, [r3, #0]
 8005a9a:	f7ff bfa5 	b.w	80059e8 <_puts_r>
 8005a9e:	bf00      	nop
 8005aa0:	20000018 	.word	0x20000018

08005aa4 <__sread>:
 8005aa4:	b510      	push	{r4, lr}
 8005aa6:	460c      	mov	r4, r1
 8005aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aac:	f000 f8fc 	bl	8005ca8 <_read_r>
 8005ab0:	2800      	cmp	r0, #0
 8005ab2:	bfab      	itete	ge
 8005ab4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005ab6:	89a3      	ldrhlt	r3, [r4, #12]
 8005ab8:	181b      	addge	r3, r3, r0
 8005aba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005abe:	bfac      	ite	ge
 8005ac0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005ac2:	81a3      	strhlt	r3, [r4, #12]
 8005ac4:	bd10      	pop	{r4, pc}

08005ac6 <__swrite>:
 8005ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aca:	461f      	mov	r7, r3
 8005acc:	898b      	ldrh	r3, [r1, #12]
 8005ace:	4605      	mov	r5, r0
 8005ad0:	460c      	mov	r4, r1
 8005ad2:	05db      	lsls	r3, r3, #23
 8005ad4:	4616      	mov	r6, r2
 8005ad6:	d505      	bpl.n	8005ae4 <__swrite+0x1e>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	2200      	movs	r2, #0
 8005adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ae0:	f000 f8d0 	bl	8005c84 <_lseek_r>
 8005ae4:	89a3      	ldrh	r3, [r4, #12]
 8005ae6:	4632      	mov	r2, r6
 8005ae8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005aec:	4628      	mov	r0, r5
 8005aee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005af2:	81a3      	strh	r3, [r4, #12]
 8005af4:	463b      	mov	r3, r7
 8005af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005afa:	f000 b8e7 	b.w	8005ccc <_write_r>

08005afe <__sseek>:
 8005afe:	b510      	push	{r4, lr}
 8005b00:	460c      	mov	r4, r1
 8005b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b06:	f000 f8bd 	bl	8005c84 <_lseek_r>
 8005b0a:	1c43      	adds	r3, r0, #1
 8005b0c:	89a3      	ldrh	r3, [r4, #12]
 8005b0e:	bf15      	itete	ne
 8005b10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005b12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005b16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005b1a:	81a3      	strheq	r3, [r4, #12]
 8005b1c:	bf18      	it	ne
 8005b1e:	81a3      	strhne	r3, [r4, #12]
 8005b20:	bd10      	pop	{r4, pc}

08005b22 <__sclose>:
 8005b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b26:	f000 b89d 	b.w	8005c64 <_close_r>

08005b2a <__swbuf_r>:
 8005b2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2c:	460e      	mov	r6, r1
 8005b2e:	4614      	mov	r4, r2
 8005b30:	4605      	mov	r5, r0
 8005b32:	b118      	cbz	r0, 8005b3c <__swbuf_r+0x12>
 8005b34:	6a03      	ldr	r3, [r0, #32]
 8005b36:	b90b      	cbnz	r3, 8005b3c <__swbuf_r+0x12>
 8005b38:	f7ff ff0e 	bl	8005958 <__sinit>
 8005b3c:	69a3      	ldr	r3, [r4, #24]
 8005b3e:	60a3      	str	r3, [r4, #8]
 8005b40:	89a3      	ldrh	r3, [r4, #12]
 8005b42:	071a      	lsls	r2, r3, #28
 8005b44:	d501      	bpl.n	8005b4a <__swbuf_r+0x20>
 8005b46:	6923      	ldr	r3, [r4, #16]
 8005b48:	b943      	cbnz	r3, 8005b5c <__swbuf_r+0x32>
 8005b4a:	4621      	mov	r1, r4
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	f000 f82b 	bl	8005ba8 <__swsetup_r>
 8005b52:	b118      	cbz	r0, 8005b5c <__swbuf_r+0x32>
 8005b54:	f04f 37ff 	mov.w	r7, #4294967295
 8005b58:	4638      	mov	r0, r7
 8005b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b5c:	6823      	ldr	r3, [r4, #0]
 8005b5e:	b2f6      	uxtb	r6, r6
 8005b60:	6922      	ldr	r2, [r4, #16]
 8005b62:	4637      	mov	r7, r6
 8005b64:	1a98      	subs	r0, r3, r2
 8005b66:	6963      	ldr	r3, [r4, #20]
 8005b68:	4283      	cmp	r3, r0
 8005b6a:	dc05      	bgt.n	8005b78 <__swbuf_r+0x4e>
 8005b6c:	4621      	mov	r1, r4
 8005b6e:	4628      	mov	r0, r5
 8005b70:	f000 fd3a 	bl	80065e8 <_fflush_r>
 8005b74:	2800      	cmp	r0, #0
 8005b76:	d1ed      	bne.n	8005b54 <__swbuf_r+0x2a>
 8005b78:	68a3      	ldr	r3, [r4, #8]
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	60a3      	str	r3, [r4, #8]
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	1c5a      	adds	r2, r3, #1
 8005b82:	6022      	str	r2, [r4, #0]
 8005b84:	701e      	strb	r6, [r3, #0]
 8005b86:	1c43      	adds	r3, r0, #1
 8005b88:	6962      	ldr	r2, [r4, #20]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d004      	beq.n	8005b98 <__swbuf_r+0x6e>
 8005b8e:	89a3      	ldrh	r3, [r4, #12]
 8005b90:	07db      	lsls	r3, r3, #31
 8005b92:	d5e1      	bpl.n	8005b58 <__swbuf_r+0x2e>
 8005b94:	2e0a      	cmp	r6, #10
 8005b96:	d1df      	bne.n	8005b58 <__swbuf_r+0x2e>
 8005b98:	4621      	mov	r1, r4
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	f000 fd24 	bl	80065e8 <_fflush_r>
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	d0d9      	beq.n	8005b58 <__swbuf_r+0x2e>
 8005ba4:	e7d6      	b.n	8005b54 <__swbuf_r+0x2a>
	...

08005ba8 <__swsetup_r>:
 8005ba8:	b538      	push	{r3, r4, r5, lr}
 8005baa:	4b29      	ldr	r3, [pc, #164]	@ (8005c50 <__swsetup_r+0xa8>)
 8005bac:	4605      	mov	r5, r0
 8005bae:	460c      	mov	r4, r1
 8005bb0:	6818      	ldr	r0, [r3, #0]
 8005bb2:	b118      	cbz	r0, 8005bbc <__swsetup_r+0x14>
 8005bb4:	6a03      	ldr	r3, [r0, #32]
 8005bb6:	b90b      	cbnz	r3, 8005bbc <__swsetup_r+0x14>
 8005bb8:	f7ff fece 	bl	8005958 <__sinit>
 8005bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bc0:	0719      	lsls	r1, r3, #28
 8005bc2:	d422      	bmi.n	8005c0a <__swsetup_r+0x62>
 8005bc4:	06da      	lsls	r2, r3, #27
 8005bc6:	d407      	bmi.n	8005bd8 <__swsetup_r+0x30>
 8005bc8:	2209      	movs	r2, #9
 8005bca:	602a      	str	r2, [r5, #0]
 8005bcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd4:	81a3      	strh	r3, [r4, #12]
 8005bd6:	e033      	b.n	8005c40 <__swsetup_r+0x98>
 8005bd8:	0758      	lsls	r0, r3, #29
 8005bda:	d512      	bpl.n	8005c02 <__swsetup_r+0x5a>
 8005bdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005bde:	b141      	cbz	r1, 8005bf2 <__swsetup_r+0x4a>
 8005be0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005be4:	4299      	cmp	r1, r3
 8005be6:	d002      	beq.n	8005bee <__swsetup_r+0x46>
 8005be8:	4628      	mov	r0, r5
 8005bea:	f000 f8af 	bl	8005d4c <_free_r>
 8005bee:	2300      	movs	r3, #0
 8005bf0:	6363      	str	r3, [r4, #52]	@ 0x34
 8005bf2:	89a3      	ldrh	r3, [r4, #12]
 8005bf4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005bf8:	81a3      	strh	r3, [r4, #12]
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	6063      	str	r3, [r4, #4]
 8005bfe:	6923      	ldr	r3, [r4, #16]
 8005c00:	6023      	str	r3, [r4, #0]
 8005c02:	89a3      	ldrh	r3, [r4, #12]
 8005c04:	f043 0308 	orr.w	r3, r3, #8
 8005c08:	81a3      	strh	r3, [r4, #12]
 8005c0a:	6923      	ldr	r3, [r4, #16]
 8005c0c:	b94b      	cbnz	r3, 8005c22 <__swsetup_r+0x7a>
 8005c0e:	89a3      	ldrh	r3, [r4, #12]
 8005c10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005c14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c18:	d003      	beq.n	8005c22 <__swsetup_r+0x7a>
 8005c1a:	4621      	mov	r1, r4
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	f000 fd30 	bl	8006682 <__smakebuf_r>
 8005c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c26:	f013 0201 	ands.w	r2, r3, #1
 8005c2a:	d00a      	beq.n	8005c42 <__swsetup_r+0x9a>
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	60a2      	str	r2, [r4, #8]
 8005c30:	6962      	ldr	r2, [r4, #20]
 8005c32:	4252      	negs	r2, r2
 8005c34:	61a2      	str	r2, [r4, #24]
 8005c36:	6922      	ldr	r2, [r4, #16]
 8005c38:	b942      	cbnz	r2, 8005c4c <__swsetup_r+0xa4>
 8005c3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005c3e:	d1c5      	bne.n	8005bcc <__swsetup_r+0x24>
 8005c40:	bd38      	pop	{r3, r4, r5, pc}
 8005c42:	0799      	lsls	r1, r3, #30
 8005c44:	bf58      	it	pl
 8005c46:	6962      	ldrpl	r2, [r4, #20]
 8005c48:	60a2      	str	r2, [r4, #8]
 8005c4a:	e7f4      	b.n	8005c36 <__swsetup_r+0x8e>
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	e7f7      	b.n	8005c40 <__swsetup_r+0x98>
 8005c50:	20000018 	.word	0x20000018

08005c54 <memset>:
 8005c54:	4402      	add	r2, r0
 8005c56:	4603      	mov	r3, r0
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d100      	bne.n	8005c5e <memset+0xa>
 8005c5c:	4770      	bx	lr
 8005c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c62:	e7f9      	b.n	8005c58 <memset+0x4>

08005c64 <_close_r>:
 8005c64:	b538      	push	{r3, r4, r5, lr}
 8005c66:	2300      	movs	r3, #0
 8005c68:	4d05      	ldr	r5, [pc, #20]	@ (8005c80 <_close_r+0x1c>)
 8005c6a:	4604      	mov	r4, r0
 8005c6c:	4608      	mov	r0, r1
 8005c6e:	602b      	str	r3, [r5, #0]
 8005c70:	f7fb f85f 	bl	8000d32 <_close>
 8005c74:	1c43      	adds	r3, r0, #1
 8005c76:	d102      	bne.n	8005c7e <_close_r+0x1a>
 8005c78:	682b      	ldr	r3, [r5, #0]
 8005c7a:	b103      	cbz	r3, 8005c7e <_close_r+0x1a>
 8005c7c:	6023      	str	r3, [r4, #0]
 8005c7e:	bd38      	pop	{r3, r4, r5, pc}
 8005c80:	200002a8 	.word	0x200002a8

08005c84 <_lseek_r>:
 8005c84:	b538      	push	{r3, r4, r5, lr}
 8005c86:	4604      	mov	r4, r0
 8005c88:	4d06      	ldr	r5, [pc, #24]	@ (8005ca4 <_lseek_r+0x20>)
 8005c8a:	4608      	mov	r0, r1
 8005c8c:	4611      	mov	r1, r2
 8005c8e:	2200      	movs	r2, #0
 8005c90:	602a      	str	r2, [r5, #0]
 8005c92:	461a      	mov	r2, r3
 8005c94:	f7fb f874 	bl	8000d80 <_lseek>
 8005c98:	1c43      	adds	r3, r0, #1
 8005c9a:	d102      	bne.n	8005ca2 <_lseek_r+0x1e>
 8005c9c:	682b      	ldr	r3, [r5, #0]
 8005c9e:	b103      	cbz	r3, 8005ca2 <_lseek_r+0x1e>
 8005ca0:	6023      	str	r3, [r4, #0]
 8005ca2:	bd38      	pop	{r3, r4, r5, pc}
 8005ca4:	200002a8 	.word	0x200002a8

08005ca8 <_read_r>:
 8005ca8:	b538      	push	{r3, r4, r5, lr}
 8005caa:	4604      	mov	r4, r0
 8005cac:	4d06      	ldr	r5, [pc, #24]	@ (8005cc8 <_read_r+0x20>)
 8005cae:	4608      	mov	r0, r1
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	602a      	str	r2, [r5, #0]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	f7fb f802 	bl	8000cc0 <_read>
 8005cbc:	1c43      	adds	r3, r0, #1
 8005cbe:	d102      	bne.n	8005cc6 <_read_r+0x1e>
 8005cc0:	682b      	ldr	r3, [r5, #0]
 8005cc2:	b103      	cbz	r3, 8005cc6 <_read_r+0x1e>
 8005cc4:	6023      	str	r3, [r4, #0]
 8005cc6:	bd38      	pop	{r3, r4, r5, pc}
 8005cc8:	200002a8 	.word	0x200002a8

08005ccc <_write_r>:
 8005ccc:	b538      	push	{r3, r4, r5, lr}
 8005cce:	4604      	mov	r4, r0
 8005cd0:	4d06      	ldr	r5, [pc, #24]	@ (8005cec <_write_r+0x20>)
 8005cd2:	4608      	mov	r0, r1
 8005cd4:	4611      	mov	r1, r2
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	602a      	str	r2, [r5, #0]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f7fb f80d 	bl	8000cfa <_write>
 8005ce0:	1c43      	adds	r3, r0, #1
 8005ce2:	d102      	bne.n	8005cea <_write_r+0x1e>
 8005ce4:	682b      	ldr	r3, [r5, #0]
 8005ce6:	b103      	cbz	r3, 8005cea <_write_r+0x1e>
 8005ce8:	6023      	str	r3, [r4, #0]
 8005cea:	bd38      	pop	{r3, r4, r5, pc}
 8005cec:	200002a8 	.word	0x200002a8

08005cf0 <__errno>:
 8005cf0:	4b01      	ldr	r3, [pc, #4]	@ (8005cf8 <__errno+0x8>)
 8005cf2:	6818      	ldr	r0, [r3, #0]
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	20000018 	.word	0x20000018

08005cfc <__libc_init_array>:
 8005cfc:	b570      	push	{r4, r5, r6, lr}
 8005cfe:	4d0d      	ldr	r5, [pc, #52]	@ (8005d34 <__libc_init_array+0x38>)
 8005d00:	2600      	movs	r6, #0
 8005d02:	4c0d      	ldr	r4, [pc, #52]	@ (8005d38 <__libc_init_array+0x3c>)
 8005d04:	1b64      	subs	r4, r4, r5
 8005d06:	10a4      	asrs	r4, r4, #2
 8005d08:	42a6      	cmp	r6, r4
 8005d0a:	d109      	bne.n	8005d20 <__libc_init_array+0x24>
 8005d0c:	4d0b      	ldr	r5, [pc, #44]	@ (8005d3c <__libc_init_array+0x40>)
 8005d0e:	2600      	movs	r6, #0
 8005d10:	4c0b      	ldr	r4, [pc, #44]	@ (8005d40 <__libc_init_array+0x44>)
 8005d12:	f000 fd33 	bl	800677c <_init>
 8005d16:	1b64      	subs	r4, r4, r5
 8005d18:	10a4      	asrs	r4, r4, #2
 8005d1a:	42a6      	cmp	r6, r4
 8005d1c:	d105      	bne.n	8005d2a <__libc_init_array+0x2e>
 8005d1e:	bd70      	pop	{r4, r5, r6, pc}
 8005d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d24:	3601      	adds	r6, #1
 8005d26:	4798      	blx	r3
 8005d28:	e7ee      	b.n	8005d08 <__libc_init_array+0xc>
 8005d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d2e:	3601      	adds	r6, #1
 8005d30:	4798      	blx	r3
 8005d32:	e7f2      	b.n	8005d1a <__libc_init_array+0x1e>
 8005d34:	080068e3 	.word	0x080068e3
 8005d38:	080068e3 	.word	0x080068e3
 8005d3c:	080068e4 	.word	0x080068e4
 8005d40:	080068e8 	.word	0x080068e8

08005d44 <__retarget_lock_init_recursive>:
 8005d44:	4770      	bx	lr

08005d46 <__retarget_lock_acquire_recursive>:
 8005d46:	4770      	bx	lr

08005d48 <__retarget_lock_release_recursive>:
 8005d48:	4770      	bx	lr
	...

08005d4c <_free_r>:
 8005d4c:	b538      	push	{r3, r4, r5, lr}
 8005d4e:	4605      	mov	r5, r0
 8005d50:	2900      	cmp	r1, #0
 8005d52:	d041      	beq.n	8005dd8 <_free_r+0x8c>
 8005d54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d58:	1f0c      	subs	r4, r1, #4
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	bfb8      	it	lt
 8005d5e:	18e4      	addlt	r4, r4, r3
 8005d60:	f000 f8e0 	bl	8005f24 <__malloc_lock>
 8005d64:	4a1d      	ldr	r2, [pc, #116]	@ (8005ddc <_free_r+0x90>)
 8005d66:	6813      	ldr	r3, [r2, #0]
 8005d68:	b933      	cbnz	r3, 8005d78 <_free_r+0x2c>
 8005d6a:	6063      	str	r3, [r4, #4]
 8005d6c:	6014      	str	r4, [r2, #0]
 8005d6e:	4628      	mov	r0, r5
 8005d70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d74:	f000 b8dc 	b.w	8005f30 <__malloc_unlock>
 8005d78:	42a3      	cmp	r3, r4
 8005d7a:	d908      	bls.n	8005d8e <_free_r+0x42>
 8005d7c:	6820      	ldr	r0, [r4, #0]
 8005d7e:	1821      	adds	r1, r4, r0
 8005d80:	428b      	cmp	r3, r1
 8005d82:	bf01      	itttt	eq
 8005d84:	6819      	ldreq	r1, [r3, #0]
 8005d86:	685b      	ldreq	r3, [r3, #4]
 8005d88:	1809      	addeq	r1, r1, r0
 8005d8a:	6021      	streq	r1, [r4, #0]
 8005d8c:	e7ed      	b.n	8005d6a <_free_r+0x1e>
 8005d8e:	461a      	mov	r2, r3
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	b10b      	cbz	r3, 8005d98 <_free_r+0x4c>
 8005d94:	42a3      	cmp	r3, r4
 8005d96:	d9fa      	bls.n	8005d8e <_free_r+0x42>
 8005d98:	6811      	ldr	r1, [r2, #0]
 8005d9a:	1850      	adds	r0, r2, r1
 8005d9c:	42a0      	cmp	r0, r4
 8005d9e:	d10b      	bne.n	8005db8 <_free_r+0x6c>
 8005da0:	6820      	ldr	r0, [r4, #0]
 8005da2:	4401      	add	r1, r0
 8005da4:	1850      	adds	r0, r2, r1
 8005da6:	6011      	str	r1, [r2, #0]
 8005da8:	4283      	cmp	r3, r0
 8005daa:	d1e0      	bne.n	8005d6e <_free_r+0x22>
 8005dac:	6818      	ldr	r0, [r3, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	4408      	add	r0, r1
 8005db2:	6053      	str	r3, [r2, #4]
 8005db4:	6010      	str	r0, [r2, #0]
 8005db6:	e7da      	b.n	8005d6e <_free_r+0x22>
 8005db8:	d902      	bls.n	8005dc0 <_free_r+0x74>
 8005dba:	230c      	movs	r3, #12
 8005dbc:	602b      	str	r3, [r5, #0]
 8005dbe:	e7d6      	b.n	8005d6e <_free_r+0x22>
 8005dc0:	6820      	ldr	r0, [r4, #0]
 8005dc2:	1821      	adds	r1, r4, r0
 8005dc4:	428b      	cmp	r3, r1
 8005dc6:	bf02      	ittt	eq
 8005dc8:	6819      	ldreq	r1, [r3, #0]
 8005dca:	685b      	ldreq	r3, [r3, #4]
 8005dcc:	1809      	addeq	r1, r1, r0
 8005dce:	6063      	str	r3, [r4, #4]
 8005dd0:	bf08      	it	eq
 8005dd2:	6021      	streq	r1, [r4, #0]
 8005dd4:	6054      	str	r4, [r2, #4]
 8005dd6:	e7ca      	b.n	8005d6e <_free_r+0x22>
 8005dd8:	bd38      	pop	{r3, r4, r5, pc}
 8005dda:	bf00      	nop
 8005ddc:	200002b4 	.word	0x200002b4

08005de0 <sbrk_aligned>:
 8005de0:	b570      	push	{r4, r5, r6, lr}
 8005de2:	4e0f      	ldr	r6, [pc, #60]	@ (8005e20 <sbrk_aligned+0x40>)
 8005de4:	460c      	mov	r4, r1
 8005de6:	4605      	mov	r5, r0
 8005de8:	6831      	ldr	r1, [r6, #0]
 8005dea:	b911      	cbnz	r1, 8005df2 <sbrk_aligned+0x12>
 8005dec:	f000 fca8 	bl	8006740 <_sbrk_r>
 8005df0:	6030      	str	r0, [r6, #0]
 8005df2:	4621      	mov	r1, r4
 8005df4:	4628      	mov	r0, r5
 8005df6:	f000 fca3 	bl	8006740 <_sbrk_r>
 8005dfa:	1c43      	adds	r3, r0, #1
 8005dfc:	d103      	bne.n	8005e06 <sbrk_aligned+0x26>
 8005dfe:	f04f 34ff 	mov.w	r4, #4294967295
 8005e02:	4620      	mov	r0, r4
 8005e04:	bd70      	pop	{r4, r5, r6, pc}
 8005e06:	1cc4      	adds	r4, r0, #3
 8005e08:	f024 0403 	bic.w	r4, r4, #3
 8005e0c:	42a0      	cmp	r0, r4
 8005e0e:	d0f8      	beq.n	8005e02 <sbrk_aligned+0x22>
 8005e10:	1a21      	subs	r1, r4, r0
 8005e12:	4628      	mov	r0, r5
 8005e14:	f000 fc94 	bl	8006740 <_sbrk_r>
 8005e18:	3001      	adds	r0, #1
 8005e1a:	d1f2      	bne.n	8005e02 <sbrk_aligned+0x22>
 8005e1c:	e7ef      	b.n	8005dfe <sbrk_aligned+0x1e>
 8005e1e:	bf00      	nop
 8005e20:	200002b0 	.word	0x200002b0

08005e24 <_malloc_r>:
 8005e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e28:	1ccd      	adds	r5, r1, #3
 8005e2a:	4606      	mov	r6, r0
 8005e2c:	f025 0503 	bic.w	r5, r5, #3
 8005e30:	3508      	adds	r5, #8
 8005e32:	2d0c      	cmp	r5, #12
 8005e34:	bf38      	it	cc
 8005e36:	250c      	movcc	r5, #12
 8005e38:	2d00      	cmp	r5, #0
 8005e3a:	db01      	blt.n	8005e40 <_malloc_r+0x1c>
 8005e3c:	42a9      	cmp	r1, r5
 8005e3e:	d904      	bls.n	8005e4a <_malloc_r+0x26>
 8005e40:	230c      	movs	r3, #12
 8005e42:	6033      	str	r3, [r6, #0]
 8005e44:	2000      	movs	r0, #0
 8005e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f20 <_malloc_r+0xfc>
 8005e4e:	f000 f869 	bl	8005f24 <__malloc_lock>
 8005e52:	f8d8 3000 	ldr.w	r3, [r8]
 8005e56:	461c      	mov	r4, r3
 8005e58:	bb44      	cbnz	r4, 8005eac <_malloc_r+0x88>
 8005e5a:	4629      	mov	r1, r5
 8005e5c:	4630      	mov	r0, r6
 8005e5e:	f7ff ffbf 	bl	8005de0 <sbrk_aligned>
 8005e62:	1c43      	adds	r3, r0, #1
 8005e64:	4604      	mov	r4, r0
 8005e66:	d158      	bne.n	8005f1a <_malloc_r+0xf6>
 8005e68:	f8d8 4000 	ldr.w	r4, [r8]
 8005e6c:	4627      	mov	r7, r4
 8005e6e:	2f00      	cmp	r7, #0
 8005e70:	d143      	bne.n	8005efa <_malloc_r+0xd6>
 8005e72:	2c00      	cmp	r4, #0
 8005e74:	d04b      	beq.n	8005f0e <_malloc_r+0xea>
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	4639      	mov	r1, r7
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	eb04 0903 	add.w	r9, r4, r3
 8005e80:	f000 fc5e 	bl	8006740 <_sbrk_r>
 8005e84:	4581      	cmp	r9, r0
 8005e86:	d142      	bne.n	8005f0e <_malloc_r+0xea>
 8005e88:	6821      	ldr	r1, [r4, #0]
 8005e8a:	4630      	mov	r0, r6
 8005e8c:	1a6d      	subs	r5, r5, r1
 8005e8e:	4629      	mov	r1, r5
 8005e90:	f7ff ffa6 	bl	8005de0 <sbrk_aligned>
 8005e94:	3001      	adds	r0, #1
 8005e96:	d03a      	beq.n	8005f0e <_malloc_r+0xea>
 8005e98:	6823      	ldr	r3, [r4, #0]
 8005e9a:	442b      	add	r3, r5
 8005e9c:	6023      	str	r3, [r4, #0]
 8005e9e:	f8d8 3000 	ldr.w	r3, [r8]
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	bb62      	cbnz	r2, 8005f00 <_malloc_r+0xdc>
 8005ea6:	f8c8 7000 	str.w	r7, [r8]
 8005eaa:	e00f      	b.n	8005ecc <_malloc_r+0xa8>
 8005eac:	6822      	ldr	r2, [r4, #0]
 8005eae:	1b52      	subs	r2, r2, r5
 8005eb0:	d420      	bmi.n	8005ef4 <_malloc_r+0xd0>
 8005eb2:	2a0b      	cmp	r2, #11
 8005eb4:	d917      	bls.n	8005ee6 <_malloc_r+0xc2>
 8005eb6:	1961      	adds	r1, r4, r5
 8005eb8:	42a3      	cmp	r3, r4
 8005eba:	6025      	str	r5, [r4, #0]
 8005ebc:	bf18      	it	ne
 8005ebe:	6059      	strne	r1, [r3, #4]
 8005ec0:	6863      	ldr	r3, [r4, #4]
 8005ec2:	bf08      	it	eq
 8005ec4:	f8c8 1000 	streq.w	r1, [r8]
 8005ec8:	5162      	str	r2, [r4, r5]
 8005eca:	604b      	str	r3, [r1, #4]
 8005ecc:	4630      	mov	r0, r6
 8005ece:	f000 f82f 	bl	8005f30 <__malloc_unlock>
 8005ed2:	f104 000b 	add.w	r0, r4, #11
 8005ed6:	1d23      	adds	r3, r4, #4
 8005ed8:	f020 0007 	bic.w	r0, r0, #7
 8005edc:	1ac2      	subs	r2, r0, r3
 8005ede:	bf1c      	itt	ne
 8005ee0:	1a1b      	subne	r3, r3, r0
 8005ee2:	50a3      	strne	r3, [r4, r2]
 8005ee4:	e7af      	b.n	8005e46 <_malloc_r+0x22>
 8005ee6:	6862      	ldr	r2, [r4, #4]
 8005ee8:	42a3      	cmp	r3, r4
 8005eea:	bf0c      	ite	eq
 8005eec:	f8c8 2000 	streq.w	r2, [r8]
 8005ef0:	605a      	strne	r2, [r3, #4]
 8005ef2:	e7eb      	b.n	8005ecc <_malloc_r+0xa8>
 8005ef4:	4623      	mov	r3, r4
 8005ef6:	6864      	ldr	r4, [r4, #4]
 8005ef8:	e7ae      	b.n	8005e58 <_malloc_r+0x34>
 8005efa:	463c      	mov	r4, r7
 8005efc:	687f      	ldr	r7, [r7, #4]
 8005efe:	e7b6      	b.n	8005e6e <_malloc_r+0x4a>
 8005f00:	461a      	mov	r2, r3
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	42a3      	cmp	r3, r4
 8005f06:	d1fb      	bne.n	8005f00 <_malloc_r+0xdc>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	6053      	str	r3, [r2, #4]
 8005f0c:	e7de      	b.n	8005ecc <_malloc_r+0xa8>
 8005f0e:	230c      	movs	r3, #12
 8005f10:	4630      	mov	r0, r6
 8005f12:	6033      	str	r3, [r6, #0]
 8005f14:	f000 f80c 	bl	8005f30 <__malloc_unlock>
 8005f18:	e794      	b.n	8005e44 <_malloc_r+0x20>
 8005f1a:	6005      	str	r5, [r0, #0]
 8005f1c:	e7d6      	b.n	8005ecc <_malloc_r+0xa8>
 8005f1e:	bf00      	nop
 8005f20:	200002b4 	.word	0x200002b4

08005f24 <__malloc_lock>:
 8005f24:	4801      	ldr	r0, [pc, #4]	@ (8005f2c <__malloc_lock+0x8>)
 8005f26:	f7ff bf0e 	b.w	8005d46 <__retarget_lock_acquire_recursive>
 8005f2a:	bf00      	nop
 8005f2c:	200002ac 	.word	0x200002ac

08005f30 <__malloc_unlock>:
 8005f30:	4801      	ldr	r0, [pc, #4]	@ (8005f38 <__malloc_unlock+0x8>)
 8005f32:	f7ff bf09 	b.w	8005d48 <__retarget_lock_release_recursive>
 8005f36:	bf00      	nop
 8005f38:	200002ac 	.word	0x200002ac

08005f3c <__sfputc_r>:
 8005f3c:	6893      	ldr	r3, [r2, #8]
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	b410      	push	{r4}
 8005f44:	6093      	str	r3, [r2, #8]
 8005f46:	da08      	bge.n	8005f5a <__sfputc_r+0x1e>
 8005f48:	6994      	ldr	r4, [r2, #24]
 8005f4a:	42a3      	cmp	r3, r4
 8005f4c:	db01      	blt.n	8005f52 <__sfputc_r+0x16>
 8005f4e:	290a      	cmp	r1, #10
 8005f50:	d103      	bne.n	8005f5a <__sfputc_r+0x1e>
 8005f52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f56:	f7ff bde8 	b.w	8005b2a <__swbuf_r>
 8005f5a:	6813      	ldr	r3, [r2, #0]
 8005f5c:	1c58      	adds	r0, r3, #1
 8005f5e:	6010      	str	r0, [r2, #0]
 8005f60:	4608      	mov	r0, r1
 8005f62:	7019      	strb	r1, [r3, #0]
 8005f64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <__sfputs_r>:
 8005f6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f6c:	4606      	mov	r6, r0
 8005f6e:	460f      	mov	r7, r1
 8005f70:	4614      	mov	r4, r2
 8005f72:	18d5      	adds	r5, r2, r3
 8005f74:	42ac      	cmp	r4, r5
 8005f76:	d101      	bne.n	8005f7c <__sfputs_r+0x12>
 8005f78:	2000      	movs	r0, #0
 8005f7a:	e007      	b.n	8005f8c <__sfputs_r+0x22>
 8005f7c:	463a      	mov	r2, r7
 8005f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f82:	4630      	mov	r0, r6
 8005f84:	f7ff ffda 	bl	8005f3c <__sfputc_r>
 8005f88:	1c43      	adds	r3, r0, #1
 8005f8a:	d1f3      	bne.n	8005f74 <__sfputs_r+0xa>
 8005f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f90 <_vfiprintf_r>:
 8005f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f94:	460d      	mov	r5, r1
 8005f96:	b09d      	sub	sp, #116	@ 0x74
 8005f98:	4614      	mov	r4, r2
 8005f9a:	4698      	mov	r8, r3
 8005f9c:	4606      	mov	r6, r0
 8005f9e:	b118      	cbz	r0, 8005fa8 <_vfiprintf_r+0x18>
 8005fa0:	6a03      	ldr	r3, [r0, #32]
 8005fa2:	b90b      	cbnz	r3, 8005fa8 <_vfiprintf_r+0x18>
 8005fa4:	f7ff fcd8 	bl	8005958 <__sinit>
 8005fa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005faa:	07d9      	lsls	r1, r3, #31
 8005fac:	d405      	bmi.n	8005fba <_vfiprintf_r+0x2a>
 8005fae:	89ab      	ldrh	r3, [r5, #12]
 8005fb0:	059a      	lsls	r2, r3, #22
 8005fb2:	d402      	bmi.n	8005fba <_vfiprintf_r+0x2a>
 8005fb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005fb6:	f7ff fec6 	bl	8005d46 <__retarget_lock_acquire_recursive>
 8005fba:	89ab      	ldrh	r3, [r5, #12]
 8005fbc:	071b      	lsls	r3, r3, #28
 8005fbe:	d501      	bpl.n	8005fc4 <_vfiprintf_r+0x34>
 8005fc0:	692b      	ldr	r3, [r5, #16]
 8005fc2:	b99b      	cbnz	r3, 8005fec <_vfiprintf_r+0x5c>
 8005fc4:	4629      	mov	r1, r5
 8005fc6:	4630      	mov	r0, r6
 8005fc8:	f7ff fdee 	bl	8005ba8 <__swsetup_r>
 8005fcc:	b170      	cbz	r0, 8005fec <_vfiprintf_r+0x5c>
 8005fce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005fd0:	07dc      	lsls	r4, r3, #31
 8005fd2:	d504      	bpl.n	8005fde <_vfiprintf_r+0x4e>
 8005fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd8:	b01d      	add	sp, #116	@ 0x74
 8005fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fde:	89ab      	ldrh	r3, [r5, #12]
 8005fe0:	0598      	lsls	r0, r3, #22
 8005fe2:	d4f7      	bmi.n	8005fd4 <_vfiprintf_r+0x44>
 8005fe4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005fe6:	f7ff feaf 	bl	8005d48 <__retarget_lock_release_recursive>
 8005fea:	e7f3      	b.n	8005fd4 <_vfiprintf_r+0x44>
 8005fec:	2300      	movs	r3, #0
 8005fee:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ff2:	f04f 0901 	mov.w	r9, #1
 8005ff6:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 80061ac <_vfiprintf_r+0x21c>
 8005ffa:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ffc:	2320      	movs	r3, #32
 8005ffe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006002:	2330      	movs	r3, #48	@ 0x30
 8006004:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006008:	4623      	mov	r3, r4
 800600a:	469a      	mov	sl, r3
 800600c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006010:	b10a      	cbz	r2, 8006016 <_vfiprintf_r+0x86>
 8006012:	2a25      	cmp	r2, #37	@ 0x25
 8006014:	d1f9      	bne.n	800600a <_vfiprintf_r+0x7a>
 8006016:	ebba 0b04 	subs.w	fp, sl, r4
 800601a:	d00b      	beq.n	8006034 <_vfiprintf_r+0xa4>
 800601c:	465b      	mov	r3, fp
 800601e:	4622      	mov	r2, r4
 8006020:	4629      	mov	r1, r5
 8006022:	4630      	mov	r0, r6
 8006024:	f7ff ffa1 	bl	8005f6a <__sfputs_r>
 8006028:	3001      	adds	r0, #1
 800602a:	f000 80a7 	beq.w	800617c <_vfiprintf_r+0x1ec>
 800602e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006030:	445a      	add	r2, fp
 8006032:	9209      	str	r2, [sp, #36]	@ 0x24
 8006034:	f89a 3000 	ldrb.w	r3, [sl]
 8006038:	2b00      	cmp	r3, #0
 800603a:	f000 809f 	beq.w	800617c <_vfiprintf_r+0x1ec>
 800603e:	2300      	movs	r3, #0
 8006040:	f04f 32ff 	mov.w	r2, #4294967295
 8006044:	f10a 0a01 	add.w	sl, sl, #1
 8006048:	9304      	str	r3, [sp, #16]
 800604a:	9307      	str	r3, [sp, #28]
 800604c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006050:	931a      	str	r3, [sp, #104]	@ 0x68
 8006052:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006056:	4654      	mov	r4, sl
 8006058:	2205      	movs	r2, #5
 800605a:	4854      	ldr	r0, [pc, #336]	@ (80061ac <_vfiprintf_r+0x21c>)
 800605c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006060:	f000 fb7e 	bl	8006760 <memchr>
 8006064:	9a04      	ldr	r2, [sp, #16]
 8006066:	b9d8      	cbnz	r0, 80060a0 <_vfiprintf_r+0x110>
 8006068:	06d1      	lsls	r1, r2, #27
 800606a:	bf44      	itt	mi
 800606c:	2320      	movmi	r3, #32
 800606e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006072:	0713      	lsls	r3, r2, #28
 8006074:	bf44      	itt	mi
 8006076:	232b      	movmi	r3, #43	@ 0x2b
 8006078:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800607c:	f89a 3000 	ldrb.w	r3, [sl]
 8006080:	2b2a      	cmp	r3, #42	@ 0x2a
 8006082:	d015      	beq.n	80060b0 <_vfiprintf_r+0x120>
 8006084:	9a07      	ldr	r2, [sp, #28]
 8006086:	4654      	mov	r4, sl
 8006088:	2000      	movs	r0, #0
 800608a:	f04f 0c0a 	mov.w	ip, #10
 800608e:	4621      	mov	r1, r4
 8006090:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006094:	3b30      	subs	r3, #48	@ 0x30
 8006096:	2b09      	cmp	r3, #9
 8006098:	d94b      	bls.n	8006132 <_vfiprintf_r+0x1a2>
 800609a:	b1b0      	cbz	r0, 80060ca <_vfiprintf_r+0x13a>
 800609c:	9207      	str	r2, [sp, #28]
 800609e:	e014      	b.n	80060ca <_vfiprintf_r+0x13a>
 80060a0:	eba0 0308 	sub.w	r3, r0, r8
 80060a4:	46a2      	mov	sl, r4
 80060a6:	fa09 f303 	lsl.w	r3, r9, r3
 80060aa:	4313      	orrs	r3, r2
 80060ac:	9304      	str	r3, [sp, #16]
 80060ae:	e7d2      	b.n	8006056 <_vfiprintf_r+0xc6>
 80060b0:	9b03      	ldr	r3, [sp, #12]
 80060b2:	1d19      	adds	r1, r3, #4
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	9103      	str	r1, [sp, #12]
 80060ba:	bfbb      	ittet	lt
 80060bc:	425b      	neglt	r3, r3
 80060be:	f042 0202 	orrlt.w	r2, r2, #2
 80060c2:	9307      	strge	r3, [sp, #28]
 80060c4:	9307      	strlt	r3, [sp, #28]
 80060c6:	bfb8      	it	lt
 80060c8:	9204      	strlt	r2, [sp, #16]
 80060ca:	7823      	ldrb	r3, [r4, #0]
 80060cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80060ce:	d10a      	bne.n	80060e6 <_vfiprintf_r+0x156>
 80060d0:	7863      	ldrb	r3, [r4, #1]
 80060d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80060d4:	d132      	bne.n	800613c <_vfiprintf_r+0x1ac>
 80060d6:	9b03      	ldr	r3, [sp, #12]
 80060d8:	3402      	adds	r4, #2
 80060da:	1d1a      	adds	r2, r3, #4
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80060e2:	9203      	str	r2, [sp, #12]
 80060e4:	9305      	str	r3, [sp, #20]
 80060e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80061bc <_vfiprintf_r+0x22c>
 80060ea:	2203      	movs	r2, #3
 80060ec:	7821      	ldrb	r1, [r4, #0]
 80060ee:	4650      	mov	r0, sl
 80060f0:	f000 fb36 	bl	8006760 <memchr>
 80060f4:	b138      	cbz	r0, 8006106 <_vfiprintf_r+0x176>
 80060f6:	eba0 000a 	sub.w	r0, r0, sl
 80060fa:	2240      	movs	r2, #64	@ 0x40
 80060fc:	9b04      	ldr	r3, [sp, #16]
 80060fe:	3401      	adds	r4, #1
 8006100:	4082      	lsls	r2, r0
 8006102:	4313      	orrs	r3, r2
 8006104:	9304      	str	r3, [sp, #16]
 8006106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800610a:	2206      	movs	r2, #6
 800610c:	4828      	ldr	r0, [pc, #160]	@ (80061b0 <_vfiprintf_r+0x220>)
 800610e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006112:	f000 fb25 	bl	8006760 <memchr>
 8006116:	2800      	cmp	r0, #0
 8006118:	d03f      	beq.n	800619a <_vfiprintf_r+0x20a>
 800611a:	4b26      	ldr	r3, [pc, #152]	@ (80061b4 <_vfiprintf_r+0x224>)
 800611c:	bb1b      	cbnz	r3, 8006166 <_vfiprintf_r+0x1d6>
 800611e:	9b03      	ldr	r3, [sp, #12]
 8006120:	3307      	adds	r3, #7
 8006122:	f023 0307 	bic.w	r3, r3, #7
 8006126:	3308      	adds	r3, #8
 8006128:	9303      	str	r3, [sp, #12]
 800612a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800612c:	443b      	add	r3, r7
 800612e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006130:	e76a      	b.n	8006008 <_vfiprintf_r+0x78>
 8006132:	fb0c 3202 	mla	r2, ip, r2, r3
 8006136:	460c      	mov	r4, r1
 8006138:	2001      	movs	r0, #1
 800613a:	e7a8      	b.n	800608e <_vfiprintf_r+0xfe>
 800613c:	2300      	movs	r3, #0
 800613e:	3401      	adds	r4, #1
 8006140:	f04f 0c0a 	mov.w	ip, #10
 8006144:	4619      	mov	r1, r3
 8006146:	9305      	str	r3, [sp, #20]
 8006148:	4620      	mov	r0, r4
 800614a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800614e:	3a30      	subs	r2, #48	@ 0x30
 8006150:	2a09      	cmp	r2, #9
 8006152:	d903      	bls.n	800615c <_vfiprintf_r+0x1cc>
 8006154:	2b00      	cmp	r3, #0
 8006156:	d0c6      	beq.n	80060e6 <_vfiprintf_r+0x156>
 8006158:	9105      	str	r1, [sp, #20]
 800615a:	e7c4      	b.n	80060e6 <_vfiprintf_r+0x156>
 800615c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006160:	4604      	mov	r4, r0
 8006162:	2301      	movs	r3, #1
 8006164:	e7f0      	b.n	8006148 <_vfiprintf_r+0x1b8>
 8006166:	ab03      	add	r3, sp, #12
 8006168:	462a      	mov	r2, r5
 800616a:	a904      	add	r1, sp, #16
 800616c:	4630      	mov	r0, r6
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	4b11      	ldr	r3, [pc, #68]	@ (80061b8 <_vfiprintf_r+0x228>)
 8006172:	f3af 8000 	nop.w
 8006176:	4607      	mov	r7, r0
 8006178:	1c78      	adds	r0, r7, #1
 800617a:	d1d6      	bne.n	800612a <_vfiprintf_r+0x19a>
 800617c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800617e:	07d9      	lsls	r1, r3, #31
 8006180:	d405      	bmi.n	800618e <_vfiprintf_r+0x1fe>
 8006182:	89ab      	ldrh	r3, [r5, #12]
 8006184:	059a      	lsls	r2, r3, #22
 8006186:	d402      	bmi.n	800618e <_vfiprintf_r+0x1fe>
 8006188:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800618a:	f7ff fddd 	bl	8005d48 <__retarget_lock_release_recursive>
 800618e:	89ab      	ldrh	r3, [r5, #12]
 8006190:	065b      	lsls	r3, r3, #25
 8006192:	f53f af1f 	bmi.w	8005fd4 <_vfiprintf_r+0x44>
 8006196:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006198:	e71e      	b.n	8005fd8 <_vfiprintf_r+0x48>
 800619a:	ab03      	add	r3, sp, #12
 800619c:	462a      	mov	r2, r5
 800619e:	a904      	add	r1, sp, #16
 80061a0:	4630      	mov	r0, r6
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	4b04      	ldr	r3, [pc, #16]	@ (80061b8 <_vfiprintf_r+0x228>)
 80061a6:	f000 f87d 	bl	80062a4 <_printf_i>
 80061aa:	e7e4      	b.n	8006176 <_vfiprintf_r+0x1e6>
 80061ac:	080068b0 	.word	0x080068b0
 80061b0:	080068ba 	.word	0x080068ba
 80061b4:	00000000 	.word	0x00000000
 80061b8:	08005f6b 	.word	0x08005f6b
 80061bc:	080068b6 	.word	0x080068b6

080061c0 <_printf_common>:
 80061c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061c4:	4616      	mov	r6, r2
 80061c6:	4698      	mov	r8, r3
 80061c8:	688a      	ldr	r2, [r1, #8]
 80061ca:	4607      	mov	r7, r0
 80061cc:	690b      	ldr	r3, [r1, #16]
 80061ce:	460c      	mov	r4, r1
 80061d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80061d4:	4293      	cmp	r3, r2
 80061d6:	bfb8      	it	lt
 80061d8:	4613      	movlt	r3, r2
 80061da:	6033      	str	r3, [r6, #0]
 80061dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80061e0:	b10a      	cbz	r2, 80061e6 <_printf_common+0x26>
 80061e2:	3301      	adds	r3, #1
 80061e4:	6033      	str	r3, [r6, #0]
 80061e6:	6823      	ldr	r3, [r4, #0]
 80061e8:	0699      	lsls	r1, r3, #26
 80061ea:	bf42      	ittt	mi
 80061ec:	6833      	ldrmi	r3, [r6, #0]
 80061ee:	3302      	addmi	r3, #2
 80061f0:	6033      	strmi	r3, [r6, #0]
 80061f2:	6825      	ldr	r5, [r4, #0]
 80061f4:	f015 0506 	ands.w	r5, r5, #6
 80061f8:	d106      	bne.n	8006208 <_printf_common+0x48>
 80061fa:	f104 0a19 	add.w	sl, r4, #25
 80061fe:	68e3      	ldr	r3, [r4, #12]
 8006200:	6832      	ldr	r2, [r6, #0]
 8006202:	1a9b      	subs	r3, r3, r2
 8006204:	42ab      	cmp	r3, r5
 8006206:	dc2b      	bgt.n	8006260 <_printf_common+0xa0>
 8006208:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800620c:	6822      	ldr	r2, [r4, #0]
 800620e:	3b00      	subs	r3, #0
 8006210:	bf18      	it	ne
 8006212:	2301      	movne	r3, #1
 8006214:	0692      	lsls	r2, r2, #26
 8006216:	d430      	bmi.n	800627a <_printf_common+0xba>
 8006218:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800621c:	4641      	mov	r1, r8
 800621e:	4638      	mov	r0, r7
 8006220:	47c8      	blx	r9
 8006222:	3001      	adds	r0, #1
 8006224:	d023      	beq.n	800626e <_printf_common+0xae>
 8006226:	6823      	ldr	r3, [r4, #0]
 8006228:	341a      	adds	r4, #26
 800622a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800622e:	f003 0306 	and.w	r3, r3, #6
 8006232:	2b04      	cmp	r3, #4
 8006234:	bf0a      	itet	eq
 8006236:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800623a:	2500      	movne	r5, #0
 800623c:	6833      	ldreq	r3, [r6, #0]
 800623e:	f04f 0600 	mov.w	r6, #0
 8006242:	bf08      	it	eq
 8006244:	1aed      	subeq	r5, r5, r3
 8006246:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800624a:	bf08      	it	eq
 800624c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006250:	4293      	cmp	r3, r2
 8006252:	bfc4      	itt	gt
 8006254:	1a9b      	subgt	r3, r3, r2
 8006256:	18ed      	addgt	r5, r5, r3
 8006258:	42b5      	cmp	r5, r6
 800625a:	d11a      	bne.n	8006292 <_printf_common+0xd2>
 800625c:	2000      	movs	r0, #0
 800625e:	e008      	b.n	8006272 <_printf_common+0xb2>
 8006260:	2301      	movs	r3, #1
 8006262:	4652      	mov	r2, sl
 8006264:	4641      	mov	r1, r8
 8006266:	4638      	mov	r0, r7
 8006268:	47c8      	blx	r9
 800626a:	3001      	adds	r0, #1
 800626c:	d103      	bne.n	8006276 <_printf_common+0xb6>
 800626e:	f04f 30ff 	mov.w	r0, #4294967295
 8006272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006276:	3501      	adds	r5, #1
 8006278:	e7c1      	b.n	80061fe <_printf_common+0x3e>
 800627a:	18e1      	adds	r1, r4, r3
 800627c:	1c5a      	adds	r2, r3, #1
 800627e:	2030      	movs	r0, #48	@ 0x30
 8006280:	3302      	adds	r3, #2
 8006282:	4422      	add	r2, r4
 8006284:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006288:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800628c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006290:	e7c2      	b.n	8006218 <_printf_common+0x58>
 8006292:	2301      	movs	r3, #1
 8006294:	4622      	mov	r2, r4
 8006296:	4641      	mov	r1, r8
 8006298:	4638      	mov	r0, r7
 800629a:	47c8      	blx	r9
 800629c:	3001      	adds	r0, #1
 800629e:	d0e6      	beq.n	800626e <_printf_common+0xae>
 80062a0:	3601      	adds	r6, #1
 80062a2:	e7d9      	b.n	8006258 <_printf_common+0x98>

080062a4 <_printf_i>:
 80062a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062a8:	7e0f      	ldrb	r7, [r1, #24]
 80062aa:	4691      	mov	r9, r2
 80062ac:	4680      	mov	r8, r0
 80062ae:	460c      	mov	r4, r1
 80062b0:	2f78      	cmp	r7, #120	@ 0x78
 80062b2:	469a      	mov	sl, r3
 80062b4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80062b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80062ba:	d807      	bhi.n	80062cc <_printf_i+0x28>
 80062bc:	2f62      	cmp	r7, #98	@ 0x62
 80062be:	d80a      	bhi.n	80062d6 <_printf_i+0x32>
 80062c0:	2f00      	cmp	r7, #0
 80062c2:	f000 80d1 	beq.w	8006468 <_printf_i+0x1c4>
 80062c6:	2f58      	cmp	r7, #88	@ 0x58
 80062c8:	f000 80b8 	beq.w	800643c <_printf_i+0x198>
 80062cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80062d4:	e03a      	b.n	800634c <_printf_i+0xa8>
 80062d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80062da:	2b15      	cmp	r3, #21
 80062dc:	d8f6      	bhi.n	80062cc <_printf_i+0x28>
 80062de:	a101      	add	r1, pc, #4	@ (adr r1, 80062e4 <_printf_i+0x40>)
 80062e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062e4:	0800633d 	.word	0x0800633d
 80062e8:	08006351 	.word	0x08006351
 80062ec:	080062cd 	.word	0x080062cd
 80062f0:	080062cd 	.word	0x080062cd
 80062f4:	080062cd 	.word	0x080062cd
 80062f8:	080062cd 	.word	0x080062cd
 80062fc:	08006351 	.word	0x08006351
 8006300:	080062cd 	.word	0x080062cd
 8006304:	080062cd 	.word	0x080062cd
 8006308:	080062cd 	.word	0x080062cd
 800630c:	080062cd 	.word	0x080062cd
 8006310:	0800644f 	.word	0x0800644f
 8006314:	0800637b 	.word	0x0800637b
 8006318:	08006409 	.word	0x08006409
 800631c:	080062cd 	.word	0x080062cd
 8006320:	080062cd 	.word	0x080062cd
 8006324:	08006471 	.word	0x08006471
 8006328:	080062cd 	.word	0x080062cd
 800632c:	0800637b 	.word	0x0800637b
 8006330:	080062cd 	.word	0x080062cd
 8006334:	080062cd 	.word	0x080062cd
 8006338:	08006411 	.word	0x08006411
 800633c:	6833      	ldr	r3, [r6, #0]
 800633e:	1d1a      	adds	r2, r3, #4
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6032      	str	r2, [r6, #0]
 8006344:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006348:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800634c:	2301      	movs	r3, #1
 800634e:	e09c      	b.n	800648a <_printf_i+0x1e6>
 8006350:	6833      	ldr	r3, [r6, #0]
 8006352:	6820      	ldr	r0, [r4, #0]
 8006354:	1d19      	adds	r1, r3, #4
 8006356:	6031      	str	r1, [r6, #0]
 8006358:	0606      	lsls	r6, r0, #24
 800635a:	d501      	bpl.n	8006360 <_printf_i+0xbc>
 800635c:	681d      	ldr	r5, [r3, #0]
 800635e:	e003      	b.n	8006368 <_printf_i+0xc4>
 8006360:	0645      	lsls	r5, r0, #25
 8006362:	d5fb      	bpl.n	800635c <_printf_i+0xb8>
 8006364:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006368:	2d00      	cmp	r5, #0
 800636a:	da03      	bge.n	8006374 <_printf_i+0xd0>
 800636c:	232d      	movs	r3, #45	@ 0x2d
 800636e:	426d      	negs	r5, r5
 8006370:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006374:	4858      	ldr	r0, [pc, #352]	@ (80064d8 <_printf_i+0x234>)
 8006376:	230a      	movs	r3, #10
 8006378:	e011      	b.n	800639e <_printf_i+0xfa>
 800637a:	6821      	ldr	r1, [r4, #0]
 800637c:	6833      	ldr	r3, [r6, #0]
 800637e:	0608      	lsls	r0, r1, #24
 8006380:	f853 5b04 	ldr.w	r5, [r3], #4
 8006384:	d402      	bmi.n	800638c <_printf_i+0xe8>
 8006386:	0649      	lsls	r1, r1, #25
 8006388:	bf48      	it	mi
 800638a:	b2ad      	uxthmi	r5, r5
 800638c:	2f6f      	cmp	r7, #111	@ 0x6f
 800638e:	6033      	str	r3, [r6, #0]
 8006390:	4851      	ldr	r0, [pc, #324]	@ (80064d8 <_printf_i+0x234>)
 8006392:	bf14      	ite	ne
 8006394:	230a      	movne	r3, #10
 8006396:	2308      	moveq	r3, #8
 8006398:	2100      	movs	r1, #0
 800639a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800639e:	6866      	ldr	r6, [r4, #4]
 80063a0:	2e00      	cmp	r6, #0
 80063a2:	60a6      	str	r6, [r4, #8]
 80063a4:	db05      	blt.n	80063b2 <_printf_i+0x10e>
 80063a6:	6821      	ldr	r1, [r4, #0]
 80063a8:	432e      	orrs	r6, r5
 80063aa:	f021 0104 	bic.w	r1, r1, #4
 80063ae:	6021      	str	r1, [r4, #0]
 80063b0:	d04b      	beq.n	800644a <_printf_i+0x1a6>
 80063b2:	4616      	mov	r6, r2
 80063b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80063b8:	fb03 5711 	mls	r7, r3, r1, r5
 80063bc:	5dc7      	ldrb	r7, [r0, r7]
 80063be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063c2:	462f      	mov	r7, r5
 80063c4:	460d      	mov	r5, r1
 80063c6:	42bb      	cmp	r3, r7
 80063c8:	d9f4      	bls.n	80063b4 <_printf_i+0x110>
 80063ca:	2b08      	cmp	r3, #8
 80063cc:	d10b      	bne.n	80063e6 <_printf_i+0x142>
 80063ce:	6823      	ldr	r3, [r4, #0]
 80063d0:	07df      	lsls	r7, r3, #31
 80063d2:	d508      	bpl.n	80063e6 <_printf_i+0x142>
 80063d4:	6923      	ldr	r3, [r4, #16]
 80063d6:	6861      	ldr	r1, [r4, #4]
 80063d8:	4299      	cmp	r1, r3
 80063da:	bfde      	ittt	le
 80063dc:	2330      	movle	r3, #48	@ 0x30
 80063de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80063e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80063e6:	1b92      	subs	r2, r2, r6
 80063e8:	6122      	str	r2, [r4, #16]
 80063ea:	464b      	mov	r3, r9
 80063ec:	aa03      	add	r2, sp, #12
 80063ee:	4621      	mov	r1, r4
 80063f0:	4640      	mov	r0, r8
 80063f2:	f8cd a000 	str.w	sl, [sp]
 80063f6:	f7ff fee3 	bl	80061c0 <_printf_common>
 80063fa:	3001      	adds	r0, #1
 80063fc:	d14a      	bne.n	8006494 <_printf_i+0x1f0>
 80063fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006402:	b004      	add	sp, #16
 8006404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006408:	6823      	ldr	r3, [r4, #0]
 800640a:	f043 0320 	orr.w	r3, r3, #32
 800640e:	6023      	str	r3, [r4, #0]
 8006410:	2778      	movs	r7, #120	@ 0x78
 8006412:	4832      	ldr	r0, [pc, #200]	@ (80064dc <_printf_i+0x238>)
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800641a:	061f      	lsls	r7, r3, #24
 800641c:	6831      	ldr	r1, [r6, #0]
 800641e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006422:	d402      	bmi.n	800642a <_printf_i+0x186>
 8006424:	065f      	lsls	r7, r3, #25
 8006426:	bf48      	it	mi
 8006428:	b2ad      	uxthmi	r5, r5
 800642a:	6031      	str	r1, [r6, #0]
 800642c:	07d9      	lsls	r1, r3, #31
 800642e:	bf44      	itt	mi
 8006430:	f043 0320 	orrmi.w	r3, r3, #32
 8006434:	6023      	strmi	r3, [r4, #0]
 8006436:	b11d      	cbz	r5, 8006440 <_printf_i+0x19c>
 8006438:	2310      	movs	r3, #16
 800643a:	e7ad      	b.n	8006398 <_printf_i+0xf4>
 800643c:	4826      	ldr	r0, [pc, #152]	@ (80064d8 <_printf_i+0x234>)
 800643e:	e7e9      	b.n	8006414 <_printf_i+0x170>
 8006440:	6823      	ldr	r3, [r4, #0]
 8006442:	f023 0320 	bic.w	r3, r3, #32
 8006446:	6023      	str	r3, [r4, #0]
 8006448:	e7f6      	b.n	8006438 <_printf_i+0x194>
 800644a:	4616      	mov	r6, r2
 800644c:	e7bd      	b.n	80063ca <_printf_i+0x126>
 800644e:	6833      	ldr	r3, [r6, #0]
 8006450:	6825      	ldr	r5, [r4, #0]
 8006452:	1d18      	adds	r0, r3, #4
 8006454:	6961      	ldr	r1, [r4, #20]
 8006456:	6030      	str	r0, [r6, #0]
 8006458:	062e      	lsls	r6, r5, #24
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	d501      	bpl.n	8006462 <_printf_i+0x1be>
 800645e:	6019      	str	r1, [r3, #0]
 8006460:	e002      	b.n	8006468 <_printf_i+0x1c4>
 8006462:	0668      	lsls	r0, r5, #25
 8006464:	d5fb      	bpl.n	800645e <_printf_i+0x1ba>
 8006466:	8019      	strh	r1, [r3, #0]
 8006468:	2300      	movs	r3, #0
 800646a:	4616      	mov	r6, r2
 800646c:	6123      	str	r3, [r4, #16]
 800646e:	e7bc      	b.n	80063ea <_printf_i+0x146>
 8006470:	6833      	ldr	r3, [r6, #0]
 8006472:	2100      	movs	r1, #0
 8006474:	1d1a      	adds	r2, r3, #4
 8006476:	6032      	str	r2, [r6, #0]
 8006478:	681e      	ldr	r6, [r3, #0]
 800647a:	6862      	ldr	r2, [r4, #4]
 800647c:	4630      	mov	r0, r6
 800647e:	f000 f96f 	bl	8006760 <memchr>
 8006482:	b108      	cbz	r0, 8006488 <_printf_i+0x1e4>
 8006484:	1b80      	subs	r0, r0, r6
 8006486:	6060      	str	r0, [r4, #4]
 8006488:	6863      	ldr	r3, [r4, #4]
 800648a:	6123      	str	r3, [r4, #16]
 800648c:	2300      	movs	r3, #0
 800648e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006492:	e7aa      	b.n	80063ea <_printf_i+0x146>
 8006494:	6923      	ldr	r3, [r4, #16]
 8006496:	4632      	mov	r2, r6
 8006498:	4649      	mov	r1, r9
 800649a:	4640      	mov	r0, r8
 800649c:	47d0      	blx	sl
 800649e:	3001      	adds	r0, #1
 80064a0:	d0ad      	beq.n	80063fe <_printf_i+0x15a>
 80064a2:	6823      	ldr	r3, [r4, #0]
 80064a4:	079b      	lsls	r3, r3, #30
 80064a6:	d413      	bmi.n	80064d0 <_printf_i+0x22c>
 80064a8:	68e0      	ldr	r0, [r4, #12]
 80064aa:	9b03      	ldr	r3, [sp, #12]
 80064ac:	4298      	cmp	r0, r3
 80064ae:	bfb8      	it	lt
 80064b0:	4618      	movlt	r0, r3
 80064b2:	e7a6      	b.n	8006402 <_printf_i+0x15e>
 80064b4:	2301      	movs	r3, #1
 80064b6:	4632      	mov	r2, r6
 80064b8:	4649      	mov	r1, r9
 80064ba:	4640      	mov	r0, r8
 80064bc:	47d0      	blx	sl
 80064be:	3001      	adds	r0, #1
 80064c0:	d09d      	beq.n	80063fe <_printf_i+0x15a>
 80064c2:	3501      	adds	r5, #1
 80064c4:	68e3      	ldr	r3, [r4, #12]
 80064c6:	9903      	ldr	r1, [sp, #12]
 80064c8:	1a5b      	subs	r3, r3, r1
 80064ca:	42ab      	cmp	r3, r5
 80064cc:	dcf2      	bgt.n	80064b4 <_printf_i+0x210>
 80064ce:	e7eb      	b.n	80064a8 <_printf_i+0x204>
 80064d0:	2500      	movs	r5, #0
 80064d2:	f104 0619 	add.w	r6, r4, #25
 80064d6:	e7f5      	b.n	80064c4 <_printf_i+0x220>
 80064d8:	080068c1 	.word	0x080068c1
 80064dc:	080068d2 	.word	0x080068d2

080064e0 <__sflush_r>:
 80064e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80064e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064e8:	0716      	lsls	r6, r2, #28
 80064ea:	4605      	mov	r5, r0
 80064ec:	460c      	mov	r4, r1
 80064ee:	d454      	bmi.n	800659a <__sflush_r+0xba>
 80064f0:	684b      	ldr	r3, [r1, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	dc02      	bgt.n	80064fc <__sflush_r+0x1c>
 80064f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	dd48      	ble.n	800658e <__sflush_r+0xae>
 80064fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064fe:	2e00      	cmp	r6, #0
 8006500:	d045      	beq.n	800658e <__sflush_r+0xae>
 8006502:	2300      	movs	r3, #0
 8006504:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006508:	682f      	ldr	r7, [r5, #0]
 800650a:	6a21      	ldr	r1, [r4, #32]
 800650c:	602b      	str	r3, [r5, #0]
 800650e:	d030      	beq.n	8006572 <__sflush_r+0x92>
 8006510:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006512:	89a3      	ldrh	r3, [r4, #12]
 8006514:	0759      	lsls	r1, r3, #29
 8006516:	d505      	bpl.n	8006524 <__sflush_r+0x44>
 8006518:	6863      	ldr	r3, [r4, #4]
 800651a:	1ad2      	subs	r2, r2, r3
 800651c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800651e:	b10b      	cbz	r3, 8006524 <__sflush_r+0x44>
 8006520:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006522:	1ad2      	subs	r2, r2, r3
 8006524:	2300      	movs	r3, #0
 8006526:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006528:	6a21      	ldr	r1, [r4, #32]
 800652a:	4628      	mov	r0, r5
 800652c:	47b0      	blx	r6
 800652e:	1c43      	adds	r3, r0, #1
 8006530:	89a3      	ldrh	r3, [r4, #12]
 8006532:	d106      	bne.n	8006542 <__sflush_r+0x62>
 8006534:	6829      	ldr	r1, [r5, #0]
 8006536:	291d      	cmp	r1, #29
 8006538:	d82b      	bhi.n	8006592 <__sflush_r+0xb2>
 800653a:	4a2a      	ldr	r2, [pc, #168]	@ (80065e4 <__sflush_r+0x104>)
 800653c:	40ca      	lsrs	r2, r1
 800653e:	07d6      	lsls	r6, r2, #31
 8006540:	d527      	bpl.n	8006592 <__sflush_r+0xb2>
 8006542:	2200      	movs	r2, #0
 8006544:	04d9      	lsls	r1, r3, #19
 8006546:	6062      	str	r2, [r4, #4]
 8006548:	6922      	ldr	r2, [r4, #16]
 800654a:	6022      	str	r2, [r4, #0]
 800654c:	d504      	bpl.n	8006558 <__sflush_r+0x78>
 800654e:	1c42      	adds	r2, r0, #1
 8006550:	d101      	bne.n	8006556 <__sflush_r+0x76>
 8006552:	682b      	ldr	r3, [r5, #0]
 8006554:	b903      	cbnz	r3, 8006558 <__sflush_r+0x78>
 8006556:	6560      	str	r0, [r4, #84]	@ 0x54
 8006558:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800655a:	602f      	str	r7, [r5, #0]
 800655c:	b1b9      	cbz	r1, 800658e <__sflush_r+0xae>
 800655e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006562:	4299      	cmp	r1, r3
 8006564:	d002      	beq.n	800656c <__sflush_r+0x8c>
 8006566:	4628      	mov	r0, r5
 8006568:	f7ff fbf0 	bl	8005d4c <_free_r>
 800656c:	2300      	movs	r3, #0
 800656e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006570:	e00d      	b.n	800658e <__sflush_r+0xae>
 8006572:	2301      	movs	r3, #1
 8006574:	4628      	mov	r0, r5
 8006576:	47b0      	blx	r6
 8006578:	4602      	mov	r2, r0
 800657a:	1c50      	adds	r0, r2, #1
 800657c:	d1c9      	bne.n	8006512 <__sflush_r+0x32>
 800657e:	682b      	ldr	r3, [r5, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d0c6      	beq.n	8006512 <__sflush_r+0x32>
 8006584:	2b1d      	cmp	r3, #29
 8006586:	d001      	beq.n	800658c <__sflush_r+0xac>
 8006588:	2b16      	cmp	r3, #22
 800658a:	d11d      	bne.n	80065c8 <__sflush_r+0xe8>
 800658c:	602f      	str	r7, [r5, #0]
 800658e:	2000      	movs	r0, #0
 8006590:	e021      	b.n	80065d6 <__sflush_r+0xf6>
 8006592:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006596:	b21b      	sxth	r3, r3
 8006598:	e01a      	b.n	80065d0 <__sflush_r+0xf0>
 800659a:	690f      	ldr	r7, [r1, #16]
 800659c:	2f00      	cmp	r7, #0
 800659e:	d0f6      	beq.n	800658e <__sflush_r+0xae>
 80065a0:	0793      	lsls	r3, r2, #30
 80065a2:	680e      	ldr	r6, [r1, #0]
 80065a4:	600f      	str	r7, [r1, #0]
 80065a6:	bf0c      	ite	eq
 80065a8:	694b      	ldreq	r3, [r1, #20]
 80065aa:	2300      	movne	r3, #0
 80065ac:	eba6 0807 	sub.w	r8, r6, r7
 80065b0:	608b      	str	r3, [r1, #8]
 80065b2:	f1b8 0f00 	cmp.w	r8, #0
 80065b6:	ddea      	ble.n	800658e <__sflush_r+0xae>
 80065b8:	4643      	mov	r3, r8
 80065ba:	463a      	mov	r2, r7
 80065bc:	6a21      	ldr	r1, [r4, #32]
 80065be:	4628      	mov	r0, r5
 80065c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80065c2:	47b0      	blx	r6
 80065c4:	2800      	cmp	r0, #0
 80065c6:	dc08      	bgt.n	80065da <__sflush_r+0xfa>
 80065c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065d0:	f04f 30ff 	mov.w	r0, #4294967295
 80065d4:	81a3      	strh	r3, [r4, #12]
 80065d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065da:	4407      	add	r7, r0
 80065dc:	eba8 0800 	sub.w	r8, r8, r0
 80065e0:	e7e7      	b.n	80065b2 <__sflush_r+0xd2>
 80065e2:	bf00      	nop
 80065e4:	20400001 	.word	0x20400001

080065e8 <_fflush_r>:
 80065e8:	b538      	push	{r3, r4, r5, lr}
 80065ea:	690b      	ldr	r3, [r1, #16]
 80065ec:	4605      	mov	r5, r0
 80065ee:	460c      	mov	r4, r1
 80065f0:	b913      	cbnz	r3, 80065f8 <_fflush_r+0x10>
 80065f2:	2500      	movs	r5, #0
 80065f4:	4628      	mov	r0, r5
 80065f6:	bd38      	pop	{r3, r4, r5, pc}
 80065f8:	b118      	cbz	r0, 8006602 <_fflush_r+0x1a>
 80065fa:	6a03      	ldr	r3, [r0, #32]
 80065fc:	b90b      	cbnz	r3, 8006602 <_fflush_r+0x1a>
 80065fe:	f7ff f9ab 	bl	8005958 <__sinit>
 8006602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d0f3      	beq.n	80065f2 <_fflush_r+0xa>
 800660a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800660c:	07d0      	lsls	r0, r2, #31
 800660e:	d404      	bmi.n	800661a <_fflush_r+0x32>
 8006610:	0599      	lsls	r1, r3, #22
 8006612:	d402      	bmi.n	800661a <_fflush_r+0x32>
 8006614:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006616:	f7ff fb96 	bl	8005d46 <__retarget_lock_acquire_recursive>
 800661a:	4628      	mov	r0, r5
 800661c:	4621      	mov	r1, r4
 800661e:	f7ff ff5f 	bl	80064e0 <__sflush_r>
 8006622:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006624:	4605      	mov	r5, r0
 8006626:	07da      	lsls	r2, r3, #31
 8006628:	d4e4      	bmi.n	80065f4 <_fflush_r+0xc>
 800662a:	89a3      	ldrh	r3, [r4, #12]
 800662c:	059b      	lsls	r3, r3, #22
 800662e:	d4e1      	bmi.n	80065f4 <_fflush_r+0xc>
 8006630:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006632:	f7ff fb89 	bl	8005d48 <__retarget_lock_release_recursive>
 8006636:	e7dd      	b.n	80065f4 <_fflush_r+0xc>

08006638 <__swhatbuf_r>:
 8006638:	b570      	push	{r4, r5, r6, lr}
 800663a:	460c      	mov	r4, r1
 800663c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006640:	b096      	sub	sp, #88	@ 0x58
 8006642:	4615      	mov	r5, r2
 8006644:	2900      	cmp	r1, #0
 8006646:	461e      	mov	r6, r3
 8006648:	da0c      	bge.n	8006664 <__swhatbuf_r+0x2c>
 800664a:	89a3      	ldrh	r3, [r4, #12]
 800664c:	2100      	movs	r1, #0
 800664e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006652:	bf14      	ite	ne
 8006654:	2340      	movne	r3, #64	@ 0x40
 8006656:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800665a:	2000      	movs	r0, #0
 800665c:	6031      	str	r1, [r6, #0]
 800665e:	602b      	str	r3, [r5, #0]
 8006660:	b016      	add	sp, #88	@ 0x58
 8006662:	bd70      	pop	{r4, r5, r6, pc}
 8006664:	466a      	mov	r2, sp
 8006666:	f000 f849 	bl	80066fc <_fstat_r>
 800666a:	2800      	cmp	r0, #0
 800666c:	dbed      	blt.n	800664a <__swhatbuf_r+0x12>
 800666e:	9901      	ldr	r1, [sp, #4]
 8006670:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006674:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006678:	4259      	negs	r1, r3
 800667a:	4159      	adcs	r1, r3
 800667c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006680:	e7eb      	b.n	800665a <__swhatbuf_r+0x22>

08006682 <__smakebuf_r>:
 8006682:	898b      	ldrh	r3, [r1, #12]
 8006684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006686:	079d      	lsls	r5, r3, #30
 8006688:	4606      	mov	r6, r0
 800668a:	460c      	mov	r4, r1
 800668c:	d507      	bpl.n	800669e <__smakebuf_r+0x1c>
 800668e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006692:	6023      	str	r3, [r4, #0]
 8006694:	6123      	str	r3, [r4, #16]
 8006696:	2301      	movs	r3, #1
 8006698:	6163      	str	r3, [r4, #20]
 800669a:	b003      	add	sp, #12
 800669c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800669e:	ab01      	add	r3, sp, #4
 80066a0:	466a      	mov	r2, sp
 80066a2:	f7ff ffc9 	bl	8006638 <__swhatbuf_r>
 80066a6:	9f00      	ldr	r7, [sp, #0]
 80066a8:	4605      	mov	r5, r0
 80066aa:	4630      	mov	r0, r6
 80066ac:	4639      	mov	r1, r7
 80066ae:	f7ff fbb9 	bl	8005e24 <_malloc_r>
 80066b2:	b948      	cbnz	r0, 80066c8 <__smakebuf_r+0x46>
 80066b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066b8:	059a      	lsls	r2, r3, #22
 80066ba:	d4ee      	bmi.n	800669a <__smakebuf_r+0x18>
 80066bc:	f023 0303 	bic.w	r3, r3, #3
 80066c0:	f043 0302 	orr.w	r3, r3, #2
 80066c4:	81a3      	strh	r3, [r4, #12]
 80066c6:	e7e2      	b.n	800668e <__smakebuf_r+0xc>
 80066c8:	89a3      	ldrh	r3, [r4, #12]
 80066ca:	6020      	str	r0, [r4, #0]
 80066cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066d0:	81a3      	strh	r3, [r4, #12]
 80066d2:	9b01      	ldr	r3, [sp, #4]
 80066d4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80066d8:	b15b      	cbz	r3, 80066f2 <__smakebuf_r+0x70>
 80066da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066de:	4630      	mov	r0, r6
 80066e0:	f000 f81e 	bl	8006720 <_isatty_r>
 80066e4:	b128      	cbz	r0, 80066f2 <__smakebuf_r+0x70>
 80066e6:	89a3      	ldrh	r3, [r4, #12]
 80066e8:	f023 0303 	bic.w	r3, r3, #3
 80066ec:	f043 0301 	orr.w	r3, r3, #1
 80066f0:	81a3      	strh	r3, [r4, #12]
 80066f2:	89a3      	ldrh	r3, [r4, #12]
 80066f4:	431d      	orrs	r5, r3
 80066f6:	81a5      	strh	r5, [r4, #12]
 80066f8:	e7cf      	b.n	800669a <__smakebuf_r+0x18>
	...

080066fc <_fstat_r>:
 80066fc:	b538      	push	{r3, r4, r5, lr}
 80066fe:	2300      	movs	r3, #0
 8006700:	4d06      	ldr	r5, [pc, #24]	@ (800671c <_fstat_r+0x20>)
 8006702:	4604      	mov	r4, r0
 8006704:	4608      	mov	r0, r1
 8006706:	4611      	mov	r1, r2
 8006708:	602b      	str	r3, [r5, #0]
 800670a:	f7fa fb1e 	bl	8000d4a <_fstat>
 800670e:	1c43      	adds	r3, r0, #1
 8006710:	d102      	bne.n	8006718 <_fstat_r+0x1c>
 8006712:	682b      	ldr	r3, [r5, #0]
 8006714:	b103      	cbz	r3, 8006718 <_fstat_r+0x1c>
 8006716:	6023      	str	r3, [r4, #0]
 8006718:	bd38      	pop	{r3, r4, r5, pc}
 800671a:	bf00      	nop
 800671c:	200002a8 	.word	0x200002a8

08006720 <_isatty_r>:
 8006720:	b538      	push	{r3, r4, r5, lr}
 8006722:	2300      	movs	r3, #0
 8006724:	4d05      	ldr	r5, [pc, #20]	@ (800673c <_isatty_r+0x1c>)
 8006726:	4604      	mov	r4, r0
 8006728:	4608      	mov	r0, r1
 800672a:	602b      	str	r3, [r5, #0]
 800672c:	f7fa fb1d 	bl	8000d6a <_isatty>
 8006730:	1c43      	adds	r3, r0, #1
 8006732:	d102      	bne.n	800673a <_isatty_r+0x1a>
 8006734:	682b      	ldr	r3, [r5, #0]
 8006736:	b103      	cbz	r3, 800673a <_isatty_r+0x1a>
 8006738:	6023      	str	r3, [r4, #0]
 800673a:	bd38      	pop	{r3, r4, r5, pc}
 800673c:	200002a8 	.word	0x200002a8

08006740 <_sbrk_r>:
 8006740:	b538      	push	{r3, r4, r5, lr}
 8006742:	2300      	movs	r3, #0
 8006744:	4d05      	ldr	r5, [pc, #20]	@ (800675c <_sbrk_r+0x1c>)
 8006746:	4604      	mov	r4, r0
 8006748:	4608      	mov	r0, r1
 800674a:	602b      	str	r3, [r5, #0]
 800674c:	f7fa fb26 	bl	8000d9c <_sbrk>
 8006750:	1c43      	adds	r3, r0, #1
 8006752:	d102      	bne.n	800675a <_sbrk_r+0x1a>
 8006754:	682b      	ldr	r3, [r5, #0]
 8006756:	b103      	cbz	r3, 800675a <_sbrk_r+0x1a>
 8006758:	6023      	str	r3, [r4, #0]
 800675a:	bd38      	pop	{r3, r4, r5, pc}
 800675c:	200002a8 	.word	0x200002a8

08006760 <memchr>:
 8006760:	b2c9      	uxtb	r1, r1
 8006762:	4603      	mov	r3, r0
 8006764:	4402      	add	r2, r0
 8006766:	b510      	push	{r4, lr}
 8006768:	4293      	cmp	r3, r2
 800676a:	4618      	mov	r0, r3
 800676c:	d101      	bne.n	8006772 <memchr+0x12>
 800676e:	2000      	movs	r0, #0
 8006770:	e003      	b.n	800677a <memchr+0x1a>
 8006772:	7804      	ldrb	r4, [r0, #0]
 8006774:	3301      	adds	r3, #1
 8006776:	428c      	cmp	r4, r1
 8006778:	d1f6      	bne.n	8006768 <memchr+0x8>
 800677a:	bd10      	pop	{r4, pc}

0800677c <_init>:
 800677c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677e:	bf00      	nop
 8006780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006782:	bc08      	pop	{r3}
 8006784:	469e      	mov	lr, r3
 8006786:	4770      	bx	lr

08006788 <_fini>:
 8006788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678a:	bf00      	nop
 800678c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800678e:	bc08      	pop	{r3}
 8006790:	469e      	mov	lr, r3
 8006792:	4770      	bx	lr


FAFNIR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000537c  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080055b4  080055b4  000065b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005694  08005694  00006694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08005698  08005698  00006698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000009  20000000  0800569c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000fc  2000000c  080056a5  0000700c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000108  080056a5  00007108  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00007009  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012024  00000000  00000000  0000703f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000021a7  00000000  00000000  00019063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001180  00000000  00000000  0001b210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000d7c  00000000  00000000  0001c390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00031fe8  00000000  00000000  0001d10c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00012e2b  00000000  00000000  0004f0f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00141fc8  00000000  00000000  00061f1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001a3ee7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004b38  00000000  00000000  001a3f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000057  00000000  00000000  001a8a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000000c 	.word	0x2000000c
 8000254:	00000000 	.word	0x00000000
 8000258:	0800559c 	.word	0x0800559c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000010 	.word	0x20000010
 8000274:	0800559c 	.word	0x0800559c

08000278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027c:	f000 fce4 	bl	8000c48 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000280:	f000 f83c 	bl	80002fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000284:	f000 f990 	bl	80005a8 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000288:	f000 f892 	bl	80003b0 <MX_FDCAN1_Init>
  MX_TIM3_Init();
 800028c:	f000 f932 	bl	80004f4 <MX_TIM3_Init>
  MX_ICACHE_Init();
 8000290:	f000 f91c 	bl	80004cc <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

   // Start FDCAN1 peripheral
   if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000294:	4815      	ldr	r0, [pc, #84]	@ (80002ec <main+0x74>)
 8000296:	f001 f8dd 	bl	8001454 <HAL_FDCAN_Start>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <main+0x2c>
        Error_Handler();
 80002a0:	f000 fb48 	bl	8000934 <Error_Handler>
   }

   // Enable RX FIFO 0 Notification for incoming messages
   if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80002a4:	2200      	movs	r2, #0
 80002a6:	2101      	movs	r1, #1
 80002a8:	4810      	ldr	r0, [pc, #64]	@ (80002ec <main+0x74>)
 80002aa:	f001 fa03 	bl	80016b4 <HAL_FDCAN_ActivateNotification>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <main+0x40>
        Error_Handler();
 80002b4:	f000 fb3e 	bl	8000934 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

	  if (servoZeroRequested) {
 80002b8:	4b0d      	ldr	r3, [pc, #52]	@ (80002f0 <main+0x78>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d004      	beq.n	80002cc <main+0x54>
	        zeroServo();
 80002c2:	f000 fad9 	bl	8000878 <zeroServo>
	        servoZeroRequested = false;
 80002c6:	4b0a      	ldr	r3, [pc, #40]	@ (80002f0 <main+0x78>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	701a      	strb	r2, [r3, #0]
	    }

	    if (servoRotateRequested) {
 80002cc:	4b09      	ldr	r3, [pc, #36]	@ (80002f4 <main+0x7c>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d0f0      	beq.n	80002b8 <main+0x40>
	        servoRotate(servoAngle);
 80002d6:	4b08      	ldr	r3, [pc, #32]	@ (80002f8 <main+0x80>)
 80002d8:	edd3 7a00 	vldr	s15, [r3]
 80002dc:	eeb0 0a67 	vmov.f32	s0, s15
 80002e0:	f000 fada 	bl	8000898 <servoRotate>
	        servoRotateRequested = false;
 80002e4:	4b03      	ldr	r3, [pc, #12]	@ (80002f4 <main+0x7c>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	701a      	strb	r2, [r3, #0]
	  if (servoZeroRequested) {
 80002ea:	e7e5      	b.n	80002b8 <main+0x40>
 80002ec:	20000028 	.word	0x20000028
 80002f0:	200000fc 	.word	0x200000fc
 80002f4:	200000fd 	.word	0x200000fd
 80002f8:	20000100 	.word	0x20000100

080002fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b09e      	sub	sp, #120	@ 0x78
 8000300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000302:	f107 0318 	add.w	r3, r7, #24
 8000306:	2260      	movs	r2, #96	@ 0x60
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f005 f91a 	bl	8005544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000310:	463b      	mov	r3, r7
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]
 800031c:	611a      	str	r2, [r3, #16]
 800031e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8000320:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000324:	f001 febe 	bl	80020a4 <HAL_PWREx_ControlVoltageScaling>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800032e:	f000 fb01 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000332:	2301      	movs	r3, #1
 8000334:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000336:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800033a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800033c:	2302      	movs	r3, #2
 800033e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000340:	2303      	movs	r3, #3
 8000342:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV2;
 8000344:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000348:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800034a:	2302      	movs	r3, #2
 800034c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 30;
 800034e:	231e      	movs	r3, #30
 8000350:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000352:	2302      	movs	r3, #2
 8000354:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000356:	2304      	movs	r3, #4
 8000358:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 4;
 800035a:	2304      	movs	r3, #4
 800035c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800035e:	230c      	movs	r3, #12
 8000360:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000362:	2300      	movs	r3, #0
 8000364:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000366:	f107 0318 	add.w	r3, r7, #24
 800036a:	4618      	mov	r0, r3
 800036c:	f001 ff26 	bl	80021bc <HAL_RCC_OscConfig>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000376:	f000 fadd 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800037a:	231f      	movs	r3, #31
 800037c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800037e:	2303      	movs	r3, #3
 8000380:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000382:	2300      	movs	r3, #0
 8000384:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000386:	2300      	movs	r3, #0
 8000388:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800038e:	2300      	movs	r3, #0
 8000390:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000392:	463b      	mov	r3, r7
 8000394:	2102      	movs	r1, #2
 8000396:	4618      	mov	r0, r3
 8000398:	f002 fdec 	bl	8002f74 <HAL_RCC_ClockConfig>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80003a2:	f000 fac7 	bl	8000934 <Error_Handler>
  }
}
 80003a6:	bf00      	nop
 80003a8:	3778      	adds	r7, #120	@ 0x78
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
	...

080003b0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80003b6:	4b42      	ldr	r3, [pc, #264]	@ (80004c0 <MX_FDCAN1_Init+0x110>)
 80003b8:	4a42      	ldr	r2, [pc, #264]	@ (80004c4 <MX_FDCAN1_Init+0x114>)
 80003ba:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80003bc:	4b40      	ldr	r3, [pc, #256]	@ (80004c0 <MX_FDCAN1_Init+0x110>)
 80003be:	2200      	movs	r2, #0
 80003c0:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80003c2:	4b3f      	ldr	r3, [pc, #252]	@ (80004c0 <MX_FDCAN1_Init+0x110>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80003c8:	4b3d      	ldr	r3, [pc, #244]	@ (80004c0 <MX_FDCAN1_Init+0x110>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80003ce:	4b3c      	ldr	r3, [pc, #240]	@ (80004c0 <MX_FDCAN1_Init+0x110>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80003d4:	4b3a      	ldr	r3, [pc, #232]	@ (80004c0 <MX_FDCAN1_Init+0x110>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80003da:	4b39      	ldr	r3, [pc, #228]	@ (80004c0 <MX_FDCAN1_Init+0x110>)
 80003dc:	2200      	movs	r2, #0
 80003de:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 9;
 80003e0:	4b37      	ldr	r3, [pc, #220]	@ (80004c0 <MX_FDCAN1_Init+0x110>)
 80003e2:	2209      	movs	r2, #9
 80003e4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 80003e6:	4b36      	ldr	r3, [pc, #216]	@ (80004c0 <MX_FDCAN1_Init+0x110>)
 80003e8:	2202      	movs	r2, #2
 80003ea:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 80003ec:	4b34      	ldr	r3, [pc, #208]	@ (80004c0 <MX_FDCAN1_Init+0x110>)
 80003ee:	220e      	movs	r2, #14
 80003f0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 80003f2:	4b33      	ldr	r3, [pc, #204]	@ (80004c0 <MX_FDCAN1_Init+0x110>)
 80003f4:	2205      	movs	r2, #5
 80003f6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80003f8:	4b31      	ldr	r3, [pc, #196]	@ (80004c0 <MX_FDCAN1_Init+0x110>)
 80003fa:	2201      	movs	r2, #1
 80003fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80003fe:	4b30      	ldr	r3, [pc, #192]	@ (80004c0 <MX_FDCAN1_Init+0x110>)
 8000400:	2201      	movs	r2, #1
 8000402:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000404:	4b2e      	ldr	r3, [pc, #184]	@ (80004c0 <MX_FDCAN1_Init+0x110>)
 8000406:	2201      	movs	r2, #1
 8000408:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800040a:	4b2d      	ldr	r3, [pc, #180]	@ (80004c0 <MX_FDCAN1_Init+0x110>)
 800040c:	2201      	movs	r2, #1
 800040e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 2;
 8000410:	4b2b      	ldr	r3, [pc, #172]	@ (80004c0 <MX_FDCAN1_Init+0x110>)
 8000412:	2202      	movs	r2, #2
 8000414:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000416:	4b2a      	ldr	r3, [pc, #168]	@ (80004c0 <MX_FDCAN1_Init+0x110>)
 8000418:	2200      	movs	r2, #0
 800041a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800041c:	4b28      	ldr	r3, [pc, #160]	@ (80004c0 <MX_FDCAN1_Init+0x110>)
 800041e:	2200      	movs	r2, #0
 8000420:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000422:	4827      	ldr	r0, [pc, #156]	@ (80004c0 <MX_FDCAN1_Init+0x110>)
 8000424:	f000 fe6a 	bl	80010fc <HAL_FDCAN_Init>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 800042e:	f000 fa81 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000432:	2200      	movs	r2, #0
 8000434:	2100      	movs	r1, #0
 8000436:	2027      	movs	r0, #39	@ 0x27
 8000438:	f000 fd84 	bl	8000f44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800043c:	2027      	movs	r0, #39	@ 0x27
 800043e:	f000 fd9b 	bl	8000f78 <HAL_NVIC_EnableIRQ>

  FDCAN_FilterTypeDef sFilterConfig;

  // Filter for CAN_ID_SERVO_ZERO
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000442:	2300      	movs	r3, #0
 8000444:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8000446:	2300      	movs	r3, #0
 8000448:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800044a:	2302      	movs	r3, #2
 800044c:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800044e:	2301      	movs	r3, #1
 8000450:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = CAN_ID_SERVO_ZERO ;
 8000452:	f240 7302 	movw	r3, #1794	@ 0x702
 8000456:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x7FF;
 8000458:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800045c:	617b      	str	r3, [r7, #20]
  HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 800045e:	463b      	mov	r3, r7
 8000460:	4619      	mov	r1, r3
 8000462:	4817      	ldr	r0, [pc, #92]	@ (80004c0 <MX_FDCAN1_Init+0x110>)
 8000464:	f000 ff9c 	bl	80013a0 <HAL_FDCAN_ConfigFilter>

  // Filter for CAN_ID_SERVO_ROTATE
   sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000468:	2300      	movs	r3, #0
 800046a:	603b      	str	r3, [r7, #0]
   sFilterConfig.FilterIndex = 1;
 800046c:	2301      	movs	r3, #1
 800046e:	607b      	str	r3, [r7, #4]
   sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000470:	2302      	movs	r3, #2
 8000472:	60bb      	str	r3, [r7, #8]
   sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000474:	2301      	movs	r3, #1
 8000476:	60fb      	str	r3, [r7, #12]
   sFilterConfig.FilterID1 = CAN_ID_SERVO_ROTATE;
 8000478:	f240 7303 	movw	r3, #1795	@ 0x703
 800047c:	613b      	str	r3, [r7, #16]
   sFilterConfig.FilterID2 = 0x7FF;
 800047e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000482:	617b      	str	r3, [r7, #20]
   HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 8000484:	463b      	mov	r3, r7
 8000486:	4619      	mov	r1, r3
 8000488:	480d      	ldr	r0, [pc, #52]	@ (80004c0 <MX_FDCAN1_Init+0x110>)
 800048a:	f000 ff89 	bl	80013a0 <HAL_FDCAN_ConfigFilter>

  TxHeader.IdType              = FDCAN_STANDARD_ID;
 800048e:	4b0e      	ldr	r3, [pc, #56]	@ (80004c8 <MX_FDCAN1_Init+0x118>)
 8000490:	2200      	movs	r2, #0
 8000492:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType         = FDCAN_DATA_FRAME;
 8000494:	4b0c      	ldr	r3, [pc, #48]	@ (80004c8 <MX_FDCAN1_Init+0x118>)
 8000496:	2200      	movs	r2, #0
 8000498:	609a      	str	r2, [r3, #8]
  TxHeader.FDFormat            = FDCAN_CLASSIC_CAN;
 800049a:	4b0b      	ldr	r3, [pc, #44]	@ (80004c8 <MX_FDCAN1_Init+0x118>)
 800049c:	2200      	movs	r2, #0
 800049e:	619a      	str	r2, [r3, #24]
  TxHeader.BitRateSwitch       = FDCAN_BRS_OFF;
 80004a0:	4b09      	ldr	r3, [pc, #36]	@ (80004c8 <MX_FDCAN1_Init+0x118>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	615a      	str	r2, [r3, #20]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80004a6:	4b08      	ldr	r3, [pc, #32]	@ (80004c8 <MX_FDCAN1_Init+0x118>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	611a      	str	r2, [r3, #16]
  TxHeader.TxEventFifoControl  = FDCAN_NO_TX_EVENTS;
 80004ac:	4b06      	ldr	r3, [pc, #24]	@ (80004c8 <MX_FDCAN1_Init+0x118>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker       = 0;
 80004b2:	4b05      	ldr	r3, [pc, #20]	@ (80004c8 <MX_FDCAN1_Init+0x118>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	621a      	str	r2, [r3, #32]


  /* USER CODE END FDCAN1_Init 2 */

}
 80004b8:	bf00      	nop
 80004ba:	3718      	adds	r7, #24
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20000028 	.word	0x20000028
 80004c4:	4000a400 	.word	0x4000a400
 80004c8:	200000d8 	.word	0x200000d8

080004cc <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80004d0:	2000      	movs	r0, #0
 80004d2:	f001 fdb7 	bl	8002044 <HAL_ICACHE_ConfigAssociativityMode>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80004dc:	f000 fa2a 	bl	8000934 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80004e0:	f001 fdd0 	bl	8002084 <HAL_ICACHE_Enable>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80004ea:	f000 fa23 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
	...

080004f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	@ 0x28
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004fa:	f107 031c 	add.w	r3, r7, #28
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000506:	463b      	mov	r3, r7
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]
 8000514:	615a      	str	r2, [r3, #20]
 8000516:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000518:	4b21      	ldr	r3, [pc, #132]	@ (80005a0 <MX_TIM3_Init+0xac>)
 800051a:	4a22      	ldr	r2, [pc, #136]	@ (80005a4 <MX_TIM3_Init+0xb0>)
 800051c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 800051e:	4b20      	ldr	r3, [pc, #128]	@ (80005a0 <MX_TIM3_Init+0xac>)
 8000520:	2259      	movs	r2, #89	@ 0x59
 8000522:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000524:	4b1e      	ldr	r3, [pc, #120]	@ (80005a0 <MX_TIM3_Init+0xac>)
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800052a:	4b1d      	ldr	r3, [pc, #116]	@ (80005a0 <MX_TIM3_Init+0xac>)
 800052c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000530:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000532:	4b1b      	ldr	r3, [pc, #108]	@ (80005a0 <MX_TIM3_Init+0xac>)
 8000534:	2200      	movs	r2, #0
 8000536:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000538:	4b19      	ldr	r3, [pc, #100]	@ (80005a0 <MX_TIM3_Init+0xac>)
 800053a:	2200      	movs	r2, #0
 800053c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800053e:	4818      	ldr	r0, [pc, #96]	@ (80005a0 <MX_TIM3_Init+0xac>)
 8000540:	f003 ff84 	bl	800444c <HAL_TIM_PWM_Init>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800054a:	f000 f9f3 	bl	8000934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800054e:	2300      	movs	r3, #0
 8000550:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000552:	2300      	movs	r3, #0
 8000554:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000556:	f107 031c 	add.w	r3, r7, #28
 800055a:	4619      	mov	r1, r3
 800055c:	4810      	ldr	r0, [pc, #64]	@ (80005a0 <MX_TIM3_Init+0xac>)
 800055e:	f004 ff2f 	bl	80053c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000568:	f000 f9e4 	bl	8000934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800056c:	2360      	movs	r3, #96	@ 0x60
 800056e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000574:	2300      	movs	r3, #0
 8000576:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000578:	2300      	movs	r3, #0
 800057a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800057c:	463b      	mov	r3, r7
 800057e:	2200      	movs	r2, #0
 8000580:	4619      	mov	r1, r3
 8000582:	4807      	ldr	r0, [pc, #28]	@ (80005a0 <MX_TIM3_Init+0xac>)
 8000584:	f004 f90c 	bl	80047a0 <HAL_TIM_PWM_ConfigChannel>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800058e:	f000 f9d1 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000592:	4803      	ldr	r0, [pc, #12]	@ (80005a0 <MX_TIM3_Init+0xac>)
 8000594:	f000 fa82 	bl	8000a9c <HAL_TIM_MspPostInit>

}
 8000598:	bf00      	nop
 800059a:	3728      	adds	r7, #40	@ 0x28
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	2000008c 	.word	0x2000008c
 80005a4:	40000400 	.word	0x40000400

080005a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b088      	sub	sp, #32
 80005ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005be:	4b33      	ldr	r3, [pc, #204]	@ (800068c <MX_GPIO_Init+0xe4>)
 80005c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005c4:	4a31      	ldr	r2, [pc, #196]	@ (800068c <MX_GPIO_Init+0xe4>)
 80005c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80005ce:	4b2f      	ldr	r3, [pc, #188]	@ (800068c <MX_GPIO_Init+0xe4>)
 80005d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005dc:	4b2b      	ldr	r3, [pc, #172]	@ (800068c <MX_GPIO_Init+0xe4>)
 80005de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005e2:	4a2a      	ldr	r2, [pc, #168]	@ (800068c <MX_GPIO_Init+0xe4>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80005ec:	4b27      	ldr	r3, [pc, #156]	@ (800068c <MX_GPIO_Init+0xe4>)
 80005ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	4b24      	ldr	r3, [pc, #144]	@ (800068c <MX_GPIO_Init+0xe4>)
 80005fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000600:	4a22      	ldr	r2, [pc, #136]	@ (800068c <MX_GPIO_Init+0xe4>)
 8000602:	f043 0302 	orr.w	r3, r3, #2
 8000606:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800060a:	4b20      	ldr	r3, [pc, #128]	@ (800068c <MX_GPIO_Init+0xe4>)
 800060c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000610:	f003 0302 	and.w	r3, r3, #2
 8000614:	603b      	str	r3, [r7, #0]
 8000616:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_8
 8000618:	2200      	movs	r2, #0
 800061a:	f240 7107 	movw	r1, #1799	@ 0x707
 800061e:	481c      	ldr	r0, [pc, #112]	@ (8000690 <MX_GPIO_Init+0xe8>)
 8000620:	f001 fcf8 	bl	8002014 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	2160      	movs	r1, #96	@ 0x60
 8000628:	481a      	ldr	r0, [pc, #104]	@ (8000694 <MX_GPIO_Init+0xec>)
 800062a:	f001 fcf3 	bl	8002014 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA8
                           PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_8
 800062e:	f240 7307 	movw	r3, #1799	@ 0x707
 8000632:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000634:	2301      	movs	r3, #1
 8000636:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	2300      	movs	r3, #0
 800063e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	4619      	mov	r1, r3
 8000646:	4812      	ldr	r0, [pc, #72]	@ (8000690 <MX_GPIO_Init+0xe8>)
 8000648:	f001 fb0c 	bl	8001c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800064c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000650:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	4619      	mov	r1, r3
 8000660:	480c      	ldr	r0, [pc, #48]	@ (8000694 <MX_GPIO_Init+0xec>)
 8000662:	f001 faff 	bl	8001c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000666:	2360      	movs	r3, #96	@ 0x60
 8000668:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066a:	2301      	movs	r3, #1
 800066c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000672:	2300      	movs	r3, #0
 8000674:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	4619      	mov	r1, r3
 800067c:	4805      	ldr	r0, [pc, #20]	@ (8000694 <MX_GPIO_Init+0xec>)
 800067e:	f001 faf1 	bl	8001c64 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000682:	bf00      	nop
 8000684:	3720      	adds	r7, #32
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	46020c00 	.word	0x46020c00
 8000690:	42020000 	.word	0x42020000
 8000694:	42020400 	.word	0x42020400

08000698 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t it)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b092      	sub	sp, #72	@ 0x48
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
    if ((it & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) == 0) return;
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d046      	beq.n	800073a <HAL_FDCAN_RxFifo0Callback+0xa2>

    FDCAN_RxHeaderTypeDef rx;
    uint8_t d[8];

    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rx, d) != HAL_OK) return;
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	f107 0214 	add.w	r2, r7, #20
 80006b4:	2140      	movs	r1, #64	@ 0x40
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f000 fef4 	bl	80014a4 <HAL_FDCAN_GetRxMessage>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d13d      	bne.n	800073e <HAL_FDCAN_RxFifo0Callback+0xa6>

    uint8_t n = getDataLength(&rx);
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 f848 	bl	800075c <getDataLength>
 80006cc:	4603      	mov	r3, r0
 80006ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    switch (rx.Identifier) {
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	f240 7202 	movw	r2, #1794	@ 0x702
 80006d8:	4293      	cmp	r3, r2
 80006da:	d004      	beq.n	80006e6 <HAL_FDCAN_RxFifo0Callback+0x4e>
 80006dc:	f240 7203 	movw	r2, #1795	@ 0x703
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d00b      	beq.n	80006fc <HAL_FDCAN_RxFifo0Callback+0x64>
        }
        break;

      default:
        // Optionally increment error counter here
        break;
 80006e4:	e030      	b.n	8000748 <HAL_FDCAN_RxFifo0Callback+0xb0>
         if (n >= 1 && d[0] == 1) {
 80006e6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d029      	beq.n	8000742 <HAL_FDCAN_RxFifo0Callback+0xaa>
 80006ee:	7b3b      	ldrb	r3, [r7, #12]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d126      	bne.n	8000742 <HAL_FDCAN_RxFifo0Callback+0xaa>
             servoZeroRequested = true;
 80006f4:	4b16      	ldr	r3, [pc, #88]	@ (8000750 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	701a      	strb	r2, [r3, #0]
        break;
 80006fa:	e022      	b.n	8000742 <HAL_FDCAN_RxFifo0Callback+0xaa>
        if (n >= 2) {
 80006fc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000700:	2b01      	cmp	r3, #1
 8000702:	d920      	bls.n	8000746 <HAL_FDCAN_RxFifo0Callback+0xae>
          int dir = d[0] ? +1 : -1;
 8000704:	7b3b      	ldrb	r3, [r7, #12]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <HAL_FDCAN_RxFifo0Callback+0x76>
 800070a:	2301      	movs	r3, #1
 800070c:	e001      	b.n	8000712 <HAL_FDCAN_RxFifo0Callback+0x7a>
 800070e:	f04f 33ff 	mov.w	r3, #4294967295
 8000712:	643b      	str	r3, [r7, #64]	@ 0x40
          uint8_t rotation = d[1];
 8000714:	7b7b      	ldrb	r3, [r7, #13]
 8000716:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
          servoAngle = (float)(dir * rotation);
 800071a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800071e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000720:	fb02 f303 	mul.w	r3, r2, r3
 8000724:	ee07 3a90 	vmov	s15, r3
 8000728:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800072c:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 800072e:	edc3 7a00 	vstr	s15, [r3]
          servoRotateRequested = true;
 8000732:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <HAL_FDCAN_RxFifo0Callback+0xc0>)
 8000734:	2201      	movs	r2, #1
 8000736:	701a      	strb	r2, [r3, #0]
        break;
 8000738:	e005      	b.n	8000746 <HAL_FDCAN_RxFifo0Callback+0xae>
    if ((it & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) == 0) return;
 800073a:	bf00      	nop
 800073c:	e004      	b.n	8000748 <HAL_FDCAN_RxFifo0Callback+0xb0>
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rx, d) != HAL_OK) return;
 800073e:	bf00      	nop
 8000740:	e002      	b.n	8000748 <HAL_FDCAN_RxFifo0Callback+0xb0>
        break;
 8000742:	bf00      	nop
 8000744:	e000      	b.n	8000748 <HAL_FDCAN_RxFifo0Callback+0xb0>
        break;
 8000746:	bf00      	nop
    }
}
 8000748:	3748      	adds	r7, #72	@ 0x48
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200000fc 	.word	0x200000fc
 8000754:	20000100 	.word	0x20000100
 8000758:	200000fd 	.word	0x200000fd

0800075c <getDataLength>:
    }
    HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader,
                                  (len && data) ? (uint8_t*)data : NULL);
}

uint8_t getDataLength(FDCAN_RxHeaderTypeDef *hdr) {
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  switch (hdr->DataLength) {
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	2b08      	cmp	r3, #8
 800076a:	d827      	bhi.n	80007bc <getDataLength+0x60>
 800076c:	a201      	add	r2, pc, #4	@ (adr r2, 8000774 <getDataLength+0x18>)
 800076e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000772:	bf00      	nop
 8000774:	08000799 	.word	0x08000799
 8000778:	0800079d 	.word	0x0800079d
 800077c:	080007a1 	.word	0x080007a1
 8000780:	080007a5 	.word	0x080007a5
 8000784:	080007a9 	.word	0x080007a9
 8000788:	080007ad 	.word	0x080007ad
 800078c:	080007b1 	.word	0x080007b1
 8000790:	080007b5 	.word	0x080007b5
 8000794:	080007b9 	.word	0x080007b9
    case FDCAN_DLC_BYTES_0: return 0;
 8000798:	2300      	movs	r3, #0
 800079a:	e010      	b.n	80007be <getDataLength+0x62>
    case FDCAN_DLC_BYTES_1: return 1;
 800079c:	2301      	movs	r3, #1
 800079e:	e00e      	b.n	80007be <getDataLength+0x62>
    case FDCAN_DLC_BYTES_2: return 2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	e00c      	b.n	80007be <getDataLength+0x62>
    case FDCAN_DLC_BYTES_3: return 3;
 80007a4:	2303      	movs	r3, #3
 80007a6:	e00a      	b.n	80007be <getDataLength+0x62>
    case FDCAN_DLC_BYTES_4: return 4;
 80007a8:	2304      	movs	r3, #4
 80007aa:	e008      	b.n	80007be <getDataLength+0x62>
    case FDCAN_DLC_BYTES_5: return 5;
 80007ac:	2305      	movs	r3, #5
 80007ae:	e006      	b.n	80007be <getDataLength+0x62>
    case FDCAN_DLC_BYTES_6: return 6;
 80007b0:	2306      	movs	r3, #6
 80007b2:	e004      	b.n	80007be <getDataLength+0x62>
    case FDCAN_DLC_BYTES_7: return 7;
 80007b4:	2307      	movs	r3, #7
 80007b6:	e002      	b.n	80007be <getDataLength+0x62>
    case FDCAN_DLC_BYTES_8: return 8;
 80007b8:	2308      	movs	r3, #8
 80007ba:	e000      	b.n	80007be <getDataLength+0x62>
    default: return 0;
 80007bc:	2300      	movs	r3, #0
  }
}
 80007be:	4618      	mov	r0, r3
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop

080007cc <setPWM>:



}

void setPWM(TIM_HandleTypeDef *timer_handle, uint32_t timer_channel, float duty) {
 80007cc:	b480      	push	{r7}
 80007ce:	b087      	sub	sp, #28
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	ed87 0a01 	vstr	s0, [r7, #4]

    uint32_t arr = __HAL_TIM_GET_AUTORELOAD(timer_handle);
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007e0:	613b      	str	r3, [r7, #16]
    uint32_t ccr = (uint32_t)((duty * (float)(arr + 1U)) + 0.5f);
 80007e2:	693b      	ldr	r3, [r7, #16]
 80007e4:	3301      	adds	r3, #1
 80007e6:	ee07 3a90 	vmov	s15, r3
 80007ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80007ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80007f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007f6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80007fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80007fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000802:	ee17 3a90 	vmov	r3, s15
 8000806:	617b      	str	r3, [r7, #20]
    if (ccr > arr) ccr = arr;
 8000808:	697a      	ldr	r2, [r7, #20]
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	429a      	cmp	r2, r3
 800080e:	d901      	bls.n	8000814 <setPWM+0x48>
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_COMPARE(timer_handle, timer_channel, ccr);
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d104      	bne.n	8000824 <setPWM+0x58>
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	697a      	ldr	r2, [r7, #20]
 8000820:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000822:	e023      	b.n	800086c <setPWM+0xa0>
    __HAL_TIM_SET_COMPARE(timer_handle, timer_channel, ccr);
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	2b04      	cmp	r3, #4
 8000828:	d104      	bne.n	8000834 <setPWM+0x68>
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000832:	e01b      	b.n	800086c <setPWM+0xa0>
    __HAL_TIM_SET_COMPARE(timer_handle, timer_channel, ccr);
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	2b08      	cmp	r3, #8
 8000838:	d104      	bne.n	8000844 <setPWM+0x78>
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000842:	e013      	b.n	800086c <setPWM+0xa0>
    __HAL_TIM_SET_COMPARE(timer_handle, timer_channel, ccr);
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	2b0c      	cmp	r3, #12
 8000848:	d104      	bne.n	8000854 <setPWM+0x88>
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000852:	e00b      	b.n	800086c <setPWM+0xa0>
    __HAL_TIM_SET_COMPARE(timer_handle, timer_channel, ccr);
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	2b10      	cmp	r3, #16
 8000858:	d104      	bne.n	8000864 <setPWM+0x98>
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8000862:	e003      	b.n	800086c <setPWM+0xa0>
    __HAL_TIM_SET_COMPARE(timer_handle, timer_channel, ccr);
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800086c:	bf00      	nop
 800086e:	371c      	adds	r7, #28
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <zeroServo>:

void zeroServo(void) {
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&MOTOR_TIMER_HANDLE, MOTOR_TIMER_CHANNEL);
 800087c:	2100      	movs	r1, #0
 800087e:	4804      	ldr	r0, [pc, #16]	@ (8000890 <zeroServo+0x18>)
 8000880:	f003 fe3c 	bl	80044fc <HAL_TIM_PWM_Start>
	servoRotate(0.0f);
 8000884:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8000894 <zeroServo+0x1c>
 8000888:	f000 f806 	bl	8000898 <servoRotate>
}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	2000008c 	.word	0x2000008c
 8000894:	00000000 	.word	0x00000000

08000898 <servoRotate>:

void servoRotate(float angle) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	ed87 0a01 	vstr	s0, [r7, #4]
	//The angle is mapped to -135 to 135 to properly represent CW and CCW rotations
	//Input of +90 == 90 deg rotation CW from the zero position.

	if (angle < -135 || angle > 135) angle = 0.0f;
 80008a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80008a6:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800091c <servoRotate+0x84>
 80008aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008b2:	d408      	bmi.n	80008c6 <servoRotate+0x2e>
 80008b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80008b8:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000920 <servoRotate+0x88>
 80008bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008c4:	dd02      	ble.n	80008cc <servoRotate+0x34>
 80008c6:	f04f 0300 	mov.w	r3, #0
 80008ca:	607b      	str	r3, [r7, #4]
	angle = 135.0f + angle; //135 degrees is the zero/middle position, since the servo motor can rotate 270 deg
 80008cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80008d0:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000920 <servoRotate+0x88>
 80008d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008d8:	edc7 7a01 	vstr	s15, [r7, #4]

	float degRatio = angle / 270.0f;
 80008dc:	ed97 7a01 	vldr	s14, [r7, #4]
 80008e0:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8000924 <servoRotate+0x8c>
 80008e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008e8:	edc7 7a05 	vstr	s15, [r7, #20]

	TIM_HandleTypeDef *htim = &MOTOR_TIMER_HANDLE;
 80008ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <servoRotate+0x90>)
 80008ee:	613b      	str	r3, [r7, #16]
	float duty = degRatio * 0.10f + 0.025f;  //mapping to 2.5%–12.5% duty cycle
 80008f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80008f4:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800092c <servoRotate+0x94>
 80008f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008fc:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8000930 <servoRotate+0x98>
 8000900:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000904:	edc7 7a03 	vstr	s15, [r7, #12]
	setPWM(htim, MOTOR_TIMER_CHANNEL, duty);
 8000908:	ed97 0a03 	vldr	s0, [r7, #12]
 800090c:	2100      	movs	r1, #0
 800090e:	6938      	ldr	r0, [r7, #16]
 8000910:	f7ff ff5c 	bl	80007cc <setPWM>

}
 8000914:	bf00      	nop
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	c3070000 	.word	0xc3070000
 8000920:	43070000 	.word	0x43070000
 8000924:	43870000 	.word	0x43870000
 8000928:	2000008c 	.word	0x2000008c
 800092c:	3dcccccd 	.word	0x3dcccccd
 8000930:	3ccccccd 	.word	0x3ccccccd

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <Error_Handler+0x8>

08000940 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	4b0a      	ldr	r3, [pc, #40]	@ (8000970 <HAL_MspInit+0x30>)
 8000948:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800094c:	4a08      	ldr	r2, [pc, #32]	@ (8000970 <HAL_MspInit+0x30>)
 800094e:	f043 0304 	orr.w	r3, r3, #4
 8000952:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <HAL_MspInit+0x30>)
 8000958:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800095c:	f003 0304 	and.w	r3, r3, #4
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	46020c00 	.word	0x46020c00

08000974 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b0ba      	sub	sp, #232	@ 0xe8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800098c:	f107 0310 	add.w	r3, r7, #16
 8000990:	22c0      	movs	r2, #192	@ 0xc0
 8000992:	2100      	movs	r1, #0
 8000994:	4618      	mov	r0, r3
 8000996:	f004 fdd5 	bl	8005544 <memset>
  if(hfdcan->Instance==FDCAN1)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a2b      	ldr	r2, [pc, #172]	@ (8000a4c <HAL_FDCAN_MspInit+0xd8>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d14f      	bne.n	8000a44 <HAL_FDCAN_MspInit+0xd0>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN1;
 80009a4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80009a8:	f04f 0300 	mov.w	r3, #0
 80009ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Fdcan1ClockSelection = RCC_FDCAN1CLKSOURCE_PLL1;
 80009b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80009b4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009b8:	f107 0310 	add.w	r3, r7, #16
 80009bc:	4618      	mov	r0, r3
 80009be:	f002 fe71 	bl	80036a4 <HAL_RCCEx_PeriphCLKConfig>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 80009c8:	f7ff ffb4 	bl	8000934 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN1_CLK_ENABLE();
 80009cc:	4b20      	ldr	r3, [pc, #128]	@ (8000a50 <HAL_FDCAN_MspInit+0xdc>)
 80009ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80009d2:	4a1f      	ldr	r2, [pc, #124]	@ (8000a50 <HAL_FDCAN_MspInit+0xdc>)
 80009d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009d8:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 80009dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000a50 <HAL_FDCAN_MspInit+0xdc>)
 80009de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80009e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	4b19      	ldr	r3, [pc, #100]	@ (8000a50 <HAL_FDCAN_MspInit+0xdc>)
 80009ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009f0:	4a17      	ldr	r2, [pc, #92]	@ (8000a50 <HAL_FDCAN_MspInit+0xdc>)
 80009f2:	f043 0302 	orr.w	r3, r3, #2
 80009f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009fa:	4b15      	ldr	r3, [pc, #84]	@ (8000a50 <HAL_FDCAN_MspInit+0xdc>)
 80009fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a00:	f003 0302 	and.w	r3, r3, #2
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a08:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a0c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000a22:	2309      	movs	r3, #9
 8000a24:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a28:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4809      	ldr	r0, [pc, #36]	@ (8000a54 <HAL_FDCAN_MspInit+0xe0>)
 8000a30:	f001 f918 	bl	8001c64 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2100      	movs	r1, #0
 8000a38:	2027      	movs	r0, #39	@ 0x27
 8000a3a:	f000 fa83 	bl	8000f44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000a3e:	2027      	movs	r0, #39	@ 0x27
 8000a40:	f000 fa9a 	bl	8000f78 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000a44:	bf00      	nop
 8000a46:	37e8      	adds	r7, #232	@ 0xe8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	4000a400 	.word	0x4000a400
 8000a50:	46020c00 	.word	0x46020c00
 8000a54:	42020400 	.word	0x42020400

08000a58 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a0b      	ldr	r2, [pc, #44]	@ (8000a94 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d10e      	bne.n	8000a88 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a98 <HAL_TIM_PWM_MspInit+0x40>)
 8000a6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000a70:	4a09      	ldr	r2, [pc, #36]	@ (8000a98 <HAL_TIM_PWM_MspInit+0x40>)
 8000a72:	f043 0302 	orr.w	r3, r3, #2
 8000a76:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000a7a:	4b07      	ldr	r3, [pc, #28]	@ (8000a98 <HAL_TIM_PWM_MspInit+0x40>)
 8000a7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000a80:	f003 0302 	and.w	r3, r3, #2
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000a88:	bf00      	nop
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	40000400 	.word	0x40000400
 8000a98:	46020c00 	.word	0x46020c00

08000a9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 030c 	add.w	r3, r7, #12
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a12      	ldr	r2, [pc, #72]	@ (8000b04 <HAL_TIM_MspPostInit+0x68>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d11e      	bne.n	8000afc <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	4b12      	ldr	r3, [pc, #72]	@ (8000b08 <HAL_TIM_MspPostInit+0x6c>)
 8000ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ac4:	4a10      	ldr	r2, [pc, #64]	@ (8000b08 <HAL_TIM_MspPostInit+0x6c>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ace:	4b0e      	ldr	r3, [pc, #56]	@ (8000b08 <HAL_TIM_MspPostInit+0x6c>)
 8000ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000adc:	2340      	movs	r3, #64	@ 0x40
 8000ade:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000aec:	2302      	movs	r3, #2
 8000aee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af0:	f107 030c 	add.w	r3, r7, #12
 8000af4:	4619      	mov	r1, r3
 8000af6:	4805      	ldr	r0, [pc, #20]	@ (8000b0c <HAL_TIM_MspPostInit+0x70>)
 8000af8:	f001 f8b4 	bl	8001c64 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000afc:	bf00      	nop
 8000afe:	3720      	adds	r7, #32
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40000400 	.word	0x40000400
 8000b08:	46020c00 	.word	0x46020c00
 8000b0c:	42020000 	.word	0x42020000

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <NMI_Handler+0x4>

08000b18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <HardFault_Handler+0x4>

08000b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <MemManage_Handler+0x4>

08000b28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <BusFault_Handler+0x4>

08000b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <UsageFault_Handler+0x4>

08000b38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b66:	f000 f915 	bl	8000d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000b74:	4802      	ldr	r0, [pc, #8]	@ (8000b80 <FDCAN1_IT0_IRQHandler+0x10>)
 8000b76:	f000 fe83 	bl	8001880 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000028 	.word	0x20000028

08000b84 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b88:	4b18      	ldr	r3, [pc, #96]	@ (8000bec <SystemInit+0x68>)
 8000b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b8e:	4a17      	ldr	r2, [pc, #92]	@ (8000bec <SystemInit+0x68>)
 8000b90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000b98:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <SystemInit+0x6c>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000b9e:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <SystemInit+0x6c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000ba4:	4b12      	ldr	r3, [pc, #72]	@ (8000bf0 <SystemInit+0x6c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000baa:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <SystemInit+0x6c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf0 <SystemInit+0x6c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a0e      	ldr	r2, [pc, #56]	@ (8000bf0 <SystemInit+0x6c>)
 8000bb6:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000bba:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000bbe:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf0 <SystemInit+0x6c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf0 <SystemInit+0x6c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a09      	ldr	r2, [pc, #36]	@ (8000bf0 <SystemInit+0x6c>)
 8000bcc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bd0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000bd2:	4b07      	ldr	r3, [pc, #28]	@ (8000bf0 <SystemInit+0x6c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bd8:	4b04      	ldr	r3, [pc, #16]	@ (8000bec <SystemInit+0x68>)
 8000bda:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000bde:	609a      	str	r2, [r3, #8]
  #endif
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000ed00 	.word	0xe000ed00
 8000bf0:	46020c00 	.word	0x46020c00

08000bf4 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   sp, =_estack    /* set stack pointer */
 8000bf4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c2c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bf8:	f7ff ffc4 	bl	8000b84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000bfc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000bfe:	e003      	b.n	8000c08 <LoopCopyDataInit>

08000c00 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c00:	4b0b      	ldr	r3, [pc, #44]	@ (8000c30 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c02:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c04:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c06:	3104      	adds	r1, #4

08000c08 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c08:	480a      	ldr	r0, [pc, #40]	@ (8000c34 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c38 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c0c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c0e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c10:	d3f6      	bcc.n	8000c00 <CopyDataInit>
	ldr	r2, =_sbss
 8000c12:	4a0a      	ldr	r2, [pc, #40]	@ (8000c3c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c14:	e002      	b.n	8000c1c <LoopFillZerobss>

08000c16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c16:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c18:	f842 3b04 	str.w	r3, [r2], #4

08000c1c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c1c:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <LoopForever+0x16>)
	cmp	r2, r3
 8000c1e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c20:	d3f9      	bcc.n	8000c16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c22:	f004 fc97 	bl	8005554 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c26:	f7ff fb27 	bl	8000278 <main>

08000c2a <LoopForever>:

LoopForever:
    b LoopForever
 8000c2a:	e7fe      	b.n	8000c2a <LoopForever>
Reset_Handler:  ldr   sp, =_estack    /* set stack pointer */
 8000c2c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000c30:	0800569c 	.word	0x0800569c
	ldr	r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c38:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8000c3c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000c40:	20000108 	.word	0x20000108

08000c44 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c44:	e7fe      	b.n	8000c44 <ADC1_IRQHandler>
	...

08000c48 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c4c:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <HAL_Init+0x50>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a11      	ldr	r2, [pc, #68]	@ (8000c98 <HAL_Init+0x50>)
 8000c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c58:	2003      	movs	r0, #3
 8000c5a:	f000 f968 	bl	8000f2e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000c5e:	f002 fb7b 	bl	8003358 <HAL_RCC_GetSysClockFreq>
 8000c62:	4602      	mov	r2, r0
 8000c64:	4b0d      	ldr	r3, [pc, #52]	@ (8000c9c <HAL_Init+0x54>)
 8000c66:	6a1b      	ldr	r3, [r3, #32]
 8000c68:	f003 030f 	and.w	r3, r3, #15
 8000c6c:	490c      	ldr	r1, [pc, #48]	@ (8000ca0 <HAL_Init+0x58>)
 8000c6e:	5ccb      	ldrb	r3, [r1, r3]
 8000c70:	fa22 f303 	lsr.w	r3, r2, r3
 8000c74:	4a0b      	ldr	r2, [pc, #44]	@ (8000ca4 <HAL_Init+0x5c>)
 8000c76:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000c78:	2004      	movs	r0, #4
 8000c7a:	f000 f9ad 	bl	8000fd8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c7e:	200f      	movs	r0, #15
 8000c80:	f000 f812 	bl	8000ca8 <HAL_InitTick>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e002      	b.n	8000c94 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c8e:	f7ff fe57 	bl	8000940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40022000 	.word	0x40022000
 8000c9c:	46020c00 	.word	0x46020c00
 8000ca0:	080055b4 	.word	0x080055b4
 8000ca4:	20000000 	.word	0x20000000

08000ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000cb4:	4b33      	ldr	r3, [pc, #204]	@ (8000d84 <HAL_InitTick+0xdc>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d101      	bne.n	8000cc0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e05c      	b.n	8000d7a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000cc0:	4b31      	ldr	r3, [pc, #196]	@ (8000d88 <HAL_InitTick+0xe0>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f003 0304 	and.w	r3, r3, #4
 8000cc8:	2b04      	cmp	r3, #4
 8000cca:	d10c      	bne.n	8000ce6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000ccc:	4b2f      	ldr	r3, [pc, #188]	@ (8000d8c <HAL_InitTick+0xe4>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4b2c      	ldr	r3, [pc, #176]	@ (8000d84 <HAL_InitTick+0xdc>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	e037      	b.n	8000d56 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000ce6:	f000 f9cf 	bl	8001088 <HAL_SYSTICK_GetCLKSourceConfig>
 8000cea:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d023      	beq.n	8000d3a <HAL_InitTick+0x92>
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d82d      	bhi.n	8000d54 <HAL_InitTick+0xac>
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d003      	beq.n	8000d06 <HAL_InitTick+0x5e>
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d00d      	beq.n	8000d20 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000d04:	e026      	b.n	8000d54 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000d06:	4b21      	ldr	r3, [pc, #132]	@ (8000d8c <HAL_InitTick+0xe4>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d84 <HAL_InitTick+0xdc>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000d14:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1c:	60fb      	str	r3, [r7, #12]
        break;
 8000d1e:	e01a      	b.n	8000d56 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000d20:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <HAL_InitTick+0xdc>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d2e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d36:	60fb      	str	r3, [r7, #12]
        break;
 8000d38:	e00d      	b.n	8000d56 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000d3a:	4b12      	ldr	r3, [pc, #72]	@ (8000d84 <HAL_InitTick+0xdc>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d44:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d48:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d50:	60fb      	str	r3, [r7, #12]
        break;
 8000d52:	e000      	b.n	8000d56 <HAL_InitTick+0xae>
        break;
 8000d54:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000d56:	68f8      	ldr	r0, [r7, #12]
 8000d58:	f000 f91c 	bl	8000f94 <HAL_SYSTICK_Config>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e009      	b.n	8000d7a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d66:	2200      	movs	r2, #0
 8000d68:	6879      	ldr	r1, [r7, #4]
 8000d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6e:	f000 f8e9 	bl	8000f44 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000d72:	4a07      	ldr	r2, [pc, #28]	@ (8000d90 <HAL_InitTick+0xe8>)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000008 	.word	0x20000008
 8000d88:	e000e010 	.word	0xe000e010
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	20000004 	.word	0x20000004

08000d94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d98:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <HAL_IncTick+0x20>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <HAL_IncTick+0x24>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	4a04      	ldr	r2, [pc, #16]	@ (8000db8 <HAL_IncTick+0x24>)
 8000da6:	6013      	str	r3, [r2, #0]
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000008 	.word	0x20000008
 8000db8:	20000104 	.word	0x20000104

08000dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc0:	4b03      	ldr	r3, [pc, #12]	@ (8000dd0 <HAL_GetTick+0x14>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000104 	.word	0x20000104

08000dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e18 <__NVIC_SetPriorityGrouping+0x44>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000df0:	4013      	ands	r3, r2
 8000df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e06:	4a04      	ldr	r2, [pc, #16]	@ (8000e18 <__NVIC_SetPriorityGrouping+0x44>)
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	60d3      	str	r3, [r2, #12]
}
 8000e0c:	bf00      	nop
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e20:	4b04      	ldr	r3, [pc, #16]	@ (8000e34 <__NVIC_GetPriorityGrouping+0x18>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	0a1b      	lsrs	r3, r3, #8
 8000e26:	f003 0307 	and.w	r3, r3, #7
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	db0b      	blt.n	8000e62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	f003 021f 	and.w	r2, r3, #31
 8000e50:	4907      	ldr	r1, [pc, #28]	@ (8000e70 <__NVIC_EnableIRQ+0x38>)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	095b      	lsrs	r3, r3, #5
 8000e58:	2001      	movs	r0, #1
 8000e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000e100 	.word	0xe000e100

08000e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	db0a      	blt.n	8000e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	490c      	ldr	r1, [pc, #48]	@ (8000ec0 <__NVIC_SetPriority+0x4c>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	0112      	lsls	r2, r2, #4
 8000e94:	b2d2      	uxtb	r2, r2
 8000e96:	440b      	add	r3, r1
 8000e98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e9c:	e00a      	b.n	8000eb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4908      	ldr	r1, [pc, #32]	@ (8000ec4 <__NVIC_SetPriority+0x50>)
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	f003 030f 	and.w	r3, r3, #15
 8000eaa:	3b04      	subs	r3, #4
 8000eac:	0112      	lsls	r2, r2, #4
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	761a      	strb	r2, [r3, #24]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000e100 	.word	0xe000e100
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b089      	sub	sp, #36	@ 0x24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f1c3 0307 	rsb	r3, r3, #7
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	bf28      	it	cs
 8000ee6:	2304      	movcs	r3, #4
 8000ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3304      	adds	r3, #4
 8000eee:	2b06      	cmp	r3, #6
 8000ef0:	d902      	bls.n	8000ef8 <NVIC_EncodePriority+0x30>
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3b03      	subs	r3, #3
 8000ef6:	e000      	b.n	8000efa <NVIC_EncodePriority+0x32>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	f04f 32ff 	mov.w	r2, #4294967295
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43da      	mvns	r2, r3
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f10:	f04f 31ff 	mov.w	r1, #4294967295
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	43d9      	mvns	r1, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	4313      	orrs	r3, r2
         );
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3724      	adds	r7, #36	@ 0x24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff ff4c 	bl	8000dd4 <__NVIC_SetPriorityGrouping>
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
 8000f50:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f52:	f7ff ff63 	bl	8000e1c <__NVIC_GetPriorityGrouping>
 8000f56:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	68b9      	ldr	r1, [r7, #8]
 8000f5c:	6978      	ldr	r0, [r7, #20]
 8000f5e:	f7ff ffb3 	bl	8000ec8 <NVIC_EncodePriority>
 8000f62:	4602      	mov	r2, r0
 8000f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f68:	4611      	mov	r1, r2
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ff82 	bl	8000e74 <__NVIC_SetPriority>
}
 8000f70:	bf00      	nop
 8000f72:	3718      	adds	r7, #24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ff56 	bl	8000e38 <__NVIC_EnableIRQ>
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fa4:	d301      	bcc.n	8000faa <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00d      	b.n	8000fc6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000faa:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd4 <HAL_SYSTICK_Config+0x40>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000fb2:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <HAL_SYSTICK_Config+0x40>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000fb8:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <HAL_SYSTICK_Config+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a05      	ldr	r2, [pc, #20]	@ (8000fd4 <HAL_SYSTICK_Config+0x40>)
 8000fbe:	f043 0303 	orr.w	r3, r3, #3
 8000fc2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000e010 	.word	0xe000e010

08000fd8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	d844      	bhi.n	8001070 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8000fec <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fec:	0800100f 	.word	0x0800100f
 8000ff0:	0800102d 	.word	0x0800102d
 8000ff4:	0800104f 	.word	0x0800104f
 8000ff8:	08001071 	.word	0x08001071
 8000ffc:	08001001 	.word	0x08001001
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001000:	4b1f      	ldr	r3, [pc, #124]	@ (8001080 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a1e      	ldr	r2, [pc, #120]	@ (8001080 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001006:	f043 0304 	orr.w	r3, r3, #4
 800100a:	6013      	str	r3, [r2, #0]
      break;
 800100c:	e031      	b.n	8001072 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800100e:	4b1c      	ldr	r3, [pc, #112]	@ (8001080 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a1b      	ldr	r2, [pc, #108]	@ (8001080 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001014:	f023 0304 	bic.w	r3, r3, #4
 8001018:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800101a:	4b1a      	ldr	r3, [pc, #104]	@ (8001084 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800101c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001020:	4a18      	ldr	r2, [pc, #96]	@ (8001084 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001022:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001026:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800102a:	e022      	b.n	8001072 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800102c:	4b14      	ldr	r3, [pc, #80]	@ (8001080 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a13      	ldr	r2, [pc, #76]	@ (8001080 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001032:	f023 0304 	bic.w	r3, r3, #4
 8001036:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001038:	4b12      	ldr	r3, [pc, #72]	@ (8001084 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800103a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001042:	4a10      	ldr	r2, [pc, #64]	@ (8001084 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001044:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001048:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800104c:	e011      	b.n	8001072 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800104e:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a0b      	ldr	r2, [pc, #44]	@ (8001080 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001054:	f023 0304 	bic.w	r3, r3, #4
 8001058:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800105a:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800105c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001060:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001064:	4a07      	ldr	r2, [pc, #28]	@ (8001084 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001066:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800106a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800106e:	e000      	b.n	8001072 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001070:	bf00      	nop
  }
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000e010 	.word	0xe000e010
 8001084:	46020c00 	.word	0x46020c00

08001088 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800108e:	4b19      	ldr	r3, [pc, #100]	@ (80010f4 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0304 	and.w	r3, r3, #4
 8001096:	2b00      	cmp	r3, #0
 8001098:	d002      	beq.n	80010a0 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800109a:	2304      	movs	r3, #4
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	e021      	b.n	80010e4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80010a0:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80010a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a6:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80010aa:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80010b2:	d011      	beq.n	80010d8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80010ba:	d810      	bhi.n	80010de <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d004      	beq.n	80010cc <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010c8:	d003      	beq.n	80010d2 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80010ca:	e008      	b.n	80010de <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80010cc:	2300      	movs	r3, #0
 80010ce:	607b      	str	r3, [r7, #4]
        break;
 80010d0:	e008      	b.n	80010e4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80010d2:	2301      	movs	r3, #1
 80010d4:	607b      	str	r3, [r7, #4]
        break;
 80010d6:	e005      	b.n	80010e4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80010d8:	2302      	movs	r3, #2
 80010da:	607b      	str	r3, [r7, #4]
        break;
 80010dc:	e002      	b.n	80010e4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
        break;
 80010e2:	bf00      	nop
    }
  }
  return systick_source;
 80010e4:	687b      	ldr	r3, [r7, #4]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	e000e010 	.word	0xe000e010
 80010f8:	46020c00 	.word	0x46020c00

080010fc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e142      	b.n	8001394 <HAL_FDCAN_Init+0x298>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	d106      	bne.n	8001128 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff fc26 	bl	8000974 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	699a      	ldr	r2, [r3, #24]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f022 0210 	bic.w	r2, r2, #16
 8001136:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001138:	f7ff fe40 	bl	8000dbc <HAL_GetTick>
 800113c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800113e:	e012      	b.n	8001166 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001140:	f7ff fe3c 	bl	8000dbc <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b0a      	cmp	r3, #10
 800114c:	d90b      	bls.n	8001166 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001152:	f043 0201 	orr.w	r2, r3, #1
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2203      	movs	r2, #3
 800115e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e116      	b.n	8001394 <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f003 0308 	and.w	r3, r3, #8
 8001170:	2b08      	cmp	r3, #8
 8001172:	d0e5      	beq.n	8001140 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	699a      	ldr	r2, [r3, #24]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f042 0201 	orr.w	r2, r2, #1
 8001182:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001184:	f7ff fe1a 	bl	8000dbc <HAL_GetTick>
 8001188:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800118a:	e012      	b.n	80011b2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800118c:	f7ff fe16 	bl	8000dbc <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b0a      	cmp	r3, #10
 8001198:	d90b      	bls.n	80011b2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800119e:	f043 0201 	orr.w	r2, r3, #1
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2203      	movs	r2, #3
 80011aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e0f0      	b.n	8001394 <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d0e5      	beq.n	800118c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	699a      	ldr	r2, [r3, #24]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f042 0202 	orr.w	r2, r2, #2
 80011ce:	619a      	str	r2, [r3, #24]

  /* Configure Clock divider */
  FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80011d0:	4a72      	ldr	r2, [pc, #456]	@ (800139c <HAL_FDCAN_Init+0x2a0>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	6013      	str	r3, [r2, #0]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	7c1b      	ldrb	r3, [r3, #16]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d108      	bne.n	80011f2 <HAL_FDCAN_Init+0xf6>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	699a      	ldr	r2, [r3, #24]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80011ee:	619a      	str	r2, [r3, #24]
 80011f0:	e007      	b.n	8001202 <HAL_FDCAN_Init+0x106>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	699a      	ldr	r2, [r3, #24]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001200:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	7c5b      	ldrb	r3, [r3, #17]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d108      	bne.n	800121c <HAL_FDCAN_Init+0x120>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	699a      	ldr	r2, [r3, #24]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001218:	619a      	str	r2, [r3, #24]
 800121a:	e007      	b.n	800122c <HAL_FDCAN_Init+0x130>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	699a      	ldr	r2, [r3, #24]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800122a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7c9b      	ldrb	r3, [r3, #18]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d108      	bne.n	8001246 <HAL_FDCAN_Init+0x14a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	699a      	ldr	r2, [r3, #24]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001242:	619a      	str	r2, [r3, #24]
 8001244:	e007      	b.n	8001256 <HAL_FDCAN_Init+0x15a>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	699a      	ldr	r2, [r3, #24]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001254:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	430a      	orrs	r2, r1
 800126a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	699a      	ldr	r2, [r3, #24]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800127a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	691a      	ldr	r2, [r3, #16]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f022 0210 	bic.w	r2, r2, #16
 800128a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d108      	bne.n	80012a6 <HAL_FDCAN_Init+0x1aa>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	699a      	ldr	r2, [r3, #24]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f042 0204 	orr.w	r2, r2, #4
 80012a2:	619a      	str	r2, [r3, #24]
 80012a4:	e02c      	b.n	8001300 <HAL_FDCAN_Init+0x204>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d028      	beq.n	8001300 <HAL_FDCAN_Init+0x204>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d01c      	beq.n	80012f0 <HAL_FDCAN_Init+0x1f4>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	699a      	ldr	r2, [r3, #24]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012c4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	691a      	ldr	r2, [r3, #16]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f042 0210 	orr.w	r2, r2, #16
 80012d4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d110      	bne.n	8001300 <HAL_FDCAN_Init+0x204>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	699a      	ldr	r2, [r3, #24]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f042 0220 	orr.w	r2, r2, #32
 80012ec:	619a      	str	r2, [r3, #24]
 80012ee:	e007      	b.n	8001300 <HAL_FDCAN_Init+0x204>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	699a      	ldr	r2, [r3, #24]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f042 0220 	orr.w	r2, r2, #32
 80012fe:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	3b01      	subs	r3, #1
 8001306:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69db      	ldr	r3, [r3, #28]
 800130c:	3b01      	subs	r3, #1
 800130e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001310:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a1b      	ldr	r3, [r3, #32]
 8001316:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001318:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	695b      	ldr	r3, [r3, #20]
 8001320:	3b01      	subs	r3, #1
 8001322:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001328:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800132a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001334:	d115      	bne.n	8001362 <HAL_FDCAN_Init+0x266>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800133a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001340:	3b01      	subs	r3, #1
 8001342:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001344:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	3b01      	subs	r3, #1
 800134c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800134e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001356:	3b01      	subs	r3, #1
 8001358:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800135e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001360:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	430a      	orrs	r2, r1
 8001374:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f000 fc1d 	bl	8001bb8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2201      	movs	r2, #1
 800138e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	4000a500 	.word	0x4000a500

080013a0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b087      	sub	sp, #28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80013b0:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80013b2:	7dfb      	ldrb	r3, [r7, #23]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d002      	beq.n	80013be <HAL_FDCAN_ConfigFilter+0x1e>
 80013b8:	7dfb      	ldrb	r3, [r7, #23]
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d13d      	bne.n	800143a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d119      	bne.n	80013fa <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80013d2:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80013da:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	e01d      	b.n	8001436 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	075a      	lsls	r2, r3, #29
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	079a      	lsls	r2, r3, #30
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	4313      	orrs	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	4413      	add	r3, r2
 8001422:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	3304      	adds	r3, #4
 800142e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	e006      	b.n	8001448 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800143e:	f043 0202 	orr.w	r2, r3, #2
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
  }
}
 8001448:	4618      	mov	r0, r3
 800144a:	371c      	adds	r7, #28
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b01      	cmp	r3, #1
 8001466:	d110      	bne.n	800148a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2202      	movs	r2, #2
 800146c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	699a      	ldr	r2, [r3, #24]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0201 	bic.w	r2, r2, #1
 800147e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	e006      	b.n	8001498 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800148e:	f043 0204 	orr.w	r2, r3, #4
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
  }
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b08b      	sub	sp, #44	@ 0x2c
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
 80014b0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80014bc:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80014be:	7efb      	ldrb	r3, [r7, #27]
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	f040 80e8 	bne.w	8001696 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	2b40      	cmp	r3, #64	@ 0x40
 80014ca:	d137      	bne.n	800153c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014d4:	f003 030f 	and.w	r3, r3, #15
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d107      	bne.n	80014ec <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e0db      	b.n	80016a4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80014f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014fc:	d10a      	bne.n	8001514 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001506:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800150a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800150e:	d101      	bne.n	8001514 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001510:	2301      	movs	r3, #1
 8001512:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800151c:	0a1b      	lsrs	r3, r3, #8
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	69fa      	ldr	r2, [r7, #28]
 8001524:	4413      	add	r3, r2
 8001526:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800152c:	69fa      	ldr	r2, [r7, #28]
 800152e:	4613      	mov	r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	4413      	add	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	440b      	add	r3, r1
 8001538:	627b      	str	r3, [r7, #36]	@ 0x24
 800153a:	e036      	b.n	80015aa <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001544:	f003 030f 	and.w	r3, r3, #15
 8001548:	2b00      	cmp	r3, #0
 800154a:	d107      	bne.n	800155c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001550:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e0a3      	b.n	80016a4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001564:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001568:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800156c:	d10a      	bne.n	8001584 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800157a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800157e:	d101      	bne.n	8001584 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001580:	2301      	movs	r3, #1
 8001582:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800158c:	0a1b      	lsrs	r3, r3, #8
 800158e:	f003 0303 	and.w	r3, r3, #3
 8001592:	69fa      	ldr	r2, [r7, #28]
 8001594:	4413      	add	r3, r2
 8001596:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800159c:	69fa      	ldr	r2, [r7, #28]
 800159e:	4613      	mov	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	4413      	add	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	440b      	add	r3, r1
 80015a8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80015aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d107      	bne.n	80015ce <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80015be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	0c9b      	lsrs	r3, r3, #18
 80015c4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	e005      	b.n	80015da <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80015ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80015da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80015e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80015f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f4:	3304      	adds	r3, #4
 80015f6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80015f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	0c1b      	lsrs	r3, r3, #16
 8001608:	f003 020f 	and.w	r2, r3, #15
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800161c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	0e1b      	lsrs	r3, r3, #24
 800162e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	0fda      	lsrs	r2, r3, #31
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001642:	3304      	adds	r3, #4
 8001644:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001648:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800164a:	2300      	movs	r3, #0
 800164c:	623b      	str	r3, [r7, #32]
 800164e:	e00a      	b.n	8001666 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	6a3b      	ldr	r3, [r7, #32]
 8001654:	441a      	add	r2, r3
 8001656:	6839      	ldr	r1, [r7, #0]
 8001658:	6a3b      	ldr	r3, [r7, #32]
 800165a:	440b      	add	r3, r1
 800165c:	7812      	ldrb	r2, [r2, #0]
 800165e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001660:	6a3b      	ldr	r3, [r7, #32]
 8001662:	3301      	adds	r3, #1
 8001664:	623b      	str	r3, [r7, #32]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	4a11      	ldr	r2, [pc, #68]	@ (80016b0 <HAL_FDCAN_GetRxMessage+0x20c>)
 800166c:	5cd3      	ldrb	r3, [r2, r3]
 800166e:	461a      	mov	r2, r3
 8001670:	6a3b      	ldr	r3, [r7, #32]
 8001672:	4293      	cmp	r3, r2
 8001674:	d3ec      	bcc.n	8001650 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	2b40      	cmp	r3, #64	@ 0x40
 800167a:	d105      	bne.n	8001688 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	69fa      	ldr	r2, [r7, #28]
 8001682:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001686:	e004      	b.n	8001692 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	69fa      	ldr	r2, [r7, #28]
 800168e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	e006      	b.n	80016a4 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800169a:	f043 0208 	orr.w	r2, r3, #8
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
  }
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	372c      	adds	r7, #44	@ 0x2c
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	08005604 	.word	0x08005604

080016b4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80016c6:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80016c8:	7dfb      	ldrb	r3, [r7, #23]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d003      	beq.n	80016d6 <HAL_FDCAN_ActivateNotification+0x22>
 80016ce:	7dfb      	ldrb	r3, [r7, #23]
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	f040 80c8 	bne.w	8001866 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016dc:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d004      	beq.n	80016f2 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d03b      	beq.n	800176a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d004      	beq.n	8001706 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d031      	beq.n	800176a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800170c:	2b00      	cmp	r3, #0
 800170e:	d004      	beq.n	800171a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	f003 0304 	and.w	r3, r3, #4
 8001716:	2b00      	cmp	r3, #0
 8001718:	d027      	beq.n	800176a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001720:	2b00      	cmp	r3, #0
 8001722:	d004      	beq.n	800172e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	2b00      	cmp	r3, #0
 800172c:	d01d      	beq.n	800176a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001734:	2b00      	cmp	r3, #0
 8001736:	d004      	beq.n	8001742 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	f003 0310 	and.w	r3, r3, #16
 800173e:	2b00      	cmp	r3, #0
 8001740:	d013      	beq.n	800176a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001748:	2b00      	cmp	r3, #0
 800174a:	d004      	beq.n	8001756 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	f003 0320 	and.w	r3, r3, #32
 8001752:	2b00      	cmp	r3, #0
 8001754:	d009      	beq.n	800176a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00c      	beq.n	800177a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001766:	2b00      	cmp	r3, #0
 8001768:	d107      	bne.n	800177a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f042 0201 	orr.w	r2, r2, #1
 8001778:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	2b00      	cmp	r3, #0
 8001782:	d004      	beq.n	800178e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d13b      	bne.n	8001806 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001794:	2b00      	cmp	r3, #0
 8001796:	d004      	beq.n	80017a2 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d131      	bne.n	8001806 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d004      	beq.n	80017b6 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d127      	bne.n	8001806 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d004      	beq.n	80017ca <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d11d      	bne.n	8001806 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d004      	beq.n	80017de <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	f003 0310 	and.w	r3, r3, #16
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d113      	bne.n	8001806 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d004      	beq.n	80017f2 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	f003 0320 	and.w	r3, r3, #32
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d109      	bne.n	8001806 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d00c      	beq.n	8001816 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001802:	2b00      	cmp	r3, #0
 8001804:	d007      	beq.n	8001816 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f042 0202 	orr.w	r2, r2, #2
 8001814:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800181c:	2b00      	cmp	r3, #0
 800181e:	d009      	beq.n	8001834 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	430a      	orrs	r2, r1
 8001830:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800183a:	2b00      	cmp	r3, #0
 800183c:	d009      	beq.n	8001852 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	430a      	orrs	r2, r1
 800184e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68ba      	ldr	r2, [r7, #8]
 800185e:	430a      	orrs	r2, r1
 8001860:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001862:	2300      	movs	r3, #0
 8001864:	e006      	b.n	8001874 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800186a:	f043 0202 	orr.w	r2, r3, #2
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
  }
}
 8001874:	4618      	mov	r0, r3
 8001876:	371c      	adds	r7, #28
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08c      	sub	sp, #48	@ 0x30
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800188e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800189a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800189c:	4013      	ands	r3, r2
 800189e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018b4:	4013      	ands	r3, r2
 80018b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018c2:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018cc:	4013      	ands	r3, r2
 80018ce:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018d6:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80018da:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018e2:	6a3a      	ldr	r2, [r7, #32]
 80018e4:	4013      	ands	r3, r2
 80018e6:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018ee:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80018f2:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018fa:	69fa      	ldr	r2, [r7, #28]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001906:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800190e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	099b      	lsrs	r3, r3, #6
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00c      	beq.n	8001936 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	099b      	lsrs	r3, r3, #6
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b00      	cmp	r3, #0
 8001926:	d006      	beq.n	8001936 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2240      	movs	r2, #64	@ 0x40
 800192e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 f922 	bl	8001b7a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	0a1b      	lsrs	r3, r3, #8
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d01a      	beq.n	8001978 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	d014      	beq.n	8001978 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001956:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800196e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001970:	6939      	ldr	r1, [r7, #16]
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 f8e2 	bl	8001b3c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800197a:	2b00      	cmp	r3, #0
 800197c:	d007      	beq.n	800198e <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001984:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001986:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 f8ac 	bl	8001ae6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800198e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001990:	2b00      	cmp	r3, #0
 8001992:	d007      	beq.n	80019a4 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800199a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800199c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7fe fe7a 	bl	8000698 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80019a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d007      	beq.n	80019ba <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019b0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80019b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 f8a1 	bl	8001afc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	0a5b      	lsrs	r3, r3, #9
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00d      	beq.n	80019e2 <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	0a5b      	lsrs	r3, r3, #9
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d007      	beq.n	80019e2 <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019da:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 f898 	bl	8001b12 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	09db      	lsrs	r3, r3, #7
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d019      	beq.n	8001a22 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	09db      	lsrs	r3, r3, #7
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d013      	beq.n	8001a22 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a02:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2280      	movs	r2, #128	@ 0x80
 8001a18:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001a1a:	68f9      	ldr	r1, [r7, #12]
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 f882 	bl	8001b26 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	0b5b      	lsrs	r3, r3, #13
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00d      	beq.n	8001a4a <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	0b5b      	lsrs	r3, r3, #13
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d007      	beq.n	8001a4a <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a42:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 f884 	bl	8001b52 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	0bdb      	lsrs	r3, r3, #15
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00d      	beq.n	8001a72 <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	0bdb      	lsrs	r3, r3, #15
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d007      	beq.n	8001a72 <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a6a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 f87a 	bl	8001b66 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	0b9b      	lsrs	r3, r3, #14
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d010      	beq.n	8001aa0 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	0b9b      	lsrs	r3, r3, #14
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00a      	beq.n	8001aa0 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a92:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a98:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d007      	beq.n	8001ab6 <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001aae:	69f9      	ldr	r1, [r7, #28]
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f876 	bl	8001ba2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001ab6:	6a3b      	ldr	r3, [r7, #32]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d009      	beq.n	8001ad0 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6a3a      	ldr	r2, [r7, #32]
 8001ac2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ac8:	6a3b      	ldr	r3, [r7, #32]
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d002      	beq.n	8001ade <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 f858 	bl	8001b8e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001ade:	bf00      	nop
 8001ae0:	3730      	adds	r7, #48	@ 0x30
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001bc0:	4b27      	ldr	r3, [pc, #156]	@ (8001c60 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001bc2:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bd2:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bda:	041a      	lsls	r2, r3, #16
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bf8:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c00:	061a      	lsls	r2, r3, #24
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	e005      	b.n	8001c46 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	3304      	adds	r3, #4
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d3f3      	bcc.n	8001c3a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001c52:	bf00      	nop
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	4000ac00 	.word	0x4000ac00

08001c64 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b089      	sub	sp, #36	@ 0x24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001c76:	e1ba      	b.n	8001fee <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	fa01 f303 	lsl.w	r3, r1, r3
 8001c84:	4013      	ands	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 81aa 	beq.w	8001fe8 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a55      	ldr	r2, [pc, #340]	@ (8001dec <HAL_GPIO_Init+0x188>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d15d      	bne.n	8001d58 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	69fa      	ldr	r2, [r7, #28]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 0201 	and.w	r2, r3, #1
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	69fa      	ldr	r2, [r7, #28]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69fa      	ldr	r2, [r7, #28]
 8001cca:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001ccc:	4a48      	ldr	r2, [pc, #288]	@ (8001df0 <HAL_GPIO_Init+0x18c>)
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001cd4:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001cd6:	4a46      	ldr	r2, [pc, #280]	@ (8001df0 <HAL_GPIO_Init+0x18c>)
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4413      	add	r3, r2
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	08da      	lsrs	r2, r3, #3
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	3208      	adds	r2, #8
 8001cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cee:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	220f      	movs	r2, #15
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	220b      	movs	r2, #11
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	69fa      	ldr	r2, [r7, #28]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	08da      	lsrs	r2, r3, #3
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	3208      	adds	r2, #8
 8001d22:	69f9      	ldr	r1, [r7, #28]
 8001d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	2203      	movs	r2, #3
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69fa      	ldr	r2, [r7, #28]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	2202      	movs	r2, #2
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	69fa      	ldr	r2, [r7, #28]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	69fa      	ldr	r2, [r7, #28]
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	e067      	b.n	8001e28 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x104>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b12      	cmp	r3, #18
 8001d66:	d145      	bne.n	8001df4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	08da      	lsrs	r2, r3, #3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3208      	adds	r2, #8
 8001d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d74:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	220f      	movs	r2, #15
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69fa      	ldr	r2, [r7, #28]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	f003 020f 	and.w	r2, r3, #15
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	69fa      	ldr	r2, [r7, #28]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	08da      	lsrs	r2, r3, #3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3208      	adds	r2, #8
 8001dae:	69f9      	ldr	r1, [r7, #28]
 8001db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69fa      	ldr	r2, [r7, #28]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0203 	and.w	r2, r3, #3
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	69fa      	ldr	r2, [r7, #28]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	69fa      	ldr	r2, [r7, #28]
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	e01e      	b.n	8001e28 <HAL_GPIO_Init+0x1c4>
 8001dea:	bf00      	nop
 8001dec:	46020000 	.word	0x46020000
 8001df0:	08005614 	.word	0x08005614
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	2203      	movs	r2, #3
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69fa      	ldr	r2, [r7, #28]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0203 	and.w	r2, r3, #3
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	69fa      	ldr	r2, [r7, #28]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	69fa      	ldr	r2, [r7, #28]
 8001e26:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d00b      	beq.n	8001e48 <HAL_GPIO_Init+0x1e4>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d007      	beq.n	8001e48 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e3c:	2b11      	cmp	r3, #17
 8001e3e:	d003      	beq.n	8001e48 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b12      	cmp	r3, #18
 8001e46:	d130      	bne.n	8001eaa <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	2203      	movs	r2, #3
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	68da      	ldr	r2, [r3, #12]
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	69fa      	ldr	r2, [r7, #28]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	69fa      	ldr	r2, [r7, #28]
 8001e76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001e7e:	2201      	movs	r2, #1
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69fa      	ldr	r2, [r7, #28]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	091b      	lsrs	r3, r3, #4
 8001e94:	f003 0201 	and.w	r2, r3, #1
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	69fa      	ldr	r2, [r7, #28]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	69fa      	ldr	r2, [r7, #28]
 8001ea8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	d017      	beq.n	8001ee2 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69fa      	ldr	r2, [r7, #28]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	69fa      	ldr	r2, [r7, #28]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	69fa      	ldr	r2, [r7, #28]
 8001ee0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d07c      	beq.n	8001fe8 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001eee:	4a47      	ldr	r2, [pc, #284]	@ (800200c <HAL_GPIO_Init+0x3a8>)
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	089b      	lsrs	r3, r3, #2
 8001ef4:	3318      	adds	r3, #24
 8001ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	220f      	movs	r2, #15
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69fa      	ldr	r2, [r7, #28]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	0a9a      	lsrs	r2, r3, #10
 8001f16:	4b3e      	ldr	r3, [pc, #248]	@ (8002010 <HAL_GPIO_Init+0x3ac>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	f002 0203 	and.w	r2, r2, #3
 8001f20:	00d2      	lsls	r2, r2, #3
 8001f22:	4093      	lsls	r3, r2
 8001f24:	69fa      	ldr	r2, [r7, #28]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001f2a:	4938      	ldr	r1, [pc, #224]	@ (800200c <HAL_GPIO_Init+0x3a8>)
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	089b      	lsrs	r3, r3, #2
 8001f30:	3318      	adds	r3, #24
 8001f32:	69fa      	ldr	r2, [r7, #28]
 8001f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001f38:	4b34      	ldr	r3, [pc, #208]	@ (800200c <HAL_GPIO_Init+0x3a8>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69fa      	ldr	r2, [r7, #28]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001f54:	69fa      	ldr	r2, [r7, #28]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001f5c:	4a2b      	ldr	r2, [pc, #172]	@ (800200c <HAL_GPIO_Init+0x3a8>)
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001f62:	4b2a      	ldr	r3, [pc, #168]	@ (800200c <HAL_GPIO_Init+0x3a8>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69fa      	ldr	r2, [r7, #28]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001f7e:	69fa      	ldr	r2, [r7, #28]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001f86:	4a21      	ldr	r2, [pc, #132]	@ (800200c <HAL_GPIO_Init+0x3a8>)
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800200c <HAL_GPIO_Init+0x3a8>)
 8001f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f92:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	43db      	mvns	r3, r3
 8001f98:	69fa      	ldr	r2, [r7, #28]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8001faa:	69fa      	ldr	r2, [r7, #28]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001fb2:	4a16      	ldr	r2, [pc, #88]	@ (800200c <HAL_GPIO_Init+0x3a8>)
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001fba:	4b14      	ldr	r3, [pc, #80]	@ (800200c <HAL_GPIO_Init+0x3a8>)
 8001fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fc0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69fa      	ldr	r2, [r7, #28]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001fd8:	69fa      	ldr	r2, [r7, #28]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001fe0:	4a0a      	ldr	r2, [pc, #40]	@ (800200c <HAL_GPIO_Init+0x3a8>)
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	3301      	adds	r3, #1
 8001fec:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f47f ae3d 	bne.w	8001c78 <HAL_GPIO_Init+0x14>
  }
}
 8001ffe:	bf00      	nop
 8002000:	bf00      	nop
 8002002:	3724      	adds	r7, #36	@ 0x24
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	46022000 	.word	0x46022000
 8002010:	002f7f7f 	.word	0x002f7f7f

08002014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	460b      	mov	r3, r1
 800201e:	807b      	strh	r3, [r7, #2]
 8002020:	4613      	mov	r3, r2
 8002022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002024:	787b      	ldrb	r3, [r7, #1]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800202a:	887a      	ldrh	r2, [r7, #2]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002030:	e002      	b.n	8002038 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002032:	887a      	ldrh	r2, [r7, #2]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800204c:	2300      	movs	r3, #0
 800204e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002050:	4b0b      	ldr	r3, [pc, #44]	@ (8002080 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b00      	cmp	r3, #0
 800205a:	d002      	beq.n	8002062 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	73fb      	strb	r3, [r7, #15]
 8002060:	e007      	b.n	8002072 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002062:	4b07      	ldr	r3, [pc, #28]	@ (8002080 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f023 0204 	bic.w	r2, r3, #4
 800206a:	4905      	ldr	r1, [pc, #20]	@ (8002080 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4313      	orrs	r3, r2
 8002070:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002072:	7bfb      	ldrb	r3, [r7, #15]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	40030400 	.word	0x40030400

08002084 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002088:	4b05      	ldr	r3, [pc, #20]	@ (80020a0 <HAL_ICACHE_Enable+0x1c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a04      	ldr	r2, [pc, #16]	@ (80020a0 <HAL_ICACHE_Enable+0x1c>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	40030400 	.word	0x40030400

080020a4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80020ac:	4b39      	ldr	r3, [pc, #228]	@ (8002194 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80020ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020b4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d10b      	bne.n	80020d6 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020c4:	d905      	bls.n	80020d2 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80020c6:	4b33      	ldr	r3, [pc, #204]	@ (8002194 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	4a32      	ldr	r2, [pc, #200]	@ (8002194 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80020cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020d0:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	e057      	b.n	8002186 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020dc:	d90a      	bls.n	80020f4 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80020de:	4b2d      	ldr	r3, [pc, #180]	@ (8002194 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	4a2a      	ldr	r2, [pc, #168]	@ (8002194 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80020ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020f0:	60d3      	str	r3, [r2, #12]
 80020f2:	e007      	b.n	8002104 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80020f4:	4b27      	ldr	r3, [pc, #156]	@ (8002194 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80020fc:	4925      	ldr	r1, [pc, #148]	@ (8002194 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4313      	orrs	r3, r2
 8002102:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002104:	4b24      	ldr	r3, [pc, #144]	@ (8002198 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a24      	ldr	r2, [pc, #144]	@ (800219c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800210a:	fba2 2303 	umull	r2, r3, r2, r3
 800210e:	099b      	lsrs	r3, r3, #6
 8002110:	2232      	movs	r2, #50	@ 0x32
 8002112:	fb02 f303 	mul.w	r3, r2, r3
 8002116:	4a21      	ldr	r2, [pc, #132]	@ (800219c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002118:	fba2 2303 	umull	r2, r3, r2, r3
 800211c:	099b      	lsrs	r3, r3, #6
 800211e:	3301      	adds	r3, #1
 8002120:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002122:	e002      	b.n	800212a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	3b01      	subs	r3, #1
 8002128:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800212a:	4b1a      	ldr	r3, [pc, #104]	@ (8002194 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d102      	bne.n	800213c <HAL_PWREx_ControlVoltageScaling+0x98>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1f3      	bne.n	8002124 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d01b      	beq.n	800217a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002142:	4b15      	ldr	r3, [pc, #84]	@ (8002198 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a15      	ldr	r2, [pc, #84]	@ (800219c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002148:	fba2 2303 	umull	r2, r3, r2, r3
 800214c:	099b      	lsrs	r3, r3, #6
 800214e:	2232      	movs	r2, #50	@ 0x32
 8002150:	fb02 f303 	mul.w	r3, r2, r3
 8002154:	4a11      	ldr	r2, [pc, #68]	@ (800219c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002156:	fba2 2303 	umull	r2, r3, r2, r3
 800215a:	099b      	lsrs	r3, r3, #6
 800215c:	3301      	adds	r3, #1
 800215e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002160:	e002      	b.n	8002168 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	3b01      	subs	r3, #1
 8002166:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002168:	4b0a      	ldr	r3, [pc, #40]	@ (8002194 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800216a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800216c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d102      	bne.n	800217a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f3      	bne.n	8002162 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e000      	b.n	8002186 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	46020800 	.word	0x46020800
 8002198:	20000000 	.word	0x20000000
 800219c:	10624dd3 	.word	0x10624dd3

080021a0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80021a4:	4b04      	ldr	r3, [pc, #16]	@ (80021b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80021a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	46020800 	.word	0x46020800

080021bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08e      	sub	sp, #56	@ 0x38
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80021c4:	2300      	movs	r3, #0
 80021c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d102      	bne.n	80021d6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	f000 bec8 	b.w	8002f66 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021d6:	4b99      	ldr	r3, [pc, #612]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	f003 030c 	and.w	r3, r3, #12
 80021de:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021e0:	4b96      	ldr	r3, [pc, #600]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 80021e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0310 	and.w	r3, r3, #16
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 816c 	beq.w	80024d0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80021f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d007      	beq.n	800220e <HAL_RCC_OscConfig+0x52>
 80021fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002200:	2b0c      	cmp	r3, #12
 8002202:	f040 80de 	bne.w	80023c2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002208:	2b01      	cmp	r3, #1
 800220a:	f040 80da 	bne.w	80023c2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d102      	bne.n	800221c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	f000 bea5 	b.w	8002f66 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002220:	4b86      	ldr	r3, [pc, #536]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d004      	beq.n	8002236 <HAL_RCC_OscConfig+0x7a>
 800222c:	4b83      	ldr	r3, [pc, #524]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002234:	e005      	b.n	8002242 <HAL_RCC_OscConfig+0x86>
 8002236:	4b81      	ldr	r3, [pc, #516]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 8002238:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800223c:	041b      	lsls	r3, r3, #16
 800223e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002242:	4293      	cmp	r3, r2
 8002244:	d255      	bcs.n	80022f2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10a      	bne.n	8002262 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002250:	4618      	mov	r0, r3
 8002252:	f001 f9a1 	bl	8003598 <RCC_SetFlashLatencyFromMSIRange>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d002      	beq.n	8002262 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	f000 be82 	b.w	8002f66 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002262:	4b76      	ldr	r3, [pc, #472]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	4a75      	ldr	r2, [pc, #468]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 8002268:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800226c:	6093      	str	r3, [r2, #8]
 800226e:	4b73      	ldr	r3, [pc, #460]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227a:	4970      	ldr	r1, [pc, #448]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 800227c:	4313      	orrs	r3, r2
 800227e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002284:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002288:	d309      	bcc.n	800229e <HAL_RCC_OscConfig+0xe2>
 800228a:	4b6c      	ldr	r3, [pc, #432]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f023 021f 	bic.w	r2, r3, #31
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	4969      	ldr	r1, [pc, #420]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 8002298:	4313      	orrs	r3, r2
 800229a:	60cb      	str	r3, [r1, #12]
 800229c:	e07e      	b.n	800239c <HAL_RCC_OscConfig+0x1e0>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	da0a      	bge.n	80022bc <HAL_RCC_OscConfig+0x100>
 80022a6:	4b65      	ldr	r3, [pc, #404]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	015b      	lsls	r3, r3, #5
 80022b4:	4961      	ldr	r1, [pc, #388]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	60cb      	str	r3, [r1, #12]
 80022ba:	e06f      	b.n	800239c <HAL_RCC_OscConfig+0x1e0>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022c4:	d30a      	bcc.n	80022dc <HAL_RCC_OscConfig+0x120>
 80022c6:	4b5d      	ldr	r3, [pc, #372]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	029b      	lsls	r3, r3, #10
 80022d4:	4959      	ldr	r1, [pc, #356]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	60cb      	str	r3, [r1, #12]
 80022da:	e05f      	b.n	800239c <HAL_RCC_OscConfig+0x1e0>
 80022dc:	4b57      	ldr	r3, [pc, #348]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	03db      	lsls	r3, r3, #15
 80022ea:	4954      	ldr	r1, [pc, #336]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	60cb      	str	r3, [r1, #12]
 80022f0:	e054      	b.n	800239c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80022f2:	4b52      	ldr	r3, [pc, #328]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	4a51      	ldr	r2, [pc, #324]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 80022f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80022fc:	6093      	str	r3, [r2, #8]
 80022fe:	4b4f      	ldr	r3, [pc, #316]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230a:	494c      	ldr	r1, [pc, #304]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 800230c:	4313      	orrs	r3, r2
 800230e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002314:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002318:	d309      	bcc.n	800232e <HAL_RCC_OscConfig+0x172>
 800231a:	4b48      	ldr	r3, [pc, #288]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	f023 021f 	bic.w	r2, r3, #31
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	4945      	ldr	r1, [pc, #276]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 8002328:	4313      	orrs	r3, r2
 800232a:	60cb      	str	r3, [r1, #12]
 800232c:	e028      	b.n	8002380 <HAL_RCC_OscConfig+0x1c4>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002332:	2b00      	cmp	r3, #0
 8002334:	da0a      	bge.n	800234c <HAL_RCC_OscConfig+0x190>
 8002336:	4b41      	ldr	r3, [pc, #260]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	015b      	lsls	r3, r3, #5
 8002344:	493d      	ldr	r1, [pc, #244]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 8002346:	4313      	orrs	r3, r2
 8002348:	60cb      	str	r3, [r1, #12]
 800234a:	e019      	b.n	8002380 <HAL_RCC_OscConfig+0x1c4>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002350:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002354:	d30a      	bcc.n	800236c <HAL_RCC_OscConfig+0x1b0>
 8002356:	4b39      	ldr	r3, [pc, #228]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	029b      	lsls	r3, r3, #10
 8002364:	4935      	ldr	r1, [pc, #212]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 8002366:	4313      	orrs	r3, r2
 8002368:	60cb      	str	r3, [r1, #12]
 800236a:	e009      	b.n	8002380 <HAL_RCC_OscConfig+0x1c4>
 800236c:	4b33      	ldr	r3, [pc, #204]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	03db      	lsls	r3, r3, #15
 800237a:	4930      	ldr	r1, [pc, #192]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 800237c:	4313      	orrs	r3, r2
 800237e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10a      	bne.n	800239c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238a:	4618      	mov	r0, r3
 800238c:	f001 f904 	bl	8003598 <RCC_SetFlashLatencyFromMSIRange>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	f000 bde5 	b.w	8002f66 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800239c:	f001 f8e2 	bl	8003564 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023a0:	4b27      	ldr	r3, [pc, #156]	@ (8002440 <HAL_RCC_OscConfig+0x284>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe fc7f 	bl	8000ca8 <HAL_InitTick>
 80023aa:	4603      	mov	r3, r0
 80023ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80023b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 808a 	beq.w	80024ce <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80023ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023be:	f000 bdd2 	b.w	8002f66 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d066      	beq.n	8002498 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80023ca:	4b1c      	ldr	r3, [pc, #112]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a1b      	ldr	r2, [pc, #108]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80023d6:	f7fe fcf1 	bl	8000dbc <HAL_GetTick>
 80023da:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80023dc:	e009      	b.n	80023f2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023de:	f7fe fced 	bl	8000dbc <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d902      	bls.n	80023f2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	f000 bdba 	b.w	8002f66 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80023f2:	4b12      	ldr	r3, [pc, #72]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0ef      	beq.n	80023de <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80023fe:	4b0f      	ldr	r3, [pc, #60]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	4a0e      	ldr	r2, [pc, #56]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 8002404:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002408:	6093      	str	r3, [r2, #8]
 800240a:	4b0c      	ldr	r3, [pc, #48]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002416:	4909      	ldr	r1, [pc, #36]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 8002418:	4313      	orrs	r3, r2
 800241a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002420:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002424:	d30e      	bcc.n	8002444 <HAL_RCC_OscConfig+0x288>
 8002426:	4b05      	ldr	r3, [pc, #20]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f023 021f 	bic.w	r2, r3, #31
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	4902      	ldr	r1, [pc, #8]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 8002434:	4313      	orrs	r3, r2
 8002436:	60cb      	str	r3, [r1, #12]
 8002438:	e04a      	b.n	80024d0 <HAL_RCC_OscConfig+0x314>
 800243a:	bf00      	nop
 800243c:	46020c00 	.word	0x46020c00
 8002440:	20000004 	.word	0x20000004
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002448:	2b00      	cmp	r3, #0
 800244a:	da0a      	bge.n	8002462 <HAL_RCC_OscConfig+0x2a6>
 800244c:	4b98      	ldr	r3, [pc, #608]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	015b      	lsls	r3, r3, #5
 800245a:	4995      	ldr	r1, [pc, #596]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 800245c:	4313      	orrs	r3, r2
 800245e:	60cb      	str	r3, [r1, #12]
 8002460:	e036      	b.n	80024d0 <HAL_RCC_OscConfig+0x314>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800246a:	d30a      	bcc.n	8002482 <HAL_RCC_OscConfig+0x2c6>
 800246c:	4b90      	ldr	r3, [pc, #576]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	029b      	lsls	r3, r3, #10
 800247a:	498d      	ldr	r1, [pc, #564]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 800247c:	4313      	orrs	r3, r2
 800247e:	60cb      	str	r3, [r1, #12]
 8002480:	e026      	b.n	80024d0 <HAL_RCC_OscConfig+0x314>
 8002482:	4b8b      	ldr	r3, [pc, #556]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	03db      	lsls	r3, r3, #15
 8002490:	4987      	ldr	r1, [pc, #540]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002492:	4313      	orrs	r3, r2
 8002494:	60cb      	str	r3, [r1, #12]
 8002496:	e01b      	b.n	80024d0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002498:	4b85      	ldr	r3, [pc, #532]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a84      	ldr	r2, [pc, #528]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 800249e:	f023 0301 	bic.w	r3, r3, #1
 80024a2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80024a4:	f7fe fc8a 	bl	8000dbc <HAL_GetTick>
 80024a8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80024aa:	e009      	b.n	80024c0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024ac:	f7fe fc86 	bl	8000dbc <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d902      	bls.n	80024c0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	f000 bd53 	b.w	8002f66 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80024c0:	4b7b      	ldr	r3, [pc, #492]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1ef      	bne.n	80024ac <HAL_RCC_OscConfig+0x2f0>
 80024cc:	e000      	b.n	80024d0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80024ce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 808b 	beq.w	80025f4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80024de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_OscConfig+0x334>
 80024e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e6:	2b0c      	cmp	r3, #12
 80024e8:	d109      	bne.n	80024fe <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d106      	bne.n	80024fe <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d17d      	bne.n	80025f4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	f000 bd34 	b.w	8002f66 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002506:	d106      	bne.n	8002516 <HAL_RCC_OscConfig+0x35a>
 8002508:	4b69      	ldr	r3, [pc, #420]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a68      	ldr	r2, [pc, #416]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 800250e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	e041      	b.n	800259a <HAL_RCC_OscConfig+0x3de>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800251e:	d112      	bne.n	8002546 <HAL_RCC_OscConfig+0x38a>
 8002520:	4b63      	ldr	r3, [pc, #396]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a62      	ldr	r2, [pc, #392]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002526:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800252a:	6013      	str	r3, [r2, #0]
 800252c:	4b60      	ldr	r3, [pc, #384]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a5f      	ldr	r2, [pc, #380]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002532:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	4b5d      	ldr	r3, [pc, #372]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a5c      	ldr	r2, [pc, #368]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 800253e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	e029      	b.n	800259a <HAL_RCC_OscConfig+0x3de>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800254e:	d112      	bne.n	8002576 <HAL_RCC_OscConfig+0x3ba>
 8002550:	4b57      	ldr	r3, [pc, #348]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a56      	ldr	r2, [pc, #344]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002556:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	4b54      	ldr	r3, [pc, #336]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a53      	ldr	r2, [pc, #332]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002562:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	4b51      	ldr	r3, [pc, #324]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a50      	ldr	r2, [pc, #320]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 800256e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	e011      	b.n	800259a <HAL_RCC_OscConfig+0x3de>
 8002576:	4b4e      	ldr	r3, [pc, #312]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a4d      	ldr	r2, [pc, #308]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 800257c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	4b4b      	ldr	r3, [pc, #300]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a4a      	ldr	r2, [pc, #296]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002588:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	4b48      	ldr	r3, [pc, #288]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a47      	ldr	r2, [pc, #284]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002594:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002598:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d014      	beq.n	80025cc <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80025a2:	f7fe fc0b 	bl	8000dbc <HAL_GetTick>
 80025a6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025a8:	e009      	b.n	80025be <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025aa:	f7fe fc07 	bl	8000dbc <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b64      	cmp	r3, #100	@ 0x64
 80025b6:	d902      	bls.n	80025be <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	f000 bcd4 	b.w	8002f66 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025be:	4b3c      	ldr	r3, [pc, #240]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0ef      	beq.n	80025aa <HAL_RCC_OscConfig+0x3ee>
 80025ca:	e013      	b.n	80025f4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80025cc:	f7fe fbf6 	bl	8000dbc <HAL_GetTick>
 80025d0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025d2:	e009      	b.n	80025e8 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d4:	f7fe fbf2 	bl	8000dbc <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b64      	cmp	r3, #100	@ 0x64
 80025e0:	d902      	bls.n	80025e8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	f000 bcbf 	b.w	8002f66 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025e8:	4b31      	ldr	r3, [pc, #196]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1ef      	bne.n	80025d4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d05f      	beq.n	80026c0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002602:	2b04      	cmp	r3, #4
 8002604:	d005      	beq.n	8002612 <HAL_RCC_OscConfig+0x456>
 8002606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002608:	2b0c      	cmp	r3, #12
 800260a:	d114      	bne.n	8002636 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800260c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800260e:	2b02      	cmp	r3, #2
 8002610:	d111      	bne.n	8002636 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d102      	bne.n	8002620 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	f000 bca3 	b.w	8002f66 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002620:	4b23      	ldr	r3, [pc, #140]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	041b      	lsls	r3, r3, #16
 800262e:	4920      	ldr	r1, [pc, #128]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002630:	4313      	orrs	r3, r2
 8002632:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002634:	e044      	b.n	80026c0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d024      	beq.n	8002688 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800263e:	4b1c      	ldr	r3, [pc, #112]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a1b      	ldr	r2, [pc, #108]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002644:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002648:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800264a:	f7fe fbb7 	bl	8000dbc <HAL_GetTick>
 800264e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002650:	e009      	b.n	8002666 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002652:	f7fe fbb3 	bl	8000dbc <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d902      	bls.n	8002666 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	f000 bc80 	b.w	8002f66 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002666:	4b12      	ldr	r3, [pc, #72]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0ef      	beq.n	8002652 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002672:	4b0f      	ldr	r3, [pc, #60]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	041b      	lsls	r3, r3, #16
 8002680:	490b      	ldr	r1, [pc, #44]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002682:	4313      	orrs	r3, r2
 8002684:	610b      	str	r3, [r1, #16]
 8002686:	e01b      	b.n	80026c0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8002688:	4b09      	ldr	r3, [pc, #36]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a08      	ldr	r2, [pc, #32]	@ (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 800268e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002692:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002694:	f7fe fb92 	bl	8000dbc <HAL_GetTick>
 8002698:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800269a:	e00b      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800269c:	f7fe fb8e 	bl	8000dbc <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d904      	bls.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	f000 bc5b 	b.w	8002f66 <HAL_RCC_OscConfig+0xdaa>
 80026b0:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026b4:	4baf      	ldr	r3, [pc, #700]	@ (8002974 <HAL_RCC_OscConfig+0x7b8>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ed      	bne.n	800269c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0308 	and.w	r3, r3, #8
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 80c8 	beq.w	800285e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80026ce:	2300      	movs	r3, #0
 80026d0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026d4:	4ba7      	ldr	r3, [pc, #668]	@ (8002974 <HAL_RCC_OscConfig+0x7b8>)
 80026d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d111      	bne.n	8002706 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e2:	4ba4      	ldr	r3, [pc, #656]	@ (8002974 <HAL_RCC_OscConfig+0x7b8>)
 80026e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026e8:	4aa2      	ldr	r2, [pc, #648]	@ (8002974 <HAL_RCC_OscConfig+0x7b8>)
 80026ea:	f043 0304 	orr.w	r3, r3, #4
 80026ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80026f2:	4ba0      	ldr	r3, [pc, #640]	@ (8002974 <HAL_RCC_OscConfig+0x7b8>)
 80026f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8002700:	2301      	movs	r3, #1
 8002702:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002706:	4b9c      	ldr	r3, [pc, #624]	@ (8002978 <HAL_RCC_OscConfig+0x7bc>)
 8002708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d119      	bne.n	8002746 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002712:	4b99      	ldr	r3, [pc, #612]	@ (8002978 <HAL_RCC_OscConfig+0x7bc>)
 8002714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002716:	4a98      	ldr	r2, [pc, #608]	@ (8002978 <HAL_RCC_OscConfig+0x7bc>)
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800271e:	f7fe fb4d 	bl	8000dbc <HAL_GetTick>
 8002722:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002724:	e009      	b.n	800273a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002726:	f7fe fb49 	bl	8000dbc <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d902      	bls.n	800273a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	f000 bc16 	b.w	8002f66 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800273a:	4b8f      	ldr	r3, [pc, #572]	@ (8002978 <HAL_RCC_OscConfig+0x7bc>)
 800273c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0ef      	beq.n	8002726 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d05f      	beq.n	800280e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800274e:	4b89      	ldr	r3, [pc, #548]	@ (8002974 <HAL_RCC_OscConfig+0x7b8>)
 8002750:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002754:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699a      	ldr	r2, [r3, #24]
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002760:	429a      	cmp	r2, r3
 8002762:	d037      	beq.n	80027d4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d006      	beq.n	800277c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e3f4      	b.n	8002f66 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d01b      	beq.n	80027be <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8002786:	4b7b      	ldr	r3, [pc, #492]	@ (8002974 <HAL_RCC_OscConfig+0x7b8>)
 8002788:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800278c:	4a79      	ldr	r2, [pc, #484]	@ (8002974 <HAL_RCC_OscConfig+0x7b8>)
 800278e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8002792:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8002796:	f7fe fb11 	bl	8000dbc <HAL_GetTick>
 800279a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800279e:	f7fe fb0d 	bl	8000dbc <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b05      	cmp	r3, #5
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e3da      	b.n	8002f66 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80027b0:	4b70      	ldr	r3, [pc, #448]	@ (8002974 <HAL_RCC_OscConfig+0x7b8>)
 80027b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1ef      	bne.n	800279e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80027be:	4b6d      	ldr	r3, [pc, #436]	@ (8002974 <HAL_RCC_OscConfig+0x7b8>)
 80027c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027c4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	4969      	ldr	r1, [pc, #420]	@ (8002974 <HAL_RCC_OscConfig+0x7b8>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80027d4:	4b67      	ldr	r3, [pc, #412]	@ (8002974 <HAL_RCC_OscConfig+0x7b8>)
 80027d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027da:	4a66      	ldr	r2, [pc, #408]	@ (8002974 <HAL_RCC_OscConfig+0x7b8>)
 80027dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80027e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80027e4:	f7fe faea 	bl	8000dbc <HAL_GetTick>
 80027e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ec:	f7fe fae6 	bl	8000dbc <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b05      	cmp	r3, #5
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e3b3      	b.n	8002f66 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80027fe:	4b5d      	ldr	r3, [pc, #372]	@ (8002974 <HAL_RCC_OscConfig+0x7b8>)
 8002800:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002804:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0ef      	beq.n	80027ec <HAL_RCC_OscConfig+0x630>
 800280c:	e01b      	b.n	8002846 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800280e:	4b59      	ldr	r3, [pc, #356]	@ (8002974 <HAL_RCC_OscConfig+0x7b8>)
 8002810:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002814:	4a57      	ldr	r2, [pc, #348]	@ (8002974 <HAL_RCC_OscConfig+0x7b8>)
 8002816:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800281a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800281e:	f7fe facd 	bl	8000dbc <HAL_GetTick>
 8002822:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002826:	f7fe fac9 	bl	8000dbc <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b05      	cmp	r3, #5
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e396      	b.n	8002f66 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002838:	4b4e      	ldr	r3, [pc, #312]	@ (8002974 <HAL_RCC_OscConfig+0x7b8>)
 800283a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800283e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1ef      	bne.n	8002826 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002846:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800284a:	2b01      	cmp	r3, #1
 800284c:	d107      	bne.n	800285e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800284e:	4b49      	ldr	r3, [pc, #292]	@ (8002974 <HAL_RCC_OscConfig+0x7b8>)
 8002850:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002854:	4a47      	ldr	r2, [pc, #284]	@ (8002974 <HAL_RCC_OscConfig+0x7b8>)
 8002856:	f023 0304 	bic.w	r3, r3, #4
 800285a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0304 	and.w	r3, r3, #4
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 8111 	beq.w	8002a8e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800286c:	2300      	movs	r3, #0
 800286e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002872:	4b40      	ldr	r3, [pc, #256]	@ (8002974 <HAL_RCC_OscConfig+0x7b8>)
 8002874:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	d111      	bne.n	80028a4 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002880:	4b3c      	ldr	r3, [pc, #240]	@ (8002974 <HAL_RCC_OscConfig+0x7b8>)
 8002882:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002886:	4a3b      	ldr	r2, [pc, #236]	@ (8002974 <HAL_RCC_OscConfig+0x7b8>)
 8002888:	f043 0304 	orr.w	r3, r3, #4
 800288c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002890:	4b38      	ldr	r3, [pc, #224]	@ (8002974 <HAL_RCC_OscConfig+0x7b8>)
 8002892:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002896:	f003 0304 	and.w	r3, r3, #4
 800289a:	613b      	str	r3, [r7, #16]
 800289c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800289e:	2301      	movs	r3, #1
 80028a0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80028a4:	4b34      	ldr	r3, [pc, #208]	@ (8002978 <HAL_RCC_OscConfig+0x7bc>)
 80028a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d118      	bne.n	80028e2 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80028b0:	4b31      	ldr	r3, [pc, #196]	@ (8002978 <HAL_RCC_OscConfig+0x7bc>)
 80028b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b4:	4a30      	ldr	r2, [pc, #192]	@ (8002978 <HAL_RCC_OscConfig+0x7bc>)
 80028b6:	f043 0301 	orr.w	r3, r3, #1
 80028ba:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028bc:	f7fe fa7e 	bl	8000dbc <HAL_GetTick>
 80028c0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c4:	f7fe fa7a 	bl	8000dbc <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e347      	b.n	8002f66 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80028d6:	4b28      	ldr	r3, [pc, #160]	@ (8002978 <HAL_RCC_OscConfig+0x7bc>)
 80028d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d01f      	beq.n	800292e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d010      	beq.n	800291c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80028fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002974 <HAL_RCC_OscConfig+0x7b8>)
 80028fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002900:	4a1c      	ldr	r2, [pc, #112]	@ (8002974 <HAL_RCC_OscConfig+0x7b8>)
 8002902:	f043 0304 	orr.w	r3, r3, #4
 8002906:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800290a:	4b1a      	ldr	r3, [pc, #104]	@ (8002974 <HAL_RCC_OscConfig+0x7b8>)
 800290c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002910:	4a18      	ldr	r2, [pc, #96]	@ (8002974 <HAL_RCC_OscConfig+0x7b8>)
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800291a:	e018      	b.n	800294e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800291c:	4b15      	ldr	r3, [pc, #84]	@ (8002974 <HAL_RCC_OscConfig+0x7b8>)
 800291e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002922:	4a14      	ldr	r2, [pc, #80]	@ (8002974 <HAL_RCC_OscConfig+0x7b8>)
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800292c:	e00f      	b.n	800294e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800292e:	4b11      	ldr	r3, [pc, #68]	@ (8002974 <HAL_RCC_OscConfig+0x7b8>)
 8002930:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002934:	4a0f      	ldr	r2, [pc, #60]	@ (8002974 <HAL_RCC_OscConfig+0x7b8>)
 8002936:	f023 0301 	bic.w	r3, r3, #1
 800293a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800293e:	4b0d      	ldr	r3, [pc, #52]	@ (8002974 <HAL_RCC_OscConfig+0x7b8>)
 8002940:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002944:	4a0b      	ldr	r2, [pc, #44]	@ (8002974 <HAL_RCC_OscConfig+0x7b8>)
 8002946:	f023 0304 	bic.w	r3, r3, #4
 800294a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d057      	beq.n	8002a06 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002956:	f7fe fa31 	bl	8000dbc <HAL_GetTick>
 800295a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800295c:	e00e      	b.n	800297c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800295e:	f7fe fa2d 	bl	8000dbc <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	f241 3288 	movw	r2, #5000	@ 0x1388
 800296c:	4293      	cmp	r3, r2
 800296e:	d905      	bls.n	800297c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e2f8      	b.n	8002f66 <HAL_RCC_OscConfig+0xdaa>
 8002974:	46020c00 	.word	0x46020c00
 8002978:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800297c:	4b9c      	ldr	r3, [pc, #624]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 800297e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0e9      	beq.n	800295e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002992:	2b00      	cmp	r3, #0
 8002994:	d01b      	beq.n	80029ce <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002996:	4b96      	ldr	r3, [pc, #600]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 8002998:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800299c:	4a94      	ldr	r2, [pc, #592]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 800299e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80029a6:	e00a      	b.n	80029be <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a8:	f7fe fa08 	bl	8000dbc <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e2d3      	b.n	8002f66 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80029be:	4b8c      	ldr	r3, [pc, #560]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 80029c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0ed      	beq.n	80029a8 <HAL_RCC_OscConfig+0x7ec>
 80029cc:	e053      	b.n	8002a76 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80029ce:	4b88      	ldr	r3, [pc, #544]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 80029d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029d4:	4a86      	ldr	r2, [pc, #536]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 80029d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80029de:	e00a      	b.n	80029f6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e0:	f7fe f9ec 	bl	8000dbc <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e2b7      	b.n	8002f66 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80029f6:	4b7e      	ldr	r3, [pc, #504]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 80029f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1ed      	bne.n	80029e0 <HAL_RCC_OscConfig+0x824>
 8002a04:	e037      	b.n	8002a76 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002a06:	f7fe f9d9 	bl	8000dbc <HAL_GetTick>
 8002a0a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a0c:	e00a      	b.n	8002a24 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a0e:	f7fe f9d5 	bl	8000dbc <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e2a0      	b.n	8002f66 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a24:	4b72      	ldr	r3, [pc, #456]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 8002a26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1ed      	bne.n	8002a0e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002a32:	4b6f      	ldr	r3, [pc, #444]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 8002a34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d01a      	beq.n	8002a76 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002a40:	4b6b      	ldr	r3, [pc, #428]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 8002a42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a46:	4a6a      	ldr	r2, [pc, #424]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 8002a48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a4c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002a50:	e00a      	b.n	8002a68 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a52:	f7fe f9b3 	bl	8000dbc <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e27e      	b.n	8002f66 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002a68:	4b61      	ldr	r3, [pc, #388]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 8002a6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1ed      	bne.n	8002a52 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a76:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d107      	bne.n	8002a8e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a7e:	4b5c      	ldr	r3, [pc, #368]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 8002a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a84:	4a5a      	ldr	r2, [pc, #360]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 8002a86:	f023 0304 	bic.w	r3, r3, #4
 8002a8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0320 	and.w	r3, r3, #32
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d036      	beq.n	8002b08 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d019      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002aa2:	4b53      	ldr	r3, [pc, #332]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a52      	ldr	r2, [pc, #328]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 8002aa8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002aac:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002aae:	f7fe f985 	bl	8000dbc <HAL_GetTick>
 8002ab2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ab6:	f7fe f981 	bl	8000dbc <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e24e      	b.n	8002f66 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002ac8:	4b49      	ldr	r3, [pc, #292]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x8fa>
 8002ad4:	e018      	b.n	8002b08 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8002ad6:	4b46      	ldr	r3, [pc, #280]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a45      	ldr	r2, [pc, #276]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 8002adc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ae0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002ae2:	f7fe f96b 	bl	8000dbc <HAL_GetTick>
 8002ae6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002aea:	f7fe f967 	bl	8000dbc <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e234      	b.n	8002f66 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002afc:	4b3c      	ldr	r3, [pc, #240]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f0      	bne.n	8002aea <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d036      	beq.n	8002b82 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d019      	beq.n	8002b50 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002b1c:	4b34      	ldr	r3, [pc, #208]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a33      	ldr	r2, [pc, #204]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 8002b22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b26:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002b28:	f7fe f948 	bl	8000dbc <HAL_GetTick>
 8002b2c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002b30:	f7fe f944 	bl	8000dbc <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e211      	b.n	8002f66 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002b42:	4b2b      	ldr	r3, [pc, #172]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0f0      	beq.n	8002b30 <HAL_RCC_OscConfig+0x974>
 8002b4e:	e018      	b.n	8002b82 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002b50:	4b27      	ldr	r3, [pc, #156]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a26      	ldr	r2, [pc, #152]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 8002b56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b5a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002b5c:	f7fe f92e 	bl	8000dbc <HAL_GetTick>
 8002b60:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002b64:	f7fe f92a 	bl	8000dbc <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e1f7      	b.n	8002f66 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002b76:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d07f      	beq.n	8002c8e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d062      	beq.n	8002c5c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002b96:	4b16      	ldr	r3, [pc, #88]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	4a15      	ldr	r2, [pc, #84]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 8002b9c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ba0:	6093      	str	r3, [r2, #8]
 8002ba2:	4b13      	ldr	r3, [pc, #76]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bae:	4910      	ldr	r1, [pc, #64]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002bbc:	d309      	bcc.n	8002bd2 <HAL_RCC_OscConfig+0xa16>
 8002bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f023 021f 	bic.w	r2, r3, #31
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	4909      	ldr	r1, [pc, #36]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60cb      	str	r3, [r1, #12]
 8002bd0:	e02a      	b.n	8002c28 <HAL_RCC_OscConfig+0xa6c>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	da0c      	bge.n	8002bf4 <HAL_RCC_OscConfig+0xa38>
 8002bda:	4b05      	ldr	r3, [pc, #20]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	015b      	lsls	r3, r3, #5
 8002be8:	4901      	ldr	r1, [pc, #4]	@ (8002bf0 <HAL_RCC_OscConfig+0xa34>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	60cb      	str	r3, [r1, #12]
 8002bee:	e01b      	b.n	8002c28 <HAL_RCC_OscConfig+0xa6c>
 8002bf0:	46020c00 	.word	0x46020c00
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bfc:	d30a      	bcc.n	8002c14 <HAL_RCC_OscConfig+0xa58>
 8002bfe:	4ba1      	ldr	r3, [pc, #644]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	029b      	lsls	r3, r3, #10
 8002c0c:	499d      	ldr	r1, [pc, #628]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60cb      	str	r3, [r1, #12]
 8002c12:	e009      	b.n	8002c28 <HAL_RCC_OscConfig+0xa6c>
 8002c14:	4b9b      	ldr	r3, [pc, #620]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	03db      	lsls	r3, r3, #15
 8002c22:	4998      	ldr	r1, [pc, #608]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002c28:	4b96      	ldr	r3, [pc, #600]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a95      	ldr	r2, [pc, #596]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002c2e:	f043 0310 	orr.w	r3, r3, #16
 8002c32:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002c34:	f7fe f8c2 	bl	8000dbc <HAL_GetTick>
 8002c38:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002c3c:	f7fe f8be 	bl	8000dbc <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e18b      	b.n	8002f66 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002c4e:	4b8d      	ldr	r3, [pc, #564]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0xa80>
 8002c5a:	e018      	b.n	8002c8e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002c5c:	4b89      	ldr	r3, [pc, #548]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a88      	ldr	r2, [pc, #544]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002c62:	f023 0310 	bic.w	r3, r3, #16
 8002c66:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002c68:	f7fe f8a8 	bl	8000dbc <HAL_GetTick>
 8002c6c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002c70:	f7fe f8a4 	bl	8000dbc <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e171      	b.n	8002f66 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002c82:	4b80      	ldr	r3, [pc, #512]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0320 	and.w	r3, r3, #32
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 8166 	beq.w	8002f64 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c9e:	4b79      	ldr	r3, [pc, #484]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
 8002ca6:	2b0c      	cmp	r3, #12
 8002ca8:	f000 80f2 	beq.w	8002e90 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	f040 80c5 	bne.w	8002e40 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002cb6:	4b73      	ldr	r3, [pc, #460]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a72      	ldr	r2, [pc, #456]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002cbc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cc0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002cc2:	f7fe f87b 	bl	8000dbc <HAL_GetTick>
 8002cc6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cca:	f7fe f877 	bl	8000dbc <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e144      	b.n	8002f66 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002cdc:	4b69      	ldr	r3, [pc, #420]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1f0      	bne.n	8002cca <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ce8:	4b66      	ldr	r3, [pc, #408]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cee:	f003 0304 	and.w	r3, r3, #4
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d111      	bne.n	8002d1a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002cf6:	4b63      	ldr	r3, [pc, #396]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cfc:	4a61      	ldr	r2, [pc, #388]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002cfe:	f043 0304 	orr.w	r3, r3, #4
 8002d02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002d06:	4b5f      	ldr	r3, [pc, #380]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002d14:	2301      	movs	r3, #1
 8002d16:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002d1a:	4b5b      	ldr	r3, [pc, #364]	@ (8002e88 <HAL_RCC_OscConfig+0xccc>)
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d26:	d102      	bne.n	8002d2e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002d2e:	4b56      	ldr	r3, [pc, #344]	@ (8002e88 <HAL_RCC_OscConfig+0xccc>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	4a55      	ldr	r2, [pc, #340]	@ (8002e88 <HAL_RCC_OscConfig+0xccc>)
 8002d34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d38:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002d3a:	4b52      	ldr	r3, [pc, #328]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d42:	f023 0303 	bic.w	r3, r3, #3
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d4e:	3a01      	subs	r2, #1
 8002d50:	0212      	lsls	r2, r2, #8
 8002d52:	4311      	orrs	r1, r2
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	494a      	ldr	r1, [pc, #296]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002d60:	4b48      	ldr	r3, [pc, #288]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002d62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d64:	4b49      	ldr	r3, [pc, #292]	@ (8002e8c <HAL_RCC_OscConfig+0xcd0>)
 8002d66:	4013      	ands	r3, r2
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d6c:	3a01      	subs	r2, #1
 8002d6e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002d76:	3a01      	subs	r2, #1
 8002d78:	0252      	lsls	r2, r2, #9
 8002d7a:	b292      	uxth	r2, r2
 8002d7c:	4311      	orrs	r1, r2
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d82:	3a01      	subs	r2, #1
 8002d84:	0412      	lsls	r2, r2, #16
 8002d86:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8002d8a:	4311      	orrs	r1, r2
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002d90:	3a01      	subs	r2, #1
 8002d92:	0612      	lsls	r2, r2, #24
 8002d94:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	493a      	ldr	r1, [pc, #232]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002da0:	4b38      	ldr	r3, [pc, #224]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da4:	4a37      	ldr	r2, [pc, #220]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002da6:	f023 0310 	bic.w	r3, r3, #16
 8002daa:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db0:	4a34      	ldr	r2, [pc, #208]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002db6:	4b33      	ldr	r3, [pc, #204]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dba:	4a32      	ldr	r2, [pc, #200]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002dbc:	f043 0310 	orr.w	r3, r3, #16
 8002dc0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8002dc2:	4b30      	ldr	r3, [pc, #192]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc6:	f023 020c 	bic.w	r2, r3, #12
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dce:	492d      	ldr	r1, [pc, #180]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8002dd4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d105      	bne.n	8002de8 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002ddc:	4b2a      	ldr	r3, [pc, #168]	@ (8002e88 <HAL_RCC_OscConfig+0xccc>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	4a29      	ldr	r2, [pc, #164]	@ (8002e88 <HAL_RCC_OscConfig+0xccc>)
 8002de2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002de6:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8002de8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d107      	bne.n	8002e00 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8002df0:	4b24      	ldr	r3, [pc, #144]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002df6:	4a23      	ldr	r2, [pc, #140]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002df8:	f023 0304 	bic.w	r3, r3, #4
 8002dfc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002e00:	4b20      	ldr	r3, [pc, #128]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a1f      	ldr	r2, [pc, #124]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002e06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e0a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002e0c:	f7fd ffd6 	bl	8000dbc <HAL_GetTick>
 8002e10:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e14:	f7fd ffd2 	bl	8000dbc <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e09f      	b.n	8002f66 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002e26:	4b17      	ldr	r3, [pc, #92]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0f0      	beq.n	8002e14 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002e32:	4b14      	ldr	r3, [pc, #80]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e36:	4a13      	ldr	r2, [pc, #76]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002e38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e3c:	6293      	str	r3, [r2, #40]	@ 0x28
 8002e3e:	e091      	b.n	8002f64 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002e40:	4b10      	ldr	r3, [pc, #64]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a0f      	ldr	r2, [pc, #60]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002e46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e4a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002e4c:	f7fd ffb6 	bl	8000dbc <HAL_GetTick>
 8002e50:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e54:	f7fd ffb2 	bl	8000dbc <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e07f      	b.n	8002f66 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002e66:	4b07      	ldr	r3, [pc, #28]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f0      	bne.n	8002e54 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002e72:	4b04      	ldr	r3, [pc, #16]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e76:	4a03      	ldr	r2, [pc, #12]	@ (8002e84 <HAL_RCC_OscConfig+0xcc8>)
 8002e78:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002e7c:	f023 0303 	bic.w	r3, r3, #3
 8002e80:	6293      	str	r3, [r2, #40]	@ 0x28
 8002e82:	e06f      	b.n	8002f64 <HAL_RCC_OscConfig+0xda8>
 8002e84:	46020c00 	.word	0x46020c00
 8002e88:	46020800 	.word	0x46020800
 8002e8c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002e90:	4b37      	ldr	r3, [pc, #220]	@ (8002f70 <HAL_RCC_OscConfig+0xdb4>)
 8002e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e94:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e96:	4b36      	ldr	r3, [pc, #216]	@ (8002f70 <HAL_RCC_OscConfig+0xdb4>)
 8002e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e9a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d039      	beq.n	8002f18 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f003 0203 	and.w	r2, r3, #3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d132      	bne.n	8002f18 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	0a1b      	lsrs	r3, r3, #8
 8002eb6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebe:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d129      	bne.n	8002f18 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d122      	bne.n	8002f18 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002edc:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d11a      	bne.n	8002f18 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	0a5b      	lsrs	r3, r3, #9
 8002ee6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d111      	bne.n	8002f18 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	0c1b      	lsrs	r3, r3, #16
 8002ef8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f00:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d108      	bne.n	8002f18 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	0e1b      	lsrs	r3, r3, #24
 8002f0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f12:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d001      	beq.n	8002f1c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e024      	b.n	8002f66 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002f1c:	4b14      	ldr	r3, [pc, #80]	@ (8002f70 <HAL_RCC_OscConfig+0xdb4>)
 8002f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f20:	08db      	lsrs	r3, r3, #3
 8002f22:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d01a      	beq.n	8002f64 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002f2e:	4b10      	ldr	r3, [pc, #64]	@ (8002f70 <HAL_RCC_OscConfig+0xdb4>)
 8002f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f32:	4a0f      	ldr	r2, [pc, #60]	@ (8002f70 <HAL_RCC_OscConfig+0xdb4>)
 8002f34:	f023 0310 	bic.w	r3, r3, #16
 8002f38:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3a:	f7fd ff3f 	bl	8000dbc <HAL_GetTick>
 8002f3e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8002f40:	bf00      	nop
 8002f42:	f7fd ff3b 	bl	8000dbc <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d0f9      	beq.n	8002f42 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f52:	4a07      	ldr	r2, [pc, #28]	@ (8002f70 <HAL_RCC_OscConfig+0xdb4>)
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002f58:	4b05      	ldr	r3, [pc, #20]	@ (8002f70 <HAL_RCC_OscConfig+0xdb4>)
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5c:	4a04      	ldr	r2, [pc, #16]	@ (8002f70 <HAL_RCC_OscConfig+0xdb4>)
 8002f5e:	f043 0310 	orr.w	r3, r3, #16
 8002f62:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3738      	adds	r7, #56	@ 0x38
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	46020c00 	.word	0x46020c00

08002f74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e1d9      	b.n	800333c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f88:	4b9b      	ldr	r3, [pc, #620]	@ (80031f8 <HAL_RCC_ClockConfig+0x284>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 030f 	and.w	r3, r3, #15
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d910      	bls.n	8002fb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f96:	4b98      	ldr	r3, [pc, #608]	@ (80031f8 <HAL_RCC_ClockConfig+0x284>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 020f 	bic.w	r2, r3, #15
 8002f9e:	4996      	ldr	r1, [pc, #600]	@ (80031f8 <HAL_RCC_ClockConfig+0x284>)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa6:	4b94      	ldr	r3, [pc, #592]	@ (80031f8 <HAL_RCC_ClockConfig+0x284>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e1c1      	b.n	800333c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0310 	and.w	r3, r3, #16
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d010      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	695a      	ldr	r2, [r3, #20]
 8002fc8:	4b8c      	ldr	r3, [pc, #560]	@ (80031fc <HAL_RCC_ClockConfig+0x288>)
 8002fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fcc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d908      	bls.n	8002fe6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002fd4:	4b89      	ldr	r3, [pc, #548]	@ (80031fc <HAL_RCC_ClockConfig+0x288>)
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	4986      	ldr	r1, [pc, #536]	@ (80031fc <HAL_RCC_ClockConfig+0x288>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d012      	beq.n	8003018 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	691a      	ldr	r2, [r3, #16]
 8002ff6:	4b81      	ldr	r3, [pc, #516]	@ (80031fc <HAL_RCC_ClockConfig+0x288>)
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	091b      	lsrs	r3, r3, #4
 8002ffc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003000:	429a      	cmp	r2, r3
 8003002:	d909      	bls.n	8003018 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003004:	4b7d      	ldr	r3, [pc, #500]	@ (80031fc <HAL_RCC_ClockConfig+0x288>)
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	497a      	ldr	r1, [pc, #488]	@ (80031fc <HAL_RCC_ClockConfig+0x288>)
 8003014:	4313      	orrs	r3, r2
 8003016:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d010      	beq.n	8003046 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	4b74      	ldr	r3, [pc, #464]	@ (80031fc <HAL_RCC_ClockConfig+0x288>)
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003030:	429a      	cmp	r2, r3
 8003032:	d908      	bls.n	8003046 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003034:	4b71      	ldr	r3, [pc, #452]	@ (80031fc <HAL_RCC_ClockConfig+0x288>)
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	496e      	ldr	r1, [pc, #440]	@ (80031fc <HAL_RCC_ClockConfig+0x288>)
 8003042:	4313      	orrs	r3, r2
 8003044:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d010      	beq.n	8003074 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	4b69      	ldr	r3, [pc, #420]	@ (80031fc <HAL_RCC_ClockConfig+0x288>)
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	429a      	cmp	r2, r3
 8003060:	d908      	bls.n	8003074 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003062:	4b66      	ldr	r3, [pc, #408]	@ (80031fc <HAL_RCC_ClockConfig+0x288>)
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	f023 020f 	bic.w	r2, r3, #15
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	4963      	ldr	r1, [pc, #396]	@ (80031fc <HAL_RCC_ClockConfig+0x288>)
 8003070:	4313      	orrs	r3, r2
 8003072:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 80d2 	beq.w	8003226 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8003082:	2300      	movs	r3, #0
 8003084:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b03      	cmp	r3, #3
 800308c:	d143      	bne.n	8003116 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800308e:	4b5b      	ldr	r3, [pc, #364]	@ (80031fc <HAL_RCC_ClockConfig+0x288>)
 8003090:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	d110      	bne.n	80030be <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800309c:	4b57      	ldr	r3, [pc, #348]	@ (80031fc <HAL_RCC_ClockConfig+0x288>)
 800309e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030a2:	4a56      	ldr	r2, [pc, #344]	@ (80031fc <HAL_RCC_ClockConfig+0x288>)
 80030a4:	f043 0304 	orr.w	r3, r3, #4
 80030a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80030ac:	4b53      	ldr	r3, [pc, #332]	@ (80031fc <HAL_RCC_ClockConfig+0x288>)
 80030ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030b2:	f003 0304 	and.w	r3, r3, #4
 80030b6:	60bb      	str	r3, [r7, #8]
 80030b8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80030ba:	2301      	movs	r3, #1
 80030bc:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80030be:	f7fd fe7d 	bl	8000dbc <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80030c4:	4b4e      	ldr	r3, [pc, #312]	@ (8003200 <HAL_RCC_ClockConfig+0x28c>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00f      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80030d2:	f7fd fe73 	bl	8000dbc <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e12b      	b.n	800333c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80030e4:	4b46      	ldr	r3, [pc, #280]	@ (8003200 <HAL_RCC_ClockConfig+0x28c>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0f0      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80030f0:	7dfb      	ldrb	r3, [r7, #23]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d107      	bne.n	8003106 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80030f6:	4b41      	ldr	r3, [pc, #260]	@ (80031fc <HAL_RCC_ClockConfig+0x288>)
 80030f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030fc:	4a3f      	ldr	r2, [pc, #252]	@ (80031fc <HAL_RCC_ClockConfig+0x288>)
 80030fe:	f023 0304 	bic.w	r3, r3, #4
 8003102:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003106:	4b3d      	ldr	r3, [pc, #244]	@ (80031fc <HAL_RCC_ClockConfig+0x288>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d121      	bne.n	8003156 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e112      	b.n	800333c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b02      	cmp	r3, #2
 800311c:	d107      	bne.n	800312e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800311e:	4b37      	ldr	r3, [pc, #220]	@ (80031fc <HAL_RCC_ClockConfig+0x288>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d115      	bne.n	8003156 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e106      	b.n	800333c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d107      	bne.n	8003146 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003136:	4b31      	ldr	r3, [pc, #196]	@ (80031fc <HAL_RCC_ClockConfig+0x288>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	2b00      	cmp	r3, #0
 8003140:	d109      	bne.n	8003156 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e0fa      	b.n	800333c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003146:	4b2d      	ldr	r3, [pc, #180]	@ (80031fc <HAL_RCC_ClockConfig+0x288>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e0f2      	b.n	800333c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8003156:	4b29      	ldr	r3, [pc, #164]	@ (80031fc <HAL_RCC_ClockConfig+0x288>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f023 0203 	bic.w	r2, r3, #3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	4926      	ldr	r1, [pc, #152]	@ (80031fc <HAL_RCC_ClockConfig+0x288>)
 8003164:	4313      	orrs	r3, r2
 8003166:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8003168:	f7fd fe28 	bl	8000dbc <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b03      	cmp	r3, #3
 8003174:	d112      	bne.n	800319c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003176:	e00a      	b.n	800318e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003178:	f7fd fe20 	bl	8000dbc <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003186:	4293      	cmp	r3, r2
 8003188:	d901      	bls.n	800318e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e0d6      	b.n	800333c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800318e:	4b1b      	ldr	r3, [pc, #108]	@ (80031fc <HAL_RCC_ClockConfig+0x288>)
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	f003 030c 	and.w	r3, r3, #12
 8003196:	2b0c      	cmp	r3, #12
 8003198:	d1ee      	bne.n	8003178 <HAL_RCC_ClockConfig+0x204>
 800319a:	e044      	b.n	8003226 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d112      	bne.n	80031ca <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80031a4:	e00a      	b.n	80031bc <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a6:	f7fd fe09 	bl	8000dbc <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e0bf      	b.n	800333c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80031bc:	4b0f      	ldr	r3, [pc, #60]	@ (80031fc <HAL_RCC_ClockConfig+0x288>)
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	f003 030c 	and.w	r3, r3, #12
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d1ee      	bne.n	80031a6 <HAL_RCC_ClockConfig+0x232>
 80031c8:	e02d      	b.n	8003226 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d123      	bne.n	800321a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80031d2:	e00a      	b.n	80031ea <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d4:	f7fd fdf2 	bl	8000dbc <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e0a8      	b.n	800333c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80031ea:	4b04      	ldr	r3, [pc, #16]	@ (80031fc <HAL_RCC_ClockConfig+0x288>)
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	f003 030c 	and.w	r3, r3, #12
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1ee      	bne.n	80031d4 <HAL_RCC_ClockConfig+0x260>
 80031f6:	e016      	b.n	8003226 <HAL_RCC_ClockConfig+0x2b2>
 80031f8:	40022000 	.word	0x40022000
 80031fc:	46020c00 	.word	0x46020c00
 8003200:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003204:	f7fd fdda 	bl	8000dbc <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003212:	4293      	cmp	r3, r2
 8003214:	d901      	bls.n	800321a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e090      	b.n	800333c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800321a:	4b4a      	ldr	r3, [pc, #296]	@ (8003344 <HAL_RCC_ClockConfig+0x3d0>)
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	2b04      	cmp	r3, #4
 8003224:	d1ee      	bne.n	8003204 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d010      	beq.n	8003254 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	4b43      	ldr	r3, [pc, #268]	@ (8003344 <HAL_RCC_ClockConfig+0x3d0>)
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	429a      	cmp	r2, r3
 8003240:	d208      	bcs.n	8003254 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003242:	4b40      	ldr	r3, [pc, #256]	@ (8003344 <HAL_RCC_ClockConfig+0x3d0>)
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	f023 020f 	bic.w	r2, r3, #15
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	493d      	ldr	r1, [pc, #244]	@ (8003344 <HAL_RCC_ClockConfig+0x3d0>)
 8003250:	4313      	orrs	r3, r2
 8003252:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003254:	4b3c      	ldr	r3, [pc, #240]	@ (8003348 <HAL_RCC_ClockConfig+0x3d4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d210      	bcs.n	8003284 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003262:	4b39      	ldr	r3, [pc, #228]	@ (8003348 <HAL_RCC_ClockConfig+0x3d4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f023 020f 	bic.w	r2, r3, #15
 800326a:	4937      	ldr	r1, [pc, #220]	@ (8003348 <HAL_RCC_ClockConfig+0x3d4>)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	4313      	orrs	r3, r2
 8003270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003272:	4b35      	ldr	r3, [pc, #212]	@ (8003348 <HAL_RCC_ClockConfig+0x3d4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d001      	beq.n	8003284 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e05b      	b.n	800333c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	d010      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	4b2b      	ldr	r3, [pc, #172]	@ (8003344 <HAL_RCC_ClockConfig+0x3d0>)
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800329c:	429a      	cmp	r2, r3
 800329e:	d208      	bcs.n	80032b2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80032a0:	4b28      	ldr	r3, [pc, #160]	@ (8003344 <HAL_RCC_ClockConfig+0x3d0>)
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	4925      	ldr	r1, [pc, #148]	@ (8003344 <HAL_RCC_ClockConfig+0x3d0>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d012      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691a      	ldr	r2, [r3, #16]
 80032c2:	4b20      	ldr	r3, [pc, #128]	@ (8003344 <HAL_RCC_ClockConfig+0x3d0>)
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	091b      	lsrs	r3, r3, #4
 80032c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d209      	bcs.n	80032e4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80032d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003344 <HAL_RCC_ClockConfig+0x3d0>)
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	4919      	ldr	r1, [pc, #100]	@ (8003344 <HAL_RCC_ClockConfig+0x3d0>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0310 	and.w	r3, r3, #16
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d010      	beq.n	8003312 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	695a      	ldr	r2, [r3, #20]
 80032f4:	4b13      	ldr	r3, [pc, #76]	@ (8003344 <HAL_RCC_ClockConfig+0x3d0>)
 80032f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d208      	bcs.n	8003312 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8003300:	4b10      	ldr	r3, [pc, #64]	@ (8003344 <HAL_RCC_ClockConfig+0x3d0>)
 8003302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003304:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	490d      	ldr	r1, [pc, #52]	@ (8003344 <HAL_RCC_ClockConfig+0x3d0>)
 800330e:	4313      	orrs	r3, r2
 8003310:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003312:	f000 f821 	bl	8003358 <HAL_RCC_GetSysClockFreq>
 8003316:	4602      	mov	r2, r0
 8003318:	4b0a      	ldr	r3, [pc, #40]	@ (8003344 <HAL_RCC_ClockConfig+0x3d0>)
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	f003 030f 	and.w	r3, r3, #15
 8003320:	490a      	ldr	r1, [pc, #40]	@ (800334c <HAL_RCC_ClockConfig+0x3d8>)
 8003322:	5ccb      	ldrb	r3, [r1, r3]
 8003324:	fa22 f303 	lsr.w	r3, r2, r3
 8003328:	4a09      	ldr	r2, [pc, #36]	@ (8003350 <HAL_RCC_ClockConfig+0x3dc>)
 800332a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800332c:	4b09      	ldr	r3, [pc, #36]	@ (8003354 <HAL_RCC_ClockConfig+0x3e0>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f7fd fcb9 	bl	8000ca8 <HAL_InitTick>
 8003336:	4603      	mov	r3, r0
 8003338:	73fb      	strb	r3, [r7, #15]

  return status;
 800333a:	7bfb      	ldrb	r3, [r7, #15]
}
 800333c:	4618      	mov	r0, r3
 800333e:	3718      	adds	r7, #24
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	46020c00 	.word	0x46020c00
 8003348:	40022000 	.word	0x40022000
 800334c:	080055b4 	.word	0x080055b4
 8003350:	20000000 	.word	0x20000000
 8003354:	20000004 	.word	0x20000004

08003358 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003358:	b480      	push	{r7}
 800335a:	b08b      	sub	sp, #44	@ 0x2c
 800335c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800335e:	2300      	movs	r3, #0
 8003360:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003366:	4b78      	ldr	r3, [pc, #480]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003370:	4b75      	ldr	r3, [pc, #468]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003374:	f003 0303 	and.w	r3, r3, #3
 8003378:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <HAL_RCC_GetSysClockFreq+0x34>
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	2b0c      	cmp	r3, #12
 8003384:	d121      	bne.n	80033ca <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d11e      	bne.n	80033ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800338c:	4b6e      	ldr	r3, [pc, #440]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d107      	bne.n	80033a8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003398:	4b6b      	ldr	r3, [pc, #428]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800339a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800339e:	0b1b      	lsrs	r3, r3, #12
 80033a0:	f003 030f 	and.w	r3, r3, #15
 80033a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80033a6:	e005      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80033a8:	4b67      	ldr	r3, [pc, #412]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	0f1b      	lsrs	r3, r3, #28
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033b4:	4a65      	ldr	r2, [pc, #404]	@ (800354c <HAL_RCC_GetSysClockFreq+0x1f4>)
 80033b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033bc:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d110      	bne.n	80033e6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80033c8:	e00d      	b.n	80033e6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033ca:	4b5f      	ldr	r3, [pc, #380]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f003 030c 	and.w	r3, r3, #12
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d102      	bne.n	80033dc <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033d6:	4b5e      	ldr	r3, [pc, #376]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80033d8:	623b      	str	r3, [r7, #32]
 80033da:	e004      	b.n	80033e6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d101      	bne.n	80033e6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033e2:	4b5c      	ldr	r3, [pc, #368]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80033e4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	2b0c      	cmp	r3, #12
 80033ea:	f040 80a5 	bne.w	8003538 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80033ee:	4b56      	ldr	r3, [pc, #344]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80033f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80033f8:	4b53      	ldr	r3, [pc, #332]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80033fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fc:	0a1b      	lsrs	r3, r3, #8
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	3301      	adds	r3, #1
 8003404:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003406:	4b50      	ldr	r3, [pc, #320]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800340a:	091b      	lsrs	r3, r3, #4
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003412:	4b4d      	ldr	r3, [pc, #308]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003416:	08db      	lsrs	r3, r3, #3
 8003418:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	fb02 f303 	mul.w	r3, r2, r3
 8003422:	ee07 3a90 	vmov	s15, r3
 8003426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800342a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	2b02      	cmp	r3, #2
 8003432:	d003      	beq.n	800343c <HAL_RCC_GetSysClockFreq+0xe4>
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	2b03      	cmp	r3, #3
 8003438:	d022      	beq.n	8003480 <HAL_RCC_GetSysClockFreq+0x128>
 800343a:	e043      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	ee07 3a90 	vmov	s15, r3
 8003442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003446:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8003558 <HAL_RCC_GetSysClockFreq+0x200>
 800344a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800344e:	4b3e      	ldr	r3, [pc, #248]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003456:	ee07 3a90 	vmov	s15, r3
 800345a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800345e:	ed97 6a01 	vldr	s12, [r7, #4]
 8003462:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800355c <HAL_RCC_GetSysClockFreq+0x204>
 8003466:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800346a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800346e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003472:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800347a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800347e:	e046      	b.n	800350e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	ee07 3a90 	vmov	s15, r3
 8003486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800348a:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8003560 <HAL_RCC_GetSysClockFreq+0x208>
 800348e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003492:	4b2d      	ldr	r3, [pc, #180]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800349a:	ee07 3a90 	vmov	s15, r3
 800349e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80034a2:	ed97 6a01 	vldr	s12, [r7, #4]
 80034a6:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 800355c <HAL_RCC_GetSysClockFreq+0x204>
 80034aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80034ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80034b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80034ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034c2:	e024      	b.n	800350e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80034c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c6:	ee07 3a90 	vmov	s15, r3
 80034ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	ee07 3a90 	vmov	s15, r3
 80034d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e4:	ee07 3a90 	vmov	s15, r3
 80034e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80034ec:	ed97 6a01 	vldr	s12, [r7, #4]
 80034f0:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 800355c <HAL_RCC_GetSysClockFreq+0x204>
 80034f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80034f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80034fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003500:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003504:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003508:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800350c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800350e:	4b0e      	ldr	r3, [pc, #56]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003512:	0e1b      	lsrs	r3, r3, #24
 8003514:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003518:	3301      	adds	r3, #1
 800351a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	ee07 3a90 	vmov	s15, r3
 8003522:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003526:	edd7 6a07 	vldr	s13, [r7, #28]
 800352a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800352e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003532:	ee17 3a90 	vmov	r3, s15
 8003536:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8003538:	6a3b      	ldr	r3, [r7, #32]
}
 800353a:	4618      	mov	r0, r3
 800353c:	372c      	adds	r7, #44	@ 0x2c
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	46020c00 	.word	0x46020c00
 800354c:	080055c4 	.word	0x080055c4
 8003550:	00f42400 	.word	0x00f42400
 8003554:	016e3600 	.word	0x016e3600
 8003558:	4b742400 	.word	0x4b742400
 800355c:	46000000 	.word	0x46000000
 8003560:	4bb71b00 	.word	0x4bb71b00

08003564 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003568:	f7ff fef6 	bl	8003358 <HAL_RCC_GetSysClockFreq>
 800356c:	4602      	mov	r2, r0
 800356e:	4b07      	ldr	r3, [pc, #28]	@ (800358c <HAL_RCC_GetHCLKFreq+0x28>)
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	4906      	ldr	r1, [pc, #24]	@ (8003590 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003578:	5ccb      	ldrb	r3, [r1, r3]
 800357a:	fa22 f303 	lsr.w	r3, r2, r3
 800357e:	4a05      	ldr	r2, [pc, #20]	@ (8003594 <HAL_RCC_GetHCLKFreq+0x30>)
 8003580:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003582:	4b04      	ldr	r3, [pc, #16]	@ (8003594 <HAL_RCC_GetHCLKFreq+0x30>)
 8003584:	681b      	ldr	r3, [r3, #0]
}
 8003586:	4618      	mov	r0, r3
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	46020c00 	.word	0x46020c00
 8003590:	080055b4 	.word	0x080055b4
 8003594:	20000000 	.word	0x20000000

08003598 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035a0:	4b3e      	ldr	r3, [pc, #248]	@ (800369c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80035a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035a6:	f003 0304 	and.w	r3, r3, #4
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035ae:	f7fe fdf7 	bl	80021a0 <HAL_PWREx_GetVoltageRange>
 80035b2:	6178      	str	r0, [r7, #20]
 80035b4:	e019      	b.n	80035ea <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035b6:	4b39      	ldr	r3, [pc, #228]	@ (800369c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80035b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035bc:	4a37      	ldr	r2, [pc, #220]	@ (800369c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80035be:	f043 0304 	orr.w	r3, r3, #4
 80035c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80035c6:	4b35      	ldr	r3, [pc, #212]	@ (800369c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80035c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035d4:	f7fe fde4 	bl	80021a0 <HAL_PWREx_GetVoltageRange>
 80035d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035da:	4b30      	ldr	r3, [pc, #192]	@ (800369c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80035dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035e0:	4a2e      	ldr	r2, [pc, #184]	@ (800369c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80035e2:	f023 0304 	bic.w	r3, r3, #4
 80035e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80035f0:	d003      	beq.n	80035fa <RCC_SetFlashLatencyFromMSIRange+0x62>
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035f8:	d109      	bne.n	800360e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003600:	d202      	bcs.n	8003608 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8003602:	2301      	movs	r3, #1
 8003604:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003606:	e033      	b.n	8003670 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8003608:	2300      	movs	r3, #0
 800360a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800360c:	e030      	b.n	8003670 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003614:	d208      	bcs.n	8003628 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800361c:	d102      	bne.n	8003624 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800361e:	2303      	movs	r3, #3
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	e025      	b.n	8003670 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e035      	b.n	8003694 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800362e:	d90f      	bls.n	8003650 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d109      	bne.n	800364a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800363c:	d902      	bls.n	8003644 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800363e:	2300      	movs	r3, #0
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	e015      	b.n	8003670 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003644:	2301      	movs	r3, #1
 8003646:	613b      	str	r3, [r7, #16]
 8003648:	e012      	b.n	8003670 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800364a:	2300      	movs	r3, #0
 800364c:	613b      	str	r3, [r7, #16]
 800364e:	e00f      	b.n	8003670 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003656:	d109      	bne.n	800366c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800365e:	d102      	bne.n	8003666 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8003660:	2301      	movs	r3, #1
 8003662:	613b      	str	r3, [r7, #16]
 8003664:	e004      	b.n	8003670 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8003666:	2302      	movs	r3, #2
 8003668:	613b      	str	r3, [r7, #16]
 800366a:	e001      	b.n	8003670 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800366c:	2301      	movs	r3, #1
 800366e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003670:	4b0b      	ldr	r3, [pc, #44]	@ (80036a0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f023 020f 	bic.w	r2, r3, #15
 8003678:	4909      	ldr	r1, [pc, #36]	@ (80036a0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	4313      	orrs	r3, r2
 800367e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003680:	4b07      	ldr	r3, [pc, #28]	@ (80036a0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 030f 	and.w	r3, r3, #15
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	429a      	cmp	r2, r3
 800368c:	d001      	beq.n	8003692 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e000      	b.n	8003694 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	46020c00 	.word	0x46020c00
 80036a0:	40022000 	.word	0x40022000

080036a4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80036a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036a8:	b0b8      	sub	sp, #224	@ 0xe0
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036b0:	2300      	movs	r3, #0
 80036b2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036b6:	2300      	movs	r3, #0
 80036b8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c4:	f002 0401 	and.w	r4, r2, #1
 80036c8:	2500      	movs	r5, #0
 80036ca:	ea54 0305 	orrs.w	r3, r4, r5
 80036ce:	d00b      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80036d0:	4bca      	ldr	r3, [pc, #808]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80036d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036d6:	f023 0103 	bic.w	r1, r3, #3
 80036da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036e0:	4ac6      	ldr	r2, [pc, #792]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80036e2:	430b      	orrs	r3, r1
 80036e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f0:	f002 0802 	and.w	r8, r2, #2
 80036f4:	f04f 0900 	mov.w	r9, #0
 80036f8:	ea58 0309 	orrs.w	r3, r8, r9
 80036fc:	d00b      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80036fe:	4bbf      	ldr	r3, [pc, #764]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003704:	f023 010c 	bic.w	r1, r3, #12
 8003708:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800370c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800370e:	4abb      	ldr	r2, [pc, #748]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003710:	430b      	orrs	r3, r1
 8003712:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003716:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800371a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371e:	f002 0a04 	and.w	sl, r2, #4
 8003722:	f04f 0b00 	mov.w	fp, #0
 8003726:	ea5a 030b 	orrs.w	r3, sl, fp
 800372a:	d00b      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800372c:	4bb3      	ldr	r3, [pc, #716]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800372e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003732:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003736:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800373a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373c:	4aaf      	ldr	r2, [pc, #700]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800373e:	430b      	orrs	r3, r1
 8003740:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003744:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374c:	f002 0308 	and.w	r3, r2, #8
 8003750:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003754:	2300      	movs	r3, #0
 8003756:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800375a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800375e:	460b      	mov	r3, r1
 8003760:	4313      	orrs	r3, r2
 8003762:	d00b      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003764:	4ba5      	ldr	r3, [pc, #660]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800376a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800376e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003774:	4aa1      	ldr	r2, [pc, #644]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003776:	430b      	orrs	r3, r1
 8003778:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800377c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003784:	f002 0310 	and.w	r3, r2, #16
 8003788:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800378c:	2300      	movs	r3, #0
 800378e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003792:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003796:	460b      	mov	r3, r1
 8003798:	4313      	orrs	r3, r2
 800379a:	d00b      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800379c:	4b97      	ldr	r3, [pc, #604]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800379e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80037a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80037aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ac:	4a93      	ldr	r2, [pc, #588]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80037ae:	430b      	orrs	r3, r1
 80037b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80037b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037bc:	f002 0320 	and.w	r3, r2, #32
 80037c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80037c4:	2300      	movs	r3, #0
 80037c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037ca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4313      	orrs	r3, r2
 80037d2:	d00b      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80037d4:	4b89      	ldr	r3, [pc, #548]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80037d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80037da:	f023 0107 	bic.w	r1, r3, #7
 80037de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80037e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037e4:	4a85      	ldr	r2, [pc, #532]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80037e6:	430b      	orrs	r3, r1
 80037e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f4:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80037f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80037fc:	2300      	movs	r3, #0
 80037fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003802:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003806:	460b      	mov	r3, r1
 8003808:	4313      	orrs	r3, r2
 800380a:	d00b      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800380c:	4b7b      	ldr	r3, [pc, #492]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800380e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003812:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8003816:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800381a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800381c:	4a77      	ldr	r2, [pc, #476]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800381e:	430b      	orrs	r3, r1
 8003820:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003824:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003830:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003834:	2300      	movs	r3, #0
 8003836:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800383a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800383e:	460b      	mov	r3, r1
 8003840:	4313      	orrs	r3, r2
 8003842:	d00b      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003844:	4b6d      	ldr	r3, [pc, #436]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800384a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800384e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003852:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003854:	4a69      	ldr	r2, [pc, #420]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003856:	430b      	orrs	r3, r1
 8003858:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800385c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003864:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8003868:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800386c:	2300      	movs	r3, #0
 800386e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003872:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003876:	460b      	mov	r3, r1
 8003878:	4313      	orrs	r3, r2
 800387a:	d00b      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800387c:	4b5f      	ldr	r3, [pc, #380]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800387e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003882:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003886:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800388a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800388c:	4a5b      	ldr	r2, [pc, #364]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800388e:	430b      	orrs	r3, r1
 8003890:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003894:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80038a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80038a4:	2300      	movs	r3, #0
 80038a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80038aa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80038ae:	460b      	mov	r3, r1
 80038b0:	4313      	orrs	r3, r2
 80038b2:	d00b      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80038b4:	4b51      	ldr	r3, [pc, #324]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038ba:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 80038be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80038c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038c4:	4a4d      	ldr	r2, [pc, #308]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038c6:	430b      	orrs	r3, r1
 80038c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80038d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d4:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80038d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80038dc:	2300      	movs	r3, #0
 80038de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80038e2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80038e6:	460b      	mov	r3, r1
 80038e8:	4313      	orrs	r3, r2
 80038ea:	d00b      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80038ec:	4b43      	ldr	r3, [pc, #268]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80038f2:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80038f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80038fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038fc:	4a3f      	ldr	r2, [pc, #252]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038fe:	430b      	orrs	r3, r1
 8003900:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003904:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003910:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003914:	2300      	movs	r3, #0
 8003916:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800391a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800391e:	460b      	mov	r3, r1
 8003920:	4313      	orrs	r3, r2
 8003922:	d00b      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003924:	4b35      	ldr	r3, [pc, #212]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800392a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800392e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003932:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003934:	4a31      	ldr	r2, [pc, #196]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003936:	430b      	orrs	r3, r1
 8003938:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800393c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003944:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003948:	67bb      	str	r3, [r7, #120]	@ 0x78
 800394a:	2300      	movs	r3, #0
 800394c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800394e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003952:	460b      	mov	r3, r1
 8003954:	4313      	orrs	r3, r2
 8003956:	d00c      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003958:	4b28      	ldr	r3, [pc, #160]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800395a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800395e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003962:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003966:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800396a:	4a24      	ldr	r2, [pc, #144]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800396c:	430b      	orrs	r3, r1
 800396e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003972:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800397e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003980:	2300      	movs	r3, #0
 8003982:	677b      	str	r3, [r7, #116]	@ 0x74
 8003984:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003988:	460b      	mov	r3, r1
 800398a:	4313      	orrs	r3, r2
 800398c:	d04f      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800398e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003996:	2b80      	cmp	r3, #128	@ 0x80
 8003998:	d02d      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x352>
 800399a:	2b80      	cmp	r3, #128	@ 0x80
 800399c:	d827      	bhi.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800399e:	2b60      	cmp	r3, #96	@ 0x60
 80039a0:	d02e      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80039a2:	2b60      	cmp	r3, #96	@ 0x60
 80039a4:	d823      	bhi.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80039a6:	2b40      	cmp	r3, #64	@ 0x40
 80039a8:	d006      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80039aa:	2b40      	cmp	r3, #64	@ 0x40
 80039ac:	d81f      	bhi.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d009      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x322>
 80039b2:	2b20      	cmp	r3, #32
 80039b4:	d011      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x336>
 80039b6:	e01a      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80039b8:	4b10      	ldr	r3, [pc, #64]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80039ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039bc:	4a0f      	ldr	r2, [pc, #60]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80039be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039c2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80039c4:	e01d      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80039ca:	3308      	adds	r3, #8
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 fc0d 	bl	80041ec <RCCEx_PLL2_Config>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80039d8:	e013      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80039da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80039de:	332c      	adds	r3, #44	@ 0x2c
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fc9b 	bl	800431c <RCCEx_PLL3_Config>
 80039e6:	4603      	mov	r3, r0
 80039e8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80039ec:	e009      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80039f4:	e005      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 80039f6:	bf00      	nop
 80039f8:	e003      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80039fa:	bf00      	nop
 80039fc:	46020c00 	.word	0x46020c00
        break;
 8003a00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a02:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10d      	bne.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003a0a:	4bb6      	ldr	r3, [pc, #728]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003a0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003a10:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8003a14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a1c:	4ab1      	ldr	r2, [pc, #708]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003a1e:	430b      	orrs	r3, r1
 8003a20:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003a24:	e003      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a26:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003a2a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a36:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003a3a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a40:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003a44:	460b      	mov	r3, r1
 8003a46:	4313      	orrs	r3, r2
 8003a48:	d053      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003a4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a56:	d033      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003a58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a5c:	d82c      	bhi.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003a5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a62:	d02f      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003a64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a68:	d826      	bhi.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003a6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a6e:	d008      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003a70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a74:	d820      	bhi.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00a      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a7e:	d011      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003a80:	e01a      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003a82:	4b98      	ldr	r3, [pc, #608]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a86:	4a97      	ldr	r2, [pc, #604]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a8c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003a8e:	e01a      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003a94:	3308      	adds	r3, #8
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fba8 	bl	80041ec <RCCEx_PLL2_Config>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003aa2:	e010      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003aa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003aa8:	332c      	adds	r3, #44	@ 0x2c
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 fc36 	bl	800431c <RCCEx_PLL3_Config>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003ab6:	e006      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003abe:	e002      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8003ac0:	bf00      	nop
 8003ac2:	e000      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8003ac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ac6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10d      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8003ace:	4b85      	ldr	r3, [pc, #532]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003ad0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003ad4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003ad8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ae0:	4a80      	ldr	r2, [pc, #512]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003ae2:	430b      	orrs	r3, r1
 8003ae4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003ae8:	e003      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aea:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003aee:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003af2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afa:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003afe:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b00:	2300      	movs	r3, #0
 8003b02:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b04:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	d046      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003b0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003b16:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003b1a:	d028      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003b1c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003b20:	d821      	bhi.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003b22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b26:	d022      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003b28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b2c:	d81b      	bhi.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003b2e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b32:	d01c      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003b34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b38:	d815      	bhi.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003b3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b3e:	d008      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003b40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b44:	d80f      	bhi.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d011      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003b4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b4e:	d00e      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003b50:	e009      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b56:	3308      	adds	r3, #8
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f000 fb47 	bl	80041ec <RCCEx_PLL2_Config>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003b64:	e004      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003b6c:	e000      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8003b6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b70:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10d      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003b78:	4b5a      	ldr	r3, [pc, #360]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003b7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b7e:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003b82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003b8a:	4a56      	ldr	r2, [pc, #344]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003b92:	e003      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b94:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003b98:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003b9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003ba8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003baa:	2300      	movs	r3, #0
 8003bac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003bae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	d03f      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003bb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc0:	2b04      	cmp	r3, #4
 8003bc2:	d81e      	bhi.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8003bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8003bcc <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8003bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bca:	bf00      	nop
 8003bcc:	08003c0b 	.word	0x08003c0b
 8003bd0:	08003be1 	.word	0x08003be1
 8003bd4:	08003bef 	.word	0x08003bef
 8003bd8:	08003c0b 	.word	0x08003c0b
 8003bdc:	08003c0b 	.word	0x08003c0b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003be0:	4b40      	ldr	r3, [pc, #256]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be4:	4a3f      	ldr	r2, [pc, #252]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003be6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bea:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003bec:	e00e      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003bee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003bf2:	332c      	adds	r3, #44	@ 0x2c
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 fb91 	bl	800431c <RCCEx_PLL3_Config>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003c00:	e004      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003c08:	e000      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8003c0a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003c0c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10d      	bne.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003c14:	4b33      	ldr	r3, [pc, #204]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003c16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003c1a:	f023 0107 	bic.w	r1, r3, #7
 8003c1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c26:	4a2f      	ldr	r2, [pc, #188]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003c28:	430b      	orrs	r3, r1
 8003c2a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003c2e:	e003      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c30:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003c34:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003c38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c40:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003c44:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c46:	2300      	movs	r3, #0
 8003c48:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c4a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4313      	orrs	r3, r2
 8003c52:	d04d      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003c54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c60:	d028      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8003c62:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c66:	d821      	bhi.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003c68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c6c:	d024      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8003c6e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c72:	d81b      	bhi.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003c74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c78:	d00e      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8003c7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c7e:	d815      	bhi.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d01b      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x618>
 8003c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c88:	d110      	bne.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c8a:	4b16      	ldr	r3, [pc, #88]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8e:	4a15      	ldr	r2, [pc, #84]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c94:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003c96:	e012      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c9c:	332c      	adds	r3, #44	@ 0x2c
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 fb3c 	bl	800431c <RCCEx_PLL3_Config>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003caa:	e008      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003cb2:	e004      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8003cb4:	bf00      	nop
 8003cb6:	e002      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8003cb8:	bf00      	nop
 8003cba:	e000      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8003cbc:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003cbe:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d110      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003cc6:	4b07      	ldr	r3, [pc, #28]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003cc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003ccc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003cd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cd8:	4a02      	ldr	r2, [pc, #8]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003cda:	430b      	orrs	r3, r1
 8003cdc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003ce0:	e006      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003ce2:	bf00      	nop
 8003ce4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003cec:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cf0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf8:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cfe:	2300      	movs	r3, #0
 8003d00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d02:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003d06:	460b      	mov	r3, r1
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f000 80b5 	beq.w	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d14:	4b9d      	ldr	r3, [pc, #628]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d1a:	f003 0304 	and.w	r3, r3, #4
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d113      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d22:	4b9a      	ldr	r3, [pc, #616]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d28:	4a98      	ldr	r2, [pc, #608]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003d2a:	f043 0304 	orr.w	r3, r3, #4
 8003d2e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003d32:	4b96      	ldr	r3, [pc, #600]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003d34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d40:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8003d44:	2301      	movs	r3, #1
 8003d46:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003d4a:	4b91      	ldr	r3, [pc, #580]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d4e:	4a90      	ldr	r2, [pc, #576]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003d50:	f043 0301 	orr.w	r3, r3, #1
 8003d54:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d56:	f7fd f831 	bl	8000dbc <HAL_GetTick>
 8003d5a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003d5e:	e00b      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d60:	f7fd f82c 	bl	8000dbc <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d903      	bls.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003d76:	e005      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003d78:	4b85      	ldr	r3, [pc, #532]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0ed      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8003d84:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d165      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d8c:	4b7f      	ldr	r3, [pc, #508]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003d8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003d9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d023      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x746>
 8003da2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003da6:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8003daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d01b      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003db2:	4b76      	ldr	r3, [pc, #472]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003db4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003db8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dbc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dc0:	4b72      	ldr	r3, [pc, #456]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003dc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dc6:	4a71      	ldr	r2, [pc, #452]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003dc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dcc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dd0:	4b6e      	ldr	r3, [pc, #440]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003dd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dd6:	4a6d      	ldr	r2, [pc, #436]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003dd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ddc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003de0:	4a6a      	ldr	r2, [pc, #424]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003de2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003de6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d019      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df6:	f7fc ffe1 	bl	8000dbc <HAL_GetTick>
 8003dfa:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dfe:	e00d      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e00:	f7fc ffdc 	bl	8000dbc <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e0a:	1ad2      	subs	r2, r2, r3
 8003e0c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d903      	bls.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 8003e1a:	e006      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e1c:	4b5b      	ldr	r3, [pc, #364]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003e1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0ea      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8003e2a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10d      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003e32:	4b56      	ldr	r3, [pc, #344]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003e34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e38:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003e3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003e40:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003e44:	4a51      	ldr	r2, [pc, #324]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003e46:	430b      	orrs	r3, r1
 8003e48:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e4c:	e008      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e4e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003e52:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8003e56:	e003      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e58:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003e5c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e60:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d107      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e68:	4b48      	ldr	r3, [pc, #288]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e6e:	4a47      	ldr	r2, [pc, #284]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003e70:	f023 0304 	bic.w	r3, r3, #4
 8003e74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8003e78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e80:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003e84:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e86:	2300      	movs	r3, #0
 8003e88:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e8a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4313      	orrs	r3, r2
 8003e92:	d042      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8003e94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003e98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e9c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003ea0:	d022      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8003ea2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003ea6:	d81b      	bhi.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003ea8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003eac:	d011      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8003eae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003eb2:	d815      	bhi.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d019      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x848>
 8003eb8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ebc:	d110      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ebe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ec2:	3308      	adds	r3, #8
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 f991 	bl	80041ec <RCCEx_PLL2_Config>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003ed0:	e00d      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ed2:	4b2e      	ldr	r3, [pc, #184]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed6:	4a2d      	ldr	r2, [pc, #180]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003ed8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003edc:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003ede:	e006      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003ee6:	e002      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8003ee8:	bf00      	nop
 8003eea:	e000      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8003eec:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003eee:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10d      	bne.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8003ef6:	4b25      	ldr	r3, [pc, #148]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003efc:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003f00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f04:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f08:	4a20      	ldr	r2, [pc, #128]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003f0a:	430b      	orrs	r3, r1
 8003f0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003f10:	e003      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f12:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003f16:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003f1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f22:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003f26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f28:	2300      	movs	r3, #0
 8003f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f2c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003f30:	460b      	mov	r3, r1
 8003f32:	4313      	orrs	r3, r2
 8003f34:	d032      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003f36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f42:	d00b      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003f44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f48:	d804      	bhi.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d008      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003f4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f52:	d007      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8003f5a:	e004      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8003f5c:	bf00      	nop
 8003f5e:	e002      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8003f60:	bf00      	nop
 8003f62:	e000      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8003f64:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003f66:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d112      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003f6e:	4b07      	ldr	r3, [pc, #28]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003f70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003f74:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f80:	4a02      	ldr	r2, [pc, #8]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003f82:	430b      	orrs	r3, r1
 8003f84:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003f88:	e008      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8003f8a:	bf00      	nop
 8003f8c:	46020c00 	.word	0x46020c00
 8003f90:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f94:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8003f98:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8003f9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003fa8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003faa:	2300      	movs	r3, #0
 8003fac:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	d019      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8003fb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003fbc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003fc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fc4:	d105      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003fc6:	4b88      	ldr	r3, [pc, #544]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fca:	4a87      	ldr	r2, [pc, #540]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fd0:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8003fd2:	4b85      	ldr	r3, [pc, #532]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003fd4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003fd8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003fdc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003fe0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003fe4:	4a80      	ldr	r2, [pc, #512]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003fe6:	430b      	orrs	r3, r1
 8003fe8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003fec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ffe:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004002:	460b      	mov	r3, r1
 8004004:	4313      	orrs	r3, r2
 8004006:	d00c      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004008:	4b77      	ldr	r3, [pc, #476]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800400a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800400e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004012:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004016:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800401a:	4973      	ldr	r1, [pc, #460]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004022:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800402e:	623b      	str	r3, [r7, #32]
 8004030:	2300      	movs	r3, #0
 8004032:	627b      	str	r3, [r7, #36]	@ 0x24
 8004034:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004038:	460b      	mov	r3, r1
 800403a:	4313      	orrs	r3, r2
 800403c:	d00c      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800403e:	4b6a      	ldr	r3, [pc, #424]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004044:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004048:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800404c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004050:	4965      	ldr	r1, [pc, #404]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004052:	4313      	orrs	r3, r2
 8004054:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004058:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800405c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004060:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	2300      	movs	r3, #0
 8004068:	61fb      	str	r3, [r7, #28]
 800406a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800406e:	460b      	mov	r3, r1
 8004070:	4313      	orrs	r3, r2
 8004072:	d00c      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004074:	4b5c      	ldr	r3, [pc, #368]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004076:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800407a:	f023 0218 	bic.w	r2, r3, #24
 800407e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004082:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004086:	4958      	ldr	r1, [pc, #352]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004088:	4313      	orrs	r3, r2
 800408a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800408e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004096:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800409a:	613b      	str	r3, [r7, #16]
 800409c:	2300      	movs	r3, #0
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80040a4:	460b      	mov	r3, r1
 80040a6:	4313      	orrs	r3, r2
 80040a8:	d032      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80040aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80040ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80040b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040b6:	d105      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040b8:	4b4b      	ldr	r3, [pc, #300]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80040ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040bc:	4a4a      	ldr	r2, [pc, #296]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80040be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040c2:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80040c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80040c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80040cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80040d0:	d108      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80040d6:	3308      	adds	r3, #8
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 f887 	bl	80041ec <RCCEx_PLL2_Config>
 80040de:	4603      	mov	r3, r0
 80040e0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 80040e4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10d      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80040ec:	4b3e      	ldr	r3, [pc, #248]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80040ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80040f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80040f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80040fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80040fe:	493a      	ldr	r1, [pc, #232]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004106:	e003      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004108:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800410c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8004110:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004118:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800411c:	60bb      	str	r3, [r7, #8]
 800411e:	2300      	movs	r3, #0
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004126:	460b      	mov	r3, r1
 8004128:	4313      	orrs	r3, r2
 800412a:	d03a      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800412c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004130:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004134:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004138:	d00e      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800413a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800413e:	d815      	bhi.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8004140:	2b00      	cmp	r3, #0
 8004142:	d017      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8004144:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004148:	d110      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800414a:	4b27      	ldr	r3, [pc, #156]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800414c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800414e:	4a26      	ldr	r2, [pc, #152]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004150:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004154:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004156:	e00e      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004158:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800415c:	3308      	adds	r3, #8
 800415e:	4618      	mov	r0, r3
 8004160:	f000 f844 	bl	80041ec <RCCEx_PLL2_Config>
 8004164:	4603      	mov	r3, r0
 8004166:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800416a:	e004      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004172:	e000      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8004174:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004176:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10d      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800417e:	4b1a      	ldr	r3, [pc, #104]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004184:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004188:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800418c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004190:	4915      	ldr	r1, [pc, #84]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004198:	e003      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800419a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800419e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80041a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80041a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041aa:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80041ae:	603b      	str	r3, [r7, #0]
 80041b0:	2300      	movs	r3, #0
 80041b2:	607b      	str	r3, [r7, #4]
 80041b4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80041b8:	460b      	mov	r3, r1
 80041ba:	4313      	orrs	r3, r2
 80041bc:	d00c      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80041be:	4b0a      	ldr	r3, [pc, #40]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80041c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80041c4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80041c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80041cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80041d0:	4905      	ldr	r1, [pc, #20]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80041d8:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 80041dc:	4618      	mov	r0, r3
 80041de:	37e0      	adds	r7, #224	@ 0xe0
 80041e0:	46bd      	mov	sp, r7
 80041e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041e6:	bf00      	nop
 80041e8:	46020c00 	.word	0x46020c00

080041ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80041f4:	4b47      	ldr	r3, [pc, #284]	@ (8004314 <RCCEx_PLL2_Config+0x128>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a46      	ldr	r2, [pc, #280]	@ (8004314 <RCCEx_PLL2_Config+0x128>)
 80041fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80041fe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004200:	f7fc fddc 	bl	8000dbc <HAL_GetTick>
 8004204:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004206:	e008      	b.n	800421a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004208:	f7fc fdd8 	bl	8000dbc <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d901      	bls.n	800421a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e077      	b.n	800430a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800421a:	4b3e      	ldr	r3, [pc, #248]	@ (8004314 <RCCEx_PLL2_Config+0x128>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1f0      	bne.n	8004208 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004226:	4b3b      	ldr	r3, [pc, #236]	@ (8004314 <RCCEx_PLL2_Config+0x128>)
 8004228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800422e:	f023 0303 	bic.w	r3, r3, #3
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	6811      	ldr	r1, [r2, #0]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6852      	ldr	r2, [r2, #4]
 800423a:	3a01      	subs	r2, #1
 800423c:	0212      	lsls	r2, r2, #8
 800423e:	430a      	orrs	r2, r1
 8004240:	4934      	ldr	r1, [pc, #208]	@ (8004314 <RCCEx_PLL2_Config+0x128>)
 8004242:	4313      	orrs	r3, r2
 8004244:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8004246:	4b33      	ldr	r3, [pc, #204]	@ (8004314 <RCCEx_PLL2_Config+0x128>)
 8004248:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800424a:	4b33      	ldr	r3, [pc, #204]	@ (8004318 <RCCEx_PLL2_Config+0x12c>)
 800424c:	4013      	ands	r3, r2
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6892      	ldr	r2, [r2, #8]
 8004252:	3a01      	subs	r2, #1
 8004254:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	68d2      	ldr	r2, [r2, #12]
 800425c:	3a01      	subs	r2, #1
 800425e:	0252      	lsls	r2, r2, #9
 8004260:	b292      	uxth	r2, r2
 8004262:	4311      	orrs	r1, r2
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6912      	ldr	r2, [r2, #16]
 8004268:	3a01      	subs	r2, #1
 800426a:	0412      	lsls	r2, r2, #16
 800426c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004270:	4311      	orrs	r1, r2
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6952      	ldr	r2, [r2, #20]
 8004276:	3a01      	subs	r2, #1
 8004278:	0612      	lsls	r2, r2, #24
 800427a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800427e:	430a      	orrs	r2, r1
 8004280:	4924      	ldr	r1, [pc, #144]	@ (8004314 <RCCEx_PLL2_Config+0x128>)
 8004282:	4313      	orrs	r3, r2
 8004284:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8004286:	4b23      	ldr	r3, [pc, #140]	@ (8004314 <RCCEx_PLL2_Config+0x128>)
 8004288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800428a:	f023 020c 	bic.w	r2, r3, #12
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	4920      	ldr	r1, [pc, #128]	@ (8004314 <RCCEx_PLL2_Config+0x128>)
 8004294:	4313      	orrs	r3, r2
 8004296:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8004298:	4b1e      	ldr	r3, [pc, #120]	@ (8004314 <RCCEx_PLL2_Config+0x128>)
 800429a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	491c      	ldr	r1, [pc, #112]	@ (8004314 <RCCEx_PLL2_Config+0x128>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80042a6:	4b1b      	ldr	r3, [pc, #108]	@ (8004314 <RCCEx_PLL2_Config+0x128>)
 80042a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042aa:	4a1a      	ldr	r2, [pc, #104]	@ (8004314 <RCCEx_PLL2_Config+0x128>)
 80042ac:	f023 0310 	bic.w	r3, r3, #16
 80042b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80042b2:	4b18      	ldr	r3, [pc, #96]	@ (8004314 <RCCEx_PLL2_Config+0x128>)
 80042b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042ba:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	69d2      	ldr	r2, [r2, #28]
 80042c2:	00d2      	lsls	r2, r2, #3
 80042c4:	4913      	ldr	r1, [pc, #76]	@ (8004314 <RCCEx_PLL2_Config+0x128>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80042ca:	4b12      	ldr	r3, [pc, #72]	@ (8004314 <RCCEx_PLL2_Config+0x128>)
 80042cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ce:	4a11      	ldr	r2, [pc, #68]	@ (8004314 <RCCEx_PLL2_Config+0x128>)
 80042d0:	f043 0310 	orr.w	r3, r3, #16
 80042d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80042d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004314 <RCCEx_PLL2_Config+0x128>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a0e      	ldr	r2, [pc, #56]	@ (8004314 <RCCEx_PLL2_Config+0x128>)
 80042dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80042e0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80042e2:	f7fc fd6b 	bl	8000dbc <HAL_GetTick>
 80042e6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042e8:	e008      	b.n	80042fc <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80042ea:	f7fc fd67 	bl	8000dbc <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e006      	b.n	800430a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042fc:	4b05      	ldr	r3, [pc, #20]	@ (8004314 <RCCEx_PLL2_Config+0x128>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f0      	beq.n	80042ea <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8004308:	2300      	movs	r3, #0

}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	46020c00 	.word	0x46020c00
 8004318:	80800000 	.word	0x80800000

0800431c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8004324:	4b47      	ldr	r3, [pc, #284]	@ (8004444 <RCCEx_PLL3_Config+0x128>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a46      	ldr	r2, [pc, #280]	@ (8004444 <RCCEx_PLL3_Config+0x128>)
 800432a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800432e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004330:	f7fc fd44 	bl	8000dbc <HAL_GetTick>
 8004334:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004336:	e008      	b.n	800434a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004338:	f7fc fd40 	bl	8000dbc <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e077      	b.n	800443a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800434a:	4b3e      	ldr	r3, [pc, #248]	@ (8004444 <RCCEx_PLL3_Config+0x128>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1f0      	bne.n	8004338 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8004356:	4b3b      	ldr	r3, [pc, #236]	@ (8004444 <RCCEx_PLL3_Config+0x128>)
 8004358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800435a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800435e:	f023 0303 	bic.w	r3, r3, #3
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	6811      	ldr	r1, [r2, #0]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6852      	ldr	r2, [r2, #4]
 800436a:	3a01      	subs	r2, #1
 800436c:	0212      	lsls	r2, r2, #8
 800436e:	430a      	orrs	r2, r1
 8004370:	4934      	ldr	r1, [pc, #208]	@ (8004444 <RCCEx_PLL3_Config+0x128>)
 8004372:	4313      	orrs	r3, r2
 8004374:	630b      	str	r3, [r1, #48]	@ 0x30
 8004376:	4b33      	ldr	r3, [pc, #204]	@ (8004444 <RCCEx_PLL3_Config+0x128>)
 8004378:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800437a:	4b33      	ldr	r3, [pc, #204]	@ (8004448 <RCCEx_PLL3_Config+0x12c>)
 800437c:	4013      	ands	r3, r2
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6892      	ldr	r2, [r2, #8]
 8004382:	3a01      	subs	r2, #1
 8004384:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	68d2      	ldr	r2, [r2, #12]
 800438c:	3a01      	subs	r2, #1
 800438e:	0252      	lsls	r2, r2, #9
 8004390:	b292      	uxth	r2, r2
 8004392:	4311      	orrs	r1, r2
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6912      	ldr	r2, [r2, #16]
 8004398:	3a01      	subs	r2, #1
 800439a:	0412      	lsls	r2, r2, #16
 800439c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80043a0:	4311      	orrs	r1, r2
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6952      	ldr	r2, [r2, #20]
 80043a6:	3a01      	subs	r2, #1
 80043a8:	0612      	lsls	r2, r2, #24
 80043aa:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80043ae:	430a      	orrs	r2, r1
 80043b0:	4924      	ldr	r1, [pc, #144]	@ (8004444 <RCCEx_PLL3_Config+0x128>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80043b6:	4b23      	ldr	r3, [pc, #140]	@ (8004444 <RCCEx_PLL3_Config+0x128>)
 80043b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ba:	f023 020c 	bic.w	r2, r3, #12
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	4920      	ldr	r1, [pc, #128]	@ (8004444 <RCCEx_PLL3_Config+0x128>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80043c8:	4b1e      	ldr	r3, [pc, #120]	@ (8004444 <RCCEx_PLL3_Config+0x128>)
 80043ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	491c      	ldr	r1, [pc, #112]	@ (8004444 <RCCEx_PLL3_Config+0x128>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80043d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004444 <RCCEx_PLL3_Config+0x128>)
 80043d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043da:	4a1a      	ldr	r2, [pc, #104]	@ (8004444 <RCCEx_PLL3_Config+0x128>)
 80043dc:	f023 0310 	bic.w	r3, r3, #16
 80043e0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80043e2:	4b18      	ldr	r3, [pc, #96]	@ (8004444 <RCCEx_PLL3_Config+0x128>)
 80043e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043ea:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	69d2      	ldr	r2, [r2, #28]
 80043f2:	00d2      	lsls	r2, r2, #3
 80043f4:	4913      	ldr	r1, [pc, #76]	@ (8004444 <RCCEx_PLL3_Config+0x128>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80043fa:	4b12      	ldr	r3, [pc, #72]	@ (8004444 <RCCEx_PLL3_Config+0x128>)
 80043fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fe:	4a11      	ldr	r2, [pc, #68]	@ (8004444 <RCCEx_PLL3_Config+0x128>)
 8004400:	f043 0310 	orr.w	r3, r3, #16
 8004404:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8004406:	4b0f      	ldr	r3, [pc, #60]	@ (8004444 <RCCEx_PLL3_Config+0x128>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a0e      	ldr	r2, [pc, #56]	@ (8004444 <RCCEx_PLL3_Config+0x128>)
 800440c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004410:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004412:	f7fc fcd3 	bl	8000dbc <HAL_GetTick>
 8004416:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004418:	e008      	b.n	800442c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800441a:	f7fc fccf 	bl	8000dbc <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d901      	bls.n	800442c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e006      	b.n	800443a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800442c:	4b05      	ldr	r3, [pc, #20]	@ (8004444 <RCCEx_PLL3_Config+0x128>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0f0      	beq.n	800441a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	46020c00 	.word	0x46020c00
 8004448:	80800000 	.word	0x80800000

0800444c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e049      	b.n	80044f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d106      	bne.n	8004478 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7fc faf0 	bl	8000a58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3304      	adds	r3, #4
 8004488:	4619      	mov	r1, r3
 800448a:	4610      	mov	r0, r2
 800448c:	f000 fa9c 	bl	80049c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
	...

080044fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d109      	bne.n	8004520 <HAL_TIM_PWM_Start+0x24>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b01      	cmp	r3, #1
 8004516:	bf14      	ite	ne
 8004518:	2301      	movne	r3, #1
 800451a:	2300      	moveq	r3, #0
 800451c:	b2db      	uxtb	r3, r3
 800451e:	e03c      	b.n	800459a <HAL_TIM_PWM_Start+0x9e>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	2b04      	cmp	r3, #4
 8004524:	d109      	bne.n	800453a <HAL_TIM_PWM_Start+0x3e>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b01      	cmp	r3, #1
 8004530:	bf14      	ite	ne
 8004532:	2301      	movne	r3, #1
 8004534:	2300      	moveq	r3, #0
 8004536:	b2db      	uxtb	r3, r3
 8004538:	e02f      	b.n	800459a <HAL_TIM_PWM_Start+0x9e>
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b08      	cmp	r3, #8
 800453e:	d109      	bne.n	8004554 <HAL_TIM_PWM_Start+0x58>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b01      	cmp	r3, #1
 800454a:	bf14      	ite	ne
 800454c:	2301      	movne	r3, #1
 800454e:	2300      	moveq	r3, #0
 8004550:	b2db      	uxtb	r3, r3
 8004552:	e022      	b.n	800459a <HAL_TIM_PWM_Start+0x9e>
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	2b0c      	cmp	r3, #12
 8004558:	d109      	bne.n	800456e <HAL_TIM_PWM_Start+0x72>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b01      	cmp	r3, #1
 8004564:	bf14      	ite	ne
 8004566:	2301      	movne	r3, #1
 8004568:	2300      	moveq	r3, #0
 800456a:	b2db      	uxtb	r3, r3
 800456c:	e015      	b.n	800459a <HAL_TIM_PWM_Start+0x9e>
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b10      	cmp	r3, #16
 8004572:	d109      	bne.n	8004588 <HAL_TIM_PWM_Start+0x8c>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b01      	cmp	r3, #1
 800457e:	bf14      	ite	ne
 8004580:	2301      	movne	r3, #1
 8004582:	2300      	moveq	r3, #0
 8004584:	b2db      	uxtb	r3, r3
 8004586:	e008      	b.n	800459a <HAL_TIM_PWM_Start+0x9e>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b01      	cmp	r3, #1
 8004592:	bf14      	ite	ne
 8004594:	2301      	movne	r3, #1
 8004596:	2300      	moveq	r3, #0
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e0d8      	b.n	8004754 <HAL_TIM_PWM_Start+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d104      	bne.n	80045b2 <HAL_TIM_PWM_Start+0xb6>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045b0:	e023      	b.n	80045fa <HAL_TIM_PWM_Start+0xfe>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d104      	bne.n	80045c2 <HAL_TIM_PWM_Start+0xc6>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2202      	movs	r2, #2
 80045bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045c0:	e01b      	b.n	80045fa <HAL_TIM_PWM_Start+0xfe>
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d104      	bne.n	80045d2 <HAL_TIM_PWM_Start+0xd6>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045d0:	e013      	b.n	80045fa <HAL_TIM_PWM_Start+0xfe>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b0c      	cmp	r3, #12
 80045d6:	d104      	bne.n	80045e2 <HAL_TIM_PWM_Start+0xe6>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045e0:	e00b      	b.n	80045fa <HAL_TIM_PWM_Start+0xfe>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b10      	cmp	r3, #16
 80045e6:	d104      	bne.n	80045f2 <HAL_TIM_PWM_Start+0xf6>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045f0:	e003      	b.n	80045fa <HAL_TIM_PWM_Start+0xfe>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2202      	movs	r2, #2
 80045f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2201      	movs	r2, #1
 8004600:	6839      	ldr	r1, [r7, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f000 feb6 	bl	8005374 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a53      	ldr	r2, [pc, #332]	@ (800475c <HAL_TIM_PWM_Start+0x260>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d02c      	beq.n	800466c <HAL_TIM_PWM_Start+0x170>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a52      	ldr	r2, [pc, #328]	@ (8004760 <HAL_TIM_PWM_Start+0x264>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d027      	beq.n	800466c <HAL_TIM_PWM_Start+0x170>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a50      	ldr	r2, [pc, #320]	@ (8004764 <HAL_TIM_PWM_Start+0x268>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d022      	beq.n	800466c <HAL_TIM_PWM_Start+0x170>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a4f      	ldr	r2, [pc, #316]	@ (8004768 <HAL_TIM_PWM_Start+0x26c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d01d      	beq.n	800466c <HAL_TIM_PWM_Start+0x170>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a4d      	ldr	r2, [pc, #308]	@ (800476c <HAL_TIM_PWM_Start+0x270>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d018      	beq.n	800466c <HAL_TIM_PWM_Start+0x170>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a4c      	ldr	r2, [pc, #304]	@ (8004770 <HAL_TIM_PWM_Start+0x274>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d013      	beq.n	800466c <HAL_TIM_PWM_Start+0x170>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a4a      	ldr	r2, [pc, #296]	@ (8004774 <HAL_TIM_PWM_Start+0x278>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d00e      	beq.n	800466c <HAL_TIM_PWM_Start+0x170>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a49      	ldr	r2, [pc, #292]	@ (8004778 <HAL_TIM_PWM_Start+0x27c>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d009      	beq.n	800466c <HAL_TIM_PWM_Start+0x170>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a47      	ldr	r2, [pc, #284]	@ (800477c <HAL_TIM_PWM_Start+0x280>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d004      	beq.n	800466c <HAL_TIM_PWM_Start+0x170>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a46      	ldr	r2, [pc, #280]	@ (8004780 <HAL_TIM_PWM_Start+0x284>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d101      	bne.n	8004670 <HAL_TIM_PWM_Start+0x174>
 800466c:	2301      	movs	r3, #1
 800466e:	e000      	b.n	8004672 <HAL_TIM_PWM_Start+0x176>
 8004670:	2300      	movs	r3, #0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d007      	beq.n	8004686 <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004684:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a34      	ldr	r2, [pc, #208]	@ (800475c <HAL_TIM_PWM_Start+0x260>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d040      	beq.n	8004712 <HAL_TIM_PWM_Start+0x216>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a32      	ldr	r2, [pc, #200]	@ (8004760 <HAL_TIM_PWM_Start+0x264>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d03b      	beq.n	8004712 <HAL_TIM_PWM_Start+0x216>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046a2:	d036      	beq.n	8004712 <HAL_TIM_PWM_Start+0x216>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046ac:	d031      	beq.n	8004712 <HAL_TIM_PWM_Start+0x216>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a34      	ldr	r2, [pc, #208]	@ (8004784 <HAL_TIM_PWM_Start+0x288>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d02c      	beq.n	8004712 <HAL_TIM_PWM_Start+0x216>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a32      	ldr	r2, [pc, #200]	@ (8004788 <HAL_TIM_PWM_Start+0x28c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d027      	beq.n	8004712 <HAL_TIM_PWM_Start+0x216>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a31      	ldr	r2, [pc, #196]	@ (800478c <HAL_TIM_PWM_Start+0x290>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d022      	beq.n	8004712 <HAL_TIM_PWM_Start+0x216>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a2f      	ldr	r2, [pc, #188]	@ (8004790 <HAL_TIM_PWM_Start+0x294>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d01d      	beq.n	8004712 <HAL_TIM_PWM_Start+0x216>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a2e      	ldr	r2, [pc, #184]	@ (8004794 <HAL_TIM_PWM_Start+0x298>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d018      	beq.n	8004712 <HAL_TIM_PWM_Start+0x216>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a2c      	ldr	r2, [pc, #176]	@ (8004798 <HAL_TIM_PWM_Start+0x29c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d013      	beq.n	8004712 <HAL_TIM_PWM_Start+0x216>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a1d      	ldr	r2, [pc, #116]	@ (8004764 <HAL_TIM_PWM_Start+0x268>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d00e      	beq.n	8004712 <HAL_TIM_PWM_Start+0x216>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004768 <HAL_TIM_PWM_Start+0x26c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d009      	beq.n	8004712 <HAL_TIM_PWM_Start+0x216>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a1a      	ldr	r2, [pc, #104]	@ (800476c <HAL_TIM_PWM_Start+0x270>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d004      	beq.n	8004712 <HAL_TIM_PWM_Start+0x216>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a18      	ldr	r2, [pc, #96]	@ (8004770 <HAL_TIM_PWM_Start+0x274>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d115      	bne.n	800473e <HAL_TIM_PWM_Start+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	4b20      	ldr	r3, [pc, #128]	@ (800479c <HAL_TIM_PWM_Start+0x2a0>)
 800471a:	4013      	ands	r3, r2
 800471c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b06      	cmp	r3, #6
 8004722:	d015      	beq.n	8004750 <HAL_TIM_PWM_Start+0x254>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800472a:	d011      	beq.n	8004750 <HAL_TIM_PWM_Start+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0201 	orr.w	r2, r2, #1
 800473a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800473c:	e008      	b.n	8004750 <HAL_TIM_PWM_Start+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f042 0201 	orr.w	r2, r2, #1
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	e000      	b.n	8004752 <HAL_TIM_PWM_Start+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004750:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	40012c00 	.word	0x40012c00
 8004760:	50012c00 	.word	0x50012c00
 8004764:	40013400 	.word	0x40013400
 8004768:	50013400 	.word	0x50013400
 800476c:	40014000 	.word	0x40014000
 8004770:	50014000 	.word	0x50014000
 8004774:	40014400 	.word	0x40014400
 8004778:	50014400 	.word	0x50014400
 800477c:	40014800 	.word	0x40014800
 8004780:	50014800 	.word	0x50014800
 8004784:	40000400 	.word	0x40000400
 8004788:	50000400 	.word	0x50000400
 800478c:	40000800 	.word	0x40000800
 8004790:	50000800 	.word	0x50000800
 8004794:	40000c00 	.word	0x40000c00
 8004798:	50000c00 	.word	0x50000c00
 800479c:	00010007 	.word	0x00010007

080047a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047ac:	2300      	movs	r3, #0
 80047ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d101      	bne.n	80047be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047ba:	2302      	movs	r3, #2
 80047bc:	e0ff      	b.n	80049be <HAL_TIM_PWM_ConfigChannel+0x21e>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b14      	cmp	r3, #20
 80047ca:	f200 80f0 	bhi.w	80049ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80047ce:	a201      	add	r2, pc, #4	@ (adr r2, 80047d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d4:	08004829 	.word	0x08004829
 80047d8:	080049af 	.word	0x080049af
 80047dc:	080049af 	.word	0x080049af
 80047e0:	080049af 	.word	0x080049af
 80047e4:	08004869 	.word	0x08004869
 80047e8:	080049af 	.word	0x080049af
 80047ec:	080049af 	.word	0x080049af
 80047f0:	080049af 	.word	0x080049af
 80047f4:	080048ab 	.word	0x080048ab
 80047f8:	080049af 	.word	0x080049af
 80047fc:	080049af 	.word	0x080049af
 8004800:	080049af 	.word	0x080049af
 8004804:	080048eb 	.word	0x080048eb
 8004808:	080049af 	.word	0x080049af
 800480c:	080049af 	.word	0x080049af
 8004810:	080049af 	.word	0x080049af
 8004814:	0800492d 	.word	0x0800492d
 8004818:	080049af 	.word	0x080049af
 800481c:	080049af 	.word	0x080049af
 8004820:	080049af 	.word	0x080049af
 8004824:	0800496d 	.word	0x0800496d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68b9      	ldr	r1, [r7, #8]
 800482e:	4618      	mov	r0, r3
 8004830:	f000 f9ca 	bl	8004bc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	699a      	ldr	r2, [r3, #24]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0208 	orr.w	r2, r2, #8
 8004842:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	699a      	ldr	r2, [r3, #24]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0204 	bic.w	r2, r2, #4
 8004852:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6999      	ldr	r1, [r3, #24]
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	691a      	ldr	r2, [r3, #16]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	619a      	str	r2, [r3, #24]
      break;
 8004866:	e0a5      	b.n	80049b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68b9      	ldr	r1, [r7, #8]
 800486e:	4618      	mov	r0, r3
 8004870:	f000 fa6c 	bl	8004d4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699a      	ldr	r2, [r3, #24]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004882:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	699a      	ldr	r2, [r3, #24]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004892:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6999      	ldr	r1, [r3, #24]
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	021a      	lsls	r2, r3, #8
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	619a      	str	r2, [r3, #24]
      break;
 80048a8:	e084      	b.n	80049b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68b9      	ldr	r1, [r7, #8]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 fafb 	bl	8004eac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	69da      	ldr	r2, [r3, #28]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f042 0208 	orr.w	r2, r2, #8
 80048c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	69da      	ldr	r2, [r3, #28]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 0204 	bic.w	r2, r2, #4
 80048d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	69d9      	ldr	r1, [r3, #28]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	691a      	ldr	r2, [r3, #16]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	61da      	str	r2, [r3, #28]
      break;
 80048e8:	e064      	b.n	80049b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68b9      	ldr	r1, [r7, #8]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 fb89 	bl	8005008 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	69da      	ldr	r2, [r3, #28]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004904:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	69da      	ldr	r2, [r3, #28]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004914:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69d9      	ldr	r1, [r3, #28]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	021a      	lsls	r2, r3, #8
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	61da      	str	r2, [r3, #28]
      break;
 800492a:	e043      	b.n	80049b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68b9      	ldr	r1, [r7, #8]
 8004932:	4618      	mov	r0, r3
 8004934:	f000 fc18 	bl	8005168 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0208 	orr.w	r2, r2, #8
 8004946:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 0204 	bic.w	r2, r2, #4
 8004956:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	691a      	ldr	r2, [r3, #16]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800496a:	e023      	b.n	80049b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68b9      	ldr	r1, [r7, #8]
 8004972:	4618      	mov	r0, r3
 8004974:	f000 fc7a 	bl	800526c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004986:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004996:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	021a      	lsls	r2, r3, #8
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80049ac:	e002      	b.n	80049b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	75fb      	strb	r3, [r7, #23]
      break;
 80049b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3718      	adds	r7, #24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop

080049c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a6b      	ldr	r2, [pc, #428]	@ (8004b88 <TIM_Base_SetConfig+0x1c0>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d02b      	beq.n	8004a38 <TIM_Base_SetConfig+0x70>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a6a      	ldr	r2, [pc, #424]	@ (8004b8c <TIM_Base_SetConfig+0x1c4>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d027      	beq.n	8004a38 <TIM_Base_SetConfig+0x70>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049ee:	d023      	beq.n	8004a38 <TIM_Base_SetConfig+0x70>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049f6:	d01f      	beq.n	8004a38 <TIM_Base_SetConfig+0x70>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a65      	ldr	r2, [pc, #404]	@ (8004b90 <TIM_Base_SetConfig+0x1c8>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d01b      	beq.n	8004a38 <TIM_Base_SetConfig+0x70>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a64      	ldr	r2, [pc, #400]	@ (8004b94 <TIM_Base_SetConfig+0x1cc>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d017      	beq.n	8004a38 <TIM_Base_SetConfig+0x70>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a63      	ldr	r2, [pc, #396]	@ (8004b98 <TIM_Base_SetConfig+0x1d0>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d013      	beq.n	8004a38 <TIM_Base_SetConfig+0x70>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a62      	ldr	r2, [pc, #392]	@ (8004b9c <TIM_Base_SetConfig+0x1d4>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d00f      	beq.n	8004a38 <TIM_Base_SetConfig+0x70>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a61      	ldr	r2, [pc, #388]	@ (8004ba0 <TIM_Base_SetConfig+0x1d8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d00b      	beq.n	8004a38 <TIM_Base_SetConfig+0x70>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a60      	ldr	r2, [pc, #384]	@ (8004ba4 <TIM_Base_SetConfig+0x1dc>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d007      	beq.n	8004a38 <TIM_Base_SetConfig+0x70>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a5f      	ldr	r2, [pc, #380]	@ (8004ba8 <TIM_Base_SetConfig+0x1e0>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d003      	beq.n	8004a38 <TIM_Base_SetConfig+0x70>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a5e      	ldr	r2, [pc, #376]	@ (8004bac <TIM_Base_SetConfig+0x1e4>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d108      	bne.n	8004a4a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a4e      	ldr	r2, [pc, #312]	@ (8004b88 <TIM_Base_SetConfig+0x1c0>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d043      	beq.n	8004ada <TIM_Base_SetConfig+0x112>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a4d      	ldr	r2, [pc, #308]	@ (8004b8c <TIM_Base_SetConfig+0x1c4>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d03f      	beq.n	8004ada <TIM_Base_SetConfig+0x112>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a60:	d03b      	beq.n	8004ada <TIM_Base_SetConfig+0x112>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a68:	d037      	beq.n	8004ada <TIM_Base_SetConfig+0x112>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a48      	ldr	r2, [pc, #288]	@ (8004b90 <TIM_Base_SetConfig+0x1c8>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d033      	beq.n	8004ada <TIM_Base_SetConfig+0x112>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a47      	ldr	r2, [pc, #284]	@ (8004b94 <TIM_Base_SetConfig+0x1cc>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d02f      	beq.n	8004ada <TIM_Base_SetConfig+0x112>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a46      	ldr	r2, [pc, #280]	@ (8004b98 <TIM_Base_SetConfig+0x1d0>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d02b      	beq.n	8004ada <TIM_Base_SetConfig+0x112>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a45      	ldr	r2, [pc, #276]	@ (8004b9c <TIM_Base_SetConfig+0x1d4>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d027      	beq.n	8004ada <TIM_Base_SetConfig+0x112>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a44      	ldr	r2, [pc, #272]	@ (8004ba0 <TIM_Base_SetConfig+0x1d8>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d023      	beq.n	8004ada <TIM_Base_SetConfig+0x112>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a43      	ldr	r2, [pc, #268]	@ (8004ba4 <TIM_Base_SetConfig+0x1dc>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d01f      	beq.n	8004ada <TIM_Base_SetConfig+0x112>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a42      	ldr	r2, [pc, #264]	@ (8004ba8 <TIM_Base_SetConfig+0x1e0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d01b      	beq.n	8004ada <TIM_Base_SetConfig+0x112>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a41      	ldr	r2, [pc, #260]	@ (8004bac <TIM_Base_SetConfig+0x1e4>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d017      	beq.n	8004ada <TIM_Base_SetConfig+0x112>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a40      	ldr	r2, [pc, #256]	@ (8004bb0 <TIM_Base_SetConfig+0x1e8>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d013      	beq.n	8004ada <TIM_Base_SetConfig+0x112>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a3f      	ldr	r2, [pc, #252]	@ (8004bb4 <TIM_Base_SetConfig+0x1ec>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d00f      	beq.n	8004ada <TIM_Base_SetConfig+0x112>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a3e      	ldr	r2, [pc, #248]	@ (8004bb8 <TIM_Base_SetConfig+0x1f0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d00b      	beq.n	8004ada <TIM_Base_SetConfig+0x112>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a3d      	ldr	r2, [pc, #244]	@ (8004bbc <TIM_Base_SetConfig+0x1f4>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d007      	beq.n	8004ada <TIM_Base_SetConfig+0x112>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a3c      	ldr	r2, [pc, #240]	@ (8004bc0 <TIM_Base_SetConfig+0x1f8>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d003      	beq.n	8004ada <TIM_Base_SetConfig+0x112>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a3b      	ldr	r2, [pc, #236]	@ (8004bc4 <TIM_Base_SetConfig+0x1fc>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d108      	bne.n	8004aec <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	689a      	ldr	r2, [r3, #8]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a1e      	ldr	r2, [pc, #120]	@ (8004b88 <TIM_Base_SetConfig+0x1c0>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d023      	beq.n	8004b5a <TIM_Base_SetConfig+0x192>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a1d      	ldr	r2, [pc, #116]	@ (8004b8c <TIM_Base_SetConfig+0x1c4>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d01f      	beq.n	8004b5a <TIM_Base_SetConfig+0x192>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a22      	ldr	r2, [pc, #136]	@ (8004ba8 <TIM_Base_SetConfig+0x1e0>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d01b      	beq.n	8004b5a <TIM_Base_SetConfig+0x192>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a21      	ldr	r2, [pc, #132]	@ (8004bac <TIM_Base_SetConfig+0x1e4>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d017      	beq.n	8004b5a <TIM_Base_SetConfig+0x192>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a20      	ldr	r2, [pc, #128]	@ (8004bb0 <TIM_Base_SetConfig+0x1e8>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d013      	beq.n	8004b5a <TIM_Base_SetConfig+0x192>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a1f      	ldr	r2, [pc, #124]	@ (8004bb4 <TIM_Base_SetConfig+0x1ec>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d00f      	beq.n	8004b5a <TIM_Base_SetConfig+0x192>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a1e      	ldr	r2, [pc, #120]	@ (8004bb8 <TIM_Base_SetConfig+0x1f0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d00b      	beq.n	8004b5a <TIM_Base_SetConfig+0x192>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a1d      	ldr	r2, [pc, #116]	@ (8004bbc <TIM_Base_SetConfig+0x1f4>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d007      	beq.n	8004b5a <TIM_Base_SetConfig+0x192>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a1c      	ldr	r2, [pc, #112]	@ (8004bc0 <TIM_Base_SetConfig+0x1f8>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d003      	beq.n	8004b5a <TIM_Base_SetConfig+0x192>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a1b      	ldr	r2, [pc, #108]	@ (8004bc4 <TIM_Base_SetConfig+0x1fc>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d103      	bne.n	8004b62 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	691a      	ldr	r2, [r3, #16]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f043 0204 	orr.w	r2, r3, #4
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	601a      	str	r2, [r3, #0]
}
 8004b7a:	bf00      	nop
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	40012c00 	.word	0x40012c00
 8004b8c:	50012c00 	.word	0x50012c00
 8004b90:	40000400 	.word	0x40000400
 8004b94:	50000400 	.word	0x50000400
 8004b98:	40000800 	.word	0x40000800
 8004b9c:	50000800 	.word	0x50000800
 8004ba0:	40000c00 	.word	0x40000c00
 8004ba4:	50000c00 	.word	0x50000c00
 8004ba8:	40013400 	.word	0x40013400
 8004bac:	50013400 	.word	0x50013400
 8004bb0:	40014000 	.word	0x40014000
 8004bb4:	50014000 	.word	0x50014000
 8004bb8:	40014400 	.word	0x40014400
 8004bbc:	50014400 	.word	0x50014400
 8004bc0:	40014800 	.word	0x40014800
 8004bc4:	50014800 	.word	0x50014800

08004bc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	f023 0201 	bic.w	r2, r3, #1
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0303 	bic.w	r3, r3, #3
 8004c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f023 0302 	bic.w	r3, r3, #2
 8004c14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a40      	ldr	r2, [pc, #256]	@ (8004d24 <TIM_OC1_SetConfig+0x15c>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d023      	beq.n	8004c70 <TIM_OC1_SetConfig+0xa8>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a3f      	ldr	r2, [pc, #252]	@ (8004d28 <TIM_OC1_SetConfig+0x160>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d01f      	beq.n	8004c70 <TIM_OC1_SetConfig+0xa8>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a3e      	ldr	r2, [pc, #248]	@ (8004d2c <TIM_OC1_SetConfig+0x164>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d01b      	beq.n	8004c70 <TIM_OC1_SetConfig+0xa8>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a3d      	ldr	r2, [pc, #244]	@ (8004d30 <TIM_OC1_SetConfig+0x168>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d017      	beq.n	8004c70 <TIM_OC1_SetConfig+0xa8>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a3c      	ldr	r2, [pc, #240]	@ (8004d34 <TIM_OC1_SetConfig+0x16c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d013      	beq.n	8004c70 <TIM_OC1_SetConfig+0xa8>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a3b      	ldr	r2, [pc, #236]	@ (8004d38 <TIM_OC1_SetConfig+0x170>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d00f      	beq.n	8004c70 <TIM_OC1_SetConfig+0xa8>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a3a      	ldr	r2, [pc, #232]	@ (8004d3c <TIM_OC1_SetConfig+0x174>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d00b      	beq.n	8004c70 <TIM_OC1_SetConfig+0xa8>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a39      	ldr	r2, [pc, #228]	@ (8004d40 <TIM_OC1_SetConfig+0x178>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d007      	beq.n	8004c70 <TIM_OC1_SetConfig+0xa8>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a38      	ldr	r2, [pc, #224]	@ (8004d44 <TIM_OC1_SetConfig+0x17c>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d003      	beq.n	8004c70 <TIM_OC1_SetConfig+0xa8>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a37      	ldr	r2, [pc, #220]	@ (8004d48 <TIM_OC1_SetConfig+0x180>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d10c      	bne.n	8004c8a <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f023 0308 	bic.w	r3, r3, #8
 8004c76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f023 0304 	bic.w	r3, r3, #4
 8004c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a25      	ldr	r2, [pc, #148]	@ (8004d24 <TIM_OC1_SetConfig+0x15c>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d023      	beq.n	8004cda <TIM_OC1_SetConfig+0x112>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a24      	ldr	r2, [pc, #144]	@ (8004d28 <TIM_OC1_SetConfig+0x160>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d01f      	beq.n	8004cda <TIM_OC1_SetConfig+0x112>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a23      	ldr	r2, [pc, #140]	@ (8004d2c <TIM_OC1_SetConfig+0x164>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d01b      	beq.n	8004cda <TIM_OC1_SetConfig+0x112>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a22      	ldr	r2, [pc, #136]	@ (8004d30 <TIM_OC1_SetConfig+0x168>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d017      	beq.n	8004cda <TIM_OC1_SetConfig+0x112>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a21      	ldr	r2, [pc, #132]	@ (8004d34 <TIM_OC1_SetConfig+0x16c>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d013      	beq.n	8004cda <TIM_OC1_SetConfig+0x112>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a20      	ldr	r2, [pc, #128]	@ (8004d38 <TIM_OC1_SetConfig+0x170>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00f      	beq.n	8004cda <TIM_OC1_SetConfig+0x112>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a1f      	ldr	r2, [pc, #124]	@ (8004d3c <TIM_OC1_SetConfig+0x174>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00b      	beq.n	8004cda <TIM_OC1_SetConfig+0x112>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a1e      	ldr	r2, [pc, #120]	@ (8004d40 <TIM_OC1_SetConfig+0x178>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d007      	beq.n	8004cda <TIM_OC1_SetConfig+0x112>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a1d      	ldr	r2, [pc, #116]	@ (8004d44 <TIM_OC1_SetConfig+0x17c>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d003      	beq.n	8004cda <TIM_OC1_SetConfig+0x112>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a1c      	ldr	r2, [pc, #112]	@ (8004d48 <TIM_OC1_SetConfig+0x180>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d111      	bne.n	8004cfe <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	621a      	str	r2, [r3, #32]
}
 8004d18:	bf00      	nop
 8004d1a:	371c      	adds	r7, #28
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	40012c00 	.word	0x40012c00
 8004d28:	50012c00 	.word	0x50012c00
 8004d2c:	40013400 	.word	0x40013400
 8004d30:	50013400 	.word	0x50013400
 8004d34:	40014000 	.word	0x40014000
 8004d38:	50014000 	.word	0x50014000
 8004d3c:	40014400 	.word	0x40014400
 8004d40:	50014400 	.word	0x50014400
 8004d44:	40014800 	.word	0x40014800
 8004d48:	50014800 	.word	0x50014800

08004d4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	f023 0210 	bic.w	r2, r3, #16
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	021b      	lsls	r3, r3, #8
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f023 0320 	bic.w	r3, r3, #32
 8004d9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	011b      	lsls	r3, r3, #4
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a36      	ldr	r2, [pc, #216]	@ (8004e84 <TIM_OC2_SetConfig+0x138>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d00b      	beq.n	8004dc8 <TIM_OC2_SetConfig+0x7c>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a35      	ldr	r2, [pc, #212]	@ (8004e88 <TIM_OC2_SetConfig+0x13c>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d007      	beq.n	8004dc8 <TIM_OC2_SetConfig+0x7c>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a34      	ldr	r2, [pc, #208]	@ (8004e8c <TIM_OC2_SetConfig+0x140>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d003      	beq.n	8004dc8 <TIM_OC2_SetConfig+0x7c>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a33      	ldr	r2, [pc, #204]	@ (8004e90 <TIM_OC2_SetConfig+0x144>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d10d      	bne.n	8004de4 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004de2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a27      	ldr	r2, [pc, #156]	@ (8004e84 <TIM_OC2_SetConfig+0x138>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d023      	beq.n	8004e34 <TIM_OC2_SetConfig+0xe8>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a26      	ldr	r2, [pc, #152]	@ (8004e88 <TIM_OC2_SetConfig+0x13c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d01f      	beq.n	8004e34 <TIM_OC2_SetConfig+0xe8>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a25      	ldr	r2, [pc, #148]	@ (8004e8c <TIM_OC2_SetConfig+0x140>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d01b      	beq.n	8004e34 <TIM_OC2_SetConfig+0xe8>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a24      	ldr	r2, [pc, #144]	@ (8004e90 <TIM_OC2_SetConfig+0x144>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d017      	beq.n	8004e34 <TIM_OC2_SetConfig+0xe8>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a23      	ldr	r2, [pc, #140]	@ (8004e94 <TIM_OC2_SetConfig+0x148>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d013      	beq.n	8004e34 <TIM_OC2_SetConfig+0xe8>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a22      	ldr	r2, [pc, #136]	@ (8004e98 <TIM_OC2_SetConfig+0x14c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d00f      	beq.n	8004e34 <TIM_OC2_SetConfig+0xe8>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a21      	ldr	r2, [pc, #132]	@ (8004e9c <TIM_OC2_SetConfig+0x150>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d00b      	beq.n	8004e34 <TIM_OC2_SetConfig+0xe8>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a20      	ldr	r2, [pc, #128]	@ (8004ea0 <TIM_OC2_SetConfig+0x154>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d007      	beq.n	8004e34 <TIM_OC2_SetConfig+0xe8>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a1f      	ldr	r2, [pc, #124]	@ (8004ea4 <TIM_OC2_SetConfig+0x158>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d003      	beq.n	8004e34 <TIM_OC2_SetConfig+0xe8>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ea8 <TIM_OC2_SetConfig+0x15c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d113      	bne.n	8004e5c <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	621a      	str	r2, [r3, #32]
}
 8004e76:	bf00      	nop
 8004e78:	371c      	adds	r7, #28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	40012c00 	.word	0x40012c00
 8004e88:	50012c00 	.word	0x50012c00
 8004e8c:	40013400 	.word	0x40013400
 8004e90:	50013400 	.word	0x50013400
 8004e94:	40014000 	.word	0x40014000
 8004e98:	50014000 	.word	0x50014000
 8004e9c:	40014400 	.word	0x40014400
 8004ea0:	50014400 	.word	0x50014400
 8004ea4:	40014800 	.word	0x40014800
 8004ea8:	50014800 	.word	0x50014800

08004eac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b087      	sub	sp, #28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f023 0303 	bic.w	r3, r3, #3
 8004ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	021b      	lsls	r3, r3, #8
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a35      	ldr	r2, [pc, #212]	@ (8004fe0 <TIM_OC3_SetConfig+0x134>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d00b      	beq.n	8004f26 <TIM_OC3_SetConfig+0x7a>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a34      	ldr	r2, [pc, #208]	@ (8004fe4 <TIM_OC3_SetConfig+0x138>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d007      	beq.n	8004f26 <TIM_OC3_SetConfig+0x7a>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a33      	ldr	r2, [pc, #204]	@ (8004fe8 <TIM_OC3_SetConfig+0x13c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d003      	beq.n	8004f26 <TIM_OC3_SetConfig+0x7a>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a32      	ldr	r2, [pc, #200]	@ (8004fec <TIM_OC3_SetConfig+0x140>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d10d      	bne.n	8004f42 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	021b      	lsls	r3, r3, #8
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a26      	ldr	r2, [pc, #152]	@ (8004fe0 <TIM_OC3_SetConfig+0x134>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d023      	beq.n	8004f92 <TIM_OC3_SetConfig+0xe6>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a25      	ldr	r2, [pc, #148]	@ (8004fe4 <TIM_OC3_SetConfig+0x138>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d01f      	beq.n	8004f92 <TIM_OC3_SetConfig+0xe6>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a24      	ldr	r2, [pc, #144]	@ (8004fe8 <TIM_OC3_SetConfig+0x13c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d01b      	beq.n	8004f92 <TIM_OC3_SetConfig+0xe6>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a23      	ldr	r2, [pc, #140]	@ (8004fec <TIM_OC3_SetConfig+0x140>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d017      	beq.n	8004f92 <TIM_OC3_SetConfig+0xe6>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a22      	ldr	r2, [pc, #136]	@ (8004ff0 <TIM_OC3_SetConfig+0x144>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d013      	beq.n	8004f92 <TIM_OC3_SetConfig+0xe6>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a21      	ldr	r2, [pc, #132]	@ (8004ff4 <TIM_OC3_SetConfig+0x148>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d00f      	beq.n	8004f92 <TIM_OC3_SetConfig+0xe6>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a20      	ldr	r2, [pc, #128]	@ (8004ff8 <TIM_OC3_SetConfig+0x14c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d00b      	beq.n	8004f92 <TIM_OC3_SetConfig+0xe6>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a1f      	ldr	r2, [pc, #124]	@ (8004ffc <TIM_OC3_SetConfig+0x150>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d007      	beq.n	8004f92 <TIM_OC3_SetConfig+0xe6>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a1e      	ldr	r2, [pc, #120]	@ (8005000 <TIM_OC3_SetConfig+0x154>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d003      	beq.n	8004f92 <TIM_OC3_SetConfig+0xe6>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a1d      	ldr	r2, [pc, #116]	@ (8005004 <TIM_OC3_SetConfig+0x158>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d113      	bne.n	8004fba <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	011b      	lsls	r3, r3, #4
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	621a      	str	r2, [r3, #32]
}
 8004fd4:	bf00      	nop
 8004fd6:	371c      	adds	r7, #28
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	40012c00 	.word	0x40012c00
 8004fe4:	50012c00 	.word	0x50012c00
 8004fe8:	40013400 	.word	0x40013400
 8004fec:	50013400 	.word	0x50013400
 8004ff0:	40014000 	.word	0x40014000
 8004ff4:	50014000 	.word	0x50014000
 8004ff8:	40014400 	.word	0x40014400
 8004ffc:	50014400 	.word	0x50014400
 8005000:	40014800 	.word	0x40014800
 8005004:	50014800 	.word	0x50014800

08005008 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005008:	b480      	push	{r7}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005036:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800503a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005042:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	021b      	lsls	r3, r3, #8
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	4313      	orrs	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005056:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	031b      	lsls	r3, r3, #12
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	4313      	orrs	r3, r2
 8005062:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a36      	ldr	r2, [pc, #216]	@ (8005140 <TIM_OC4_SetConfig+0x138>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d00b      	beq.n	8005084 <TIM_OC4_SetConfig+0x7c>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a35      	ldr	r2, [pc, #212]	@ (8005144 <TIM_OC4_SetConfig+0x13c>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d007      	beq.n	8005084 <TIM_OC4_SetConfig+0x7c>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a34      	ldr	r2, [pc, #208]	@ (8005148 <TIM_OC4_SetConfig+0x140>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d003      	beq.n	8005084 <TIM_OC4_SetConfig+0x7c>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a33      	ldr	r2, [pc, #204]	@ (800514c <TIM_OC4_SetConfig+0x144>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d10d      	bne.n	80050a0 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800508a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	031b      	lsls	r3, r3, #12
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	4313      	orrs	r3, r2
 8005096:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800509e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a27      	ldr	r2, [pc, #156]	@ (8005140 <TIM_OC4_SetConfig+0x138>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d023      	beq.n	80050f0 <TIM_OC4_SetConfig+0xe8>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a26      	ldr	r2, [pc, #152]	@ (8005144 <TIM_OC4_SetConfig+0x13c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d01f      	beq.n	80050f0 <TIM_OC4_SetConfig+0xe8>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a25      	ldr	r2, [pc, #148]	@ (8005148 <TIM_OC4_SetConfig+0x140>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d01b      	beq.n	80050f0 <TIM_OC4_SetConfig+0xe8>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a24      	ldr	r2, [pc, #144]	@ (800514c <TIM_OC4_SetConfig+0x144>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d017      	beq.n	80050f0 <TIM_OC4_SetConfig+0xe8>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a23      	ldr	r2, [pc, #140]	@ (8005150 <TIM_OC4_SetConfig+0x148>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d013      	beq.n	80050f0 <TIM_OC4_SetConfig+0xe8>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a22      	ldr	r2, [pc, #136]	@ (8005154 <TIM_OC4_SetConfig+0x14c>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d00f      	beq.n	80050f0 <TIM_OC4_SetConfig+0xe8>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a21      	ldr	r2, [pc, #132]	@ (8005158 <TIM_OC4_SetConfig+0x150>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d00b      	beq.n	80050f0 <TIM_OC4_SetConfig+0xe8>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a20      	ldr	r2, [pc, #128]	@ (800515c <TIM_OC4_SetConfig+0x154>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d007      	beq.n	80050f0 <TIM_OC4_SetConfig+0xe8>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a1f      	ldr	r2, [pc, #124]	@ (8005160 <TIM_OC4_SetConfig+0x158>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d003      	beq.n	80050f0 <TIM_OC4_SetConfig+0xe8>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005164 <TIM_OC4_SetConfig+0x15c>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d113      	bne.n	8005118 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050f6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80050fe:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	019b      	lsls	r3, r3, #6
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	4313      	orrs	r3, r2
 800510a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	019b      	lsls	r3, r3, #6
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	4313      	orrs	r3, r2
 8005116:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	621a      	str	r2, [r3, #32]
}
 8005132:	bf00      	nop
 8005134:	371c      	adds	r7, #28
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	40012c00 	.word	0x40012c00
 8005144:	50012c00 	.word	0x50012c00
 8005148:	40013400 	.word	0x40013400
 800514c:	50013400 	.word	0x50013400
 8005150:	40014000 	.word	0x40014000
 8005154:	50014000 	.word	0x50014000
 8005158:	40014400 	.word	0x40014400
 800515c:	50014400 	.word	0x50014400
 8005160:	40014800 	.word	0x40014800
 8005164:	50014800 	.word	0x50014800

08005168 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005168:	b480      	push	{r7}
 800516a:	b087      	sub	sp, #28
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800518e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800519a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80051ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	041b      	lsls	r3, r3, #16
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a21      	ldr	r2, [pc, #132]	@ (8005244 <TIM_OC5_SetConfig+0xdc>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d023      	beq.n	800520a <TIM_OC5_SetConfig+0xa2>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a20      	ldr	r2, [pc, #128]	@ (8005248 <TIM_OC5_SetConfig+0xe0>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d01f      	beq.n	800520a <TIM_OC5_SetConfig+0xa2>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a1f      	ldr	r2, [pc, #124]	@ (800524c <TIM_OC5_SetConfig+0xe4>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d01b      	beq.n	800520a <TIM_OC5_SetConfig+0xa2>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a1e      	ldr	r2, [pc, #120]	@ (8005250 <TIM_OC5_SetConfig+0xe8>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d017      	beq.n	800520a <TIM_OC5_SetConfig+0xa2>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005254 <TIM_OC5_SetConfig+0xec>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d013      	beq.n	800520a <TIM_OC5_SetConfig+0xa2>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005258 <TIM_OC5_SetConfig+0xf0>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d00f      	beq.n	800520a <TIM_OC5_SetConfig+0xa2>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a1b      	ldr	r2, [pc, #108]	@ (800525c <TIM_OC5_SetConfig+0xf4>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d00b      	beq.n	800520a <TIM_OC5_SetConfig+0xa2>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a1a      	ldr	r2, [pc, #104]	@ (8005260 <TIM_OC5_SetConfig+0xf8>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d007      	beq.n	800520a <TIM_OC5_SetConfig+0xa2>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a19      	ldr	r2, [pc, #100]	@ (8005264 <TIM_OC5_SetConfig+0xfc>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d003      	beq.n	800520a <TIM_OC5_SetConfig+0xa2>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a18      	ldr	r2, [pc, #96]	@ (8005268 <TIM_OC5_SetConfig+0x100>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d109      	bne.n	800521e <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005210:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	021b      	lsls	r3, r3, #8
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	4313      	orrs	r3, r2
 800521c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	621a      	str	r2, [r3, #32]
}
 8005238:	bf00      	nop
 800523a:	371c      	adds	r7, #28
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr
 8005244:	40012c00 	.word	0x40012c00
 8005248:	50012c00 	.word	0x50012c00
 800524c:	40013400 	.word	0x40013400
 8005250:	50013400 	.word	0x50013400
 8005254:	40014000 	.word	0x40014000
 8005258:	50014000 	.word	0x50014000
 800525c:	40014400 	.word	0x40014400
 8005260:	50014400 	.word	0x50014400
 8005264:	40014800 	.word	0x40014800
 8005268:	50014800 	.word	0x50014800

0800526c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800529a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800529e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	021b      	lsls	r3, r3, #8
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80052b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	051b      	lsls	r3, r3, #20
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	4313      	orrs	r3, r2
 80052be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a22      	ldr	r2, [pc, #136]	@ (800534c <TIM_OC6_SetConfig+0xe0>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d023      	beq.n	8005310 <TIM_OC6_SetConfig+0xa4>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a21      	ldr	r2, [pc, #132]	@ (8005350 <TIM_OC6_SetConfig+0xe4>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d01f      	beq.n	8005310 <TIM_OC6_SetConfig+0xa4>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a20      	ldr	r2, [pc, #128]	@ (8005354 <TIM_OC6_SetConfig+0xe8>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d01b      	beq.n	8005310 <TIM_OC6_SetConfig+0xa4>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a1f      	ldr	r2, [pc, #124]	@ (8005358 <TIM_OC6_SetConfig+0xec>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d017      	beq.n	8005310 <TIM_OC6_SetConfig+0xa4>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a1e      	ldr	r2, [pc, #120]	@ (800535c <TIM_OC6_SetConfig+0xf0>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d013      	beq.n	8005310 <TIM_OC6_SetConfig+0xa4>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a1d      	ldr	r2, [pc, #116]	@ (8005360 <TIM_OC6_SetConfig+0xf4>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d00f      	beq.n	8005310 <TIM_OC6_SetConfig+0xa4>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a1c      	ldr	r2, [pc, #112]	@ (8005364 <TIM_OC6_SetConfig+0xf8>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d00b      	beq.n	8005310 <TIM_OC6_SetConfig+0xa4>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005368 <TIM_OC6_SetConfig+0xfc>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d007      	beq.n	8005310 <TIM_OC6_SetConfig+0xa4>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a1a      	ldr	r2, [pc, #104]	@ (800536c <TIM_OC6_SetConfig+0x100>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d003      	beq.n	8005310 <TIM_OC6_SetConfig+0xa4>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a19      	ldr	r2, [pc, #100]	@ (8005370 <TIM_OC6_SetConfig+0x104>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d109      	bne.n	8005324 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005316:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	029b      	lsls	r3, r3, #10
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	4313      	orrs	r3, r2
 8005322:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	621a      	str	r2, [r3, #32]
}
 800533e:	bf00      	nop
 8005340:	371c      	adds	r7, #28
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	40012c00 	.word	0x40012c00
 8005350:	50012c00 	.word	0x50012c00
 8005354:	40013400 	.word	0x40013400
 8005358:	50013400 	.word	0x50013400
 800535c:	40014000 	.word	0x40014000
 8005360:	50014000 	.word	0x50014000
 8005364:	40014400 	.word	0x40014400
 8005368:	50014400 	.word	0x50014400
 800536c:	40014800 	.word	0x40014800
 8005370:	50014800 	.word	0x50014800

08005374 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005374:	b480      	push	{r7}
 8005376:	b087      	sub	sp, #28
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f003 031f 	and.w	r3, r3, #31
 8005386:	2201      	movs	r2, #1
 8005388:	fa02 f303 	lsl.w	r3, r2, r3
 800538c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a1a      	ldr	r2, [r3, #32]
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	43db      	mvns	r3, r3
 8005396:	401a      	ands	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6a1a      	ldr	r2, [r3, #32]
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	f003 031f 	and.w	r3, r3, #31
 80053a6:	6879      	ldr	r1, [r7, #4]
 80053a8:	fa01 f303 	lsl.w	r3, r1, r3
 80053ac:	431a      	orrs	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	621a      	str	r2, [r3, #32]
}
 80053b2:	bf00      	nop
 80053b4:	371c      	adds	r7, #28
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
	...

080053c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d101      	bne.n	80053d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053d4:	2302      	movs	r3, #2
 80053d6:	e097      	b.n	8005508 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a45      	ldr	r2, [pc, #276]	@ (8005514 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d00e      	beq.n	8005420 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a44      	ldr	r2, [pc, #272]	@ (8005518 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d009      	beq.n	8005420 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a42      	ldr	r2, [pc, #264]	@ (800551c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d004      	beq.n	8005420 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a41      	ldr	r2, [pc, #260]	@ (8005520 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d108      	bne.n	8005432 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005426:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	4313      	orrs	r3, r2
 8005430:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005438:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800543c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	4313      	orrs	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a2f      	ldr	r2, [pc, #188]	@ (8005514 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d040      	beq.n	80054dc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a2e      	ldr	r2, [pc, #184]	@ (8005518 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d03b      	beq.n	80054dc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800546c:	d036      	beq.n	80054dc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005476:	d031      	beq.n	80054dc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a29      	ldr	r2, [pc, #164]	@ (8005524 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d02c      	beq.n	80054dc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a28      	ldr	r2, [pc, #160]	@ (8005528 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d027      	beq.n	80054dc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a26      	ldr	r2, [pc, #152]	@ (800552c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d022      	beq.n	80054dc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a25      	ldr	r2, [pc, #148]	@ (8005530 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d01d      	beq.n	80054dc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a23      	ldr	r2, [pc, #140]	@ (8005534 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d018      	beq.n	80054dc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a22      	ldr	r2, [pc, #136]	@ (8005538 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d013      	beq.n	80054dc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a18      	ldr	r2, [pc, #96]	@ (800551c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d00e      	beq.n	80054dc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a17      	ldr	r2, [pc, #92]	@ (8005520 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d009      	beq.n	80054dc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a1b      	ldr	r2, [pc, #108]	@ (800553c <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d004      	beq.n	80054dc <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a1a      	ldr	r2, [pc, #104]	@ (8005540 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d10c      	bne.n	80054f6 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr
 8005514:	40012c00 	.word	0x40012c00
 8005518:	50012c00 	.word	0x50012c00
 800551c:	40013400 	.word	0x40013400
 8005520:	50013400 	.word	0x50013400
 8005524:	40000400 	.word	0x40000400
 8005528:	50000400 	.word	0x50000400
 800552c:	40000800 	.word	0x40000800
 8005530:	50000800 	.word	0x50000800
 8005534:	40000c00 	.word	0x40000c00
 8005538:	50000c00 	.word	0x50000c00
 800553c:	40014000 	.word	0x40014000
 8005540:	50014000 	.word	0x50014000

08005544 <memset>:
 8005544:	4402      	add	r2, r0
 8005546:	4603      	mov	r3, r0
 8005548:	4293      	cmp	r3, r2
 800554a:	d100      	bne.n	800554e <memset+0xa>
 800554c:	4770      	bx	lr
 800554e:	f803 1b01 	strb.w	r1, [r3], #1
 8005552:	e7f9      	b.n	8005548 <memset+0x4>

08005554 <__libc_init_array>:
 8005554:	b570      	push	{r4, r5, r6, lr}
 8005556:	4d0d      	ldr	r5, [pc, #52]	@ (800558c <__libc_init_array+0x38>)
 8005558:	2600      	movs	r6, #0
 800555a:	4c0d      	ldr	r4, [pc, #52]	@ (8005590 <__libc_init_array+0x3c>)
 800555c:	1b64      	subs	r4, r4, r5
 800555e:	10a4      	asrs	r4, r4, #2
 8005560:	42a6      	cmp	r6, r4
 8005562:	d109      	bne.n	8005578 <__libc_init_array+0x24>
 8005564:	4d0b      	ldr	r5, [pc, #44]	@ (8005594 <__libc_init_array+0x40>)
 8005566:	2600      	movs	r6, #0
 8005568:	4c0b      	ldr	r4, [pc, #44]	@ (8005598 <__libc_init_array+0x44>)
 800556a:	f000 f817 	bl	800559c <_init>
 800556e:	1b64      	subs	r4, r4, r5
 8005570:	10a4      	asrs	r4, r4, #2
 8005572:	42a6      	cmp	r6, r4
 8005574:	d105      	bne.n	8005582 <__libc_init_array+0x2e>
 8005576:	bd70      	pop	{r4, r5, r6, pc}
 8005578:	f855 3b04 	ldr.w	r3, [r5], #4
 800557c:	3601      	adds	r6, #1
 800557e:	4798      	blx	r3
 8005580:	e7ee      	b.n	8005560 <__libc_init_array+0xc>
 8005582:	f855 3b04 	ldr.w	r3, [r5], #4
 8005586:	3601      	adds	r6, #1
 8005588:	4798      	blx	r3
 800558a:	e7f2      	b.n	8005572 <__libc_init_array+0x1e>
 800558c:	08005694 	.word	0x08005694
 8005590:	08005694 	.word	0x08005694
 8005594:	08005694 	.word	0x08005694
 8005598:	08005698 	.word	0x08005698

0800559c <_init>:
 800559c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559e:	bf00      	nop
 80055a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055a2:	bc08      	pop	{r3}
 80055a4:	469e      	mov	lr, r3
 80055a6:	4770      	bx	lr

080055a8 <_fini>:
 80055a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055aa:	bf00      	nop
 80055ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ae:	bc08      	pop	{r3}
 80055b0:	469e      	mov	lr, r3
 80055b2:	4770      	bx	lr
